<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>勺子柄の博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-03T14:01:47.010Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>鲍炳江</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql笔记</title>
    <link href="http://example.com/2021/02/02/mysql%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/02/02/mysql%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-02T07:36:24.000Z</published>
    <updated>2021-02-03T14:01:47.010Z</updated>
    
    <content type="html"><![CDATA[<p>常用命令</p><ul><li><p>显示数据库 show databases ; </p></li><li><p>显示表：1)show tables; 2) show table from test;</p></li><li><p>当前所在的库：select database();</p></li><li><p>查看表的属性 desc tableName;</p></li><li><p>查看mysql版本 1)select version(); 2)在cmd输入mysql –version</p></li><li><p>注释 # ，– ，/* */</p></li></ul><p>起别名用<strong>AS</strong> 且AS可以省略</p><p>truncate 清空数据 :truncate table user</p><p><strong>DISTINCT</strong>去重</p><p><strong>+号</strong>的作用</p><ul><li>select 100+90 做加法操作</li><li>select ‘12’ + 90 把字符串转换为整数做加法操作 如果转换失败字符串值为0</li><li>select null + 21 结果为null</li></ul><p><strong>逻辑运算符</strong>：and,or,not</p><p><strong>分页查询limit（m,n）m是初始索引 n是要显示的条目个数 limit放在查询语句的最后</strong></p><p>**安全等于&lt;=&gt;**：可以判断null和数值 </p><ul><li>select 2 &lt;=&gt; null 结果为 0</li><li>select 2 = null 结果为空</li><li>select null &lt;=&gt; null结果为1</li></ul><p><strong>ORDER BY</strong> 【asc | desc】默认是asc ：select * from user order by salary desc</p><p><strong>IFNULL</strong>：如果不是null显示第一个参数 是null显示第二个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(commission_pct,0),commission_pct from employees</span><br></pre></td></tr></table></figure><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a><strong>模糊查询</strong></h1><p><strong>LIKE</strong>：% 匹配任意多个字符 包含0个字符，_ 匹配一个或一个以上字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询第三个字母为e第五个字母为a的员工名 不区分大小写</span><br><span class="line">select last_name from employees where last_name like &#39;__e_a%&#39;;</span><br><span class="line">#查询第二个字符为_的员工名</span><br><span class="line">select last_name from employees where last_name like &#39;_\_%&#39;;</span><br></pre></td></tr></table></figure><p><strong>BETWEEN</strong>：between a and b 包含临界值a和b</p><p><strong>IN</strong>：in列表中的值必须是互相兼容的且不能使用%</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id from employees where job_id in(&#39;IT_PORT&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;)</span><br></pre></td></tr></table></figure><p><strong>IS NULL</strong>和<strong>IS NOT NULL</strong>：select * from user where id is null</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><h3 id="字母函数"><a href="#字母函数" class="headerlink" title="字母函数"></a>字母函数</h3><p>Length 获取参数值的字节个数 SELECT length(1232)</p><p>concat拼接字符串：select concat(id,’-‘,name) from user;</p><p>Upper ,Lowwer</p><p>substr:下标从1开始 包含开始位置和结束位置 一个汉字是一个符文为两个字节或三个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substr(&#39;today is a good day&#39;,7,2); #第三个参数可以省略</span><br></pre></td></tr></table></figure><p>insrt（A，B） : 返回子串B在主串A中第一次出现的起始索引 找不到返回0</p><p>trim , ltirm, rtirm 去掉空格 trim(x from b)去掉b首位出现的x</p><p>​           <img src="/2021/02/02/mysql%E7%AC%94%E8%AE%B0/log\source_posts\mysql笔记\clip_image006.png" alt="img"></p><p>lpad和rpad</p><p>​           <img src="/2021/02/02/mysql%E7%AC%94%E8%AE%B0/log\source_posts\mysql笔记\clip_image008.png" alt="img"></p><p>replace</p><p>​           <img src="/2021/02/02/mysql%E7%AC%94%E8%AE%B0/log\source_posts\mysql笔记\clip_image010.png" alt="img"></p><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><p>round 四舍五入</p><p>​           <img src="/2021/02/02/mysql%E7%AC%94%E8%AE%B0/log\source_posts\mysql笔记\clip_image002-1612253586742.png" alt="img"></p><p>ceil向上取整 floor向下取整</p><p>truncate 截断：第二个参数是小数点后的位数</p><p>​           <img src="/2021/02/02/mysql%E7%AC%94%E8%AE%B0/log\source_posts\mysql笔记\clip_image004-1612253586743.png" alt="img"></p><p>mod取余 公式为：a-a/b*b</p><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p>IF：<code>select if(10 &gt; 5,true,false)</code></p><p>CASE</p><ul><li><pre><code class="mysql">select salary,department_id,case department_idwhen 30 then salary * 1.1when 40 then salary * 1.2when 50 then salary * 1.3else salary end as newSalaryfrom employees<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```mysql</span><br><span class="line">  <span class="keyword">select</span> salary,</span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">  <span class="keyword">when</span> salary &gt; <span class="number">20000</span> <span class="keyword">then</span> <span class="comment">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">when</span> salary &gt; <span class="number">15000</span> <span class="keyword">then</span> <span class="comment">&#x27;b&#x27;</span></span><br><span class="line">  <span class="keyword">when</span> salary &gt; <span class="number">10000</span> <span class="keyword">then</span> <span class="comment">&#x27;c&#x27;</span></span><br><span class="line">  <span class="keyword">else</span> <span class="comment">&#x27;d&#x27;</span></span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">as</span> salaryLevel</span><br><span class="line">  <span class="keyword">from</span> employees</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>sum avg max min count 忽略null值 可以和distinct搭配 sum (distinct salary)</p><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><p>查询列表必须是分组函数或group by后出现的字段</p><p>查询有奖金的每个领导手下的员工的最高工资 且最高工资大于12000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(salary),manager_id from employees where commission_pct !&#x3D; null group by manager_id having max(salary) &gt; 12000 #having对分组后的结果进行筛选</span><br></pre></td></tr></table></figure><p>查询每个部门每个工种的员工的平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(salary),departmeng_id,job_id from employees group by department_id,job_id;</span><br></pre></td></tr></table></figure><h1 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h1><p>inner可以省略</p><p><strong>等值查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询名字中包含e的员工名和工种名 </span></span><br><span class="line"><span class="keyword">select</span> last_name,job_title <span class="keyword">from</span> employees e <span class="keyword">inner</span> <span class="keyword">join</span> jobs <span class="keyword">on</span> e.job_id = j.job_id <span class="keyword">where</span> e.last_name <span class="keyword">like</span> <span class="string">&#x27;%e%&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>非等值连接</strong></p><p><strong>自连接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select e.last_name,m.last_name from employees e inner join employees m on e.manager_id &#x3D; m.manager_id</span><br></pre></td></tr></table></figure><h1 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a><strong>外连接</strong></h1><p>查询结果为主表的全部记录 左外连接中left左边的是主表</p><p><strong>左外连接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b.name,bo.* from beauty b left outer join boys bo on b.boyfrientd_id &#x3D; bo.id</span><br></pre></td></tr></table></figure><p><strong>右外连接</strong></p><p><strong>全外连接</strong>：全外连接=左表全部记录+右表全部记录+相关联结果=左外连接+右外连接-相关联结果（即去重复）</p><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p><p>可以使用union操作符实现全外连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM emp e LEFT JOIN dept d ON e.deptno&#x3D;d.deptno</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM emp e RIGHT JOIN dept d ON e.deptno&#x3D;d.deptno;</span><br></pre></td></tr></table></figure><p><strong>内连接和外连接的区别</strong></p><p>内连接：取出两张表中匹配到的数据，匹配不到的不保留</p><p>外连接：取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>按子查询的位置可分为</p><ul><li>select后面：仅支持标量子查询</li><li>from后面：支持表子查询</li><li>where或having后面：标量子查询，列子查询，行子查询</li><li>exits后面：表子查询</li></ul><p>按结果集的行列数不同可分为</p><ul><li>标量子查询：结果集只有一行一列</li><li>行子查询：结果集中有一行多列</li><li>列子查询：结果集中有一列多行</li><li>表子查询：结果集中有多行多列</li></ul><p>where后面的标量子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#假设只有一个last_name为adel的人</span><br><span class="line">select first_name from employees where salary &gt; (select salary from employees where last_name &#x3D; ‘adel’)</span><br></pre></td></tr></table></figure><p>where后面的行子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询员工编号最小并且工资最高的员工信息</span><br><span class="line">select * from employees where (employee_id,salary)&#x3D;(select MIN(employee_id),MAX(salary) from employees)</span><br></pre></td></tr></table></figure><p>where后面的列子查询：使用多行比较操作符 in,not in,any/some,all</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询location_id是1400或1700的部门编号</span><br><span class="line">select distinct department_id from departments where location_id in(1400,1700)</span><br><span class="line">#查询员工姓名，要求部门号是上面查询结果列表中的某一个</span><br><span class="line">select last_name from employees where department_id in(select distinct department_id from departments where location_id in(1400,1700))</span><br></pre></td></tr></table></figure><p>having后面的标量子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line">#先查询50号部门的最低工资</span><br><span class="line">select min(salary) from employees where department_id &#x3D; 50</span><br><span class="line">#再查询每个部门的最低工资</span><br><span class="line">select min(salary),department_id from employees group by department_id</span><br><span class="line">#总查询</span><br><span class="line">select min(salary),department_id from employees group by department_id having MIN(salary) &gt; (select MIN(salary) from employees where department_id &#x3D; 50)</span><br></pre></td></tr></table></figure><p>select后面的子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询每个部门的员工个数</span><br><span class="line">select d.*,(select count(*) from employee e where e.department_id &#x3D; d.department_id ) as count from departments d</span><br></pre></td></tr></table></figure><p>from后面的子查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询每个部门的平均工资的工资等级</span><br><span class="line">select AVG(salary),department_id from employees group by department_id</span><br><span class="line">#连接上面的结果集和job_grades表 筛选条件平均工资 between lowest_sal and highest_sal</span><br><span class="line">select ag_dep.*,g.grade_level from(select AVG(salaru) ag.department_id from employees group by department_id) ag_dep inner join job_grades g on ag_dep.ag between lowest_sal and hisgest_sal</span><br></pre></td></tr></table></figure><p>exit后面的子查询：<code>select exists(select employee_id from employees where salary = 3000) #结果0或1</code></p><h1 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h1><p><strong>INSERT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">insert into study(id,name,sex) values(12,&#39;bob&#39;,&#39;male&#39;)；</span><br><span class="line">insert into study values(12,&#39;bob&#39;,&#39;male&#39;);</span><br><span class="line">#方法二</span><br><span class="line">insert into study set id &#x3D; 1,name &#x3D; &#39;bob&#39;,sex &#x3D; &#39;male&#39;;</span><br><span class="line">#方法一支持同时插入多行和子查询</span><br></pre></td></tr></table></figure><p><strong>UPDATE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#修改单表</span><br><span class="line">update user set name &#x3D; &#39;bob&#39; where name &#x3D; &#39;zhangsan&#39;</span><br><span class="line">#修改多表:修改bob的女朋友的手机号为114</span><br><span class="line">update boys bo inner join beauty b on bo.id &#x3D; b.boyfriend_id set b.phone &#x3D; 114 where bo.boyName &#x3D; &#39;bob&#39;</span><br></pre></td></tr></table></figure><p><strong>DELETE</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#单表删除</span><br><span class="line">delete from user where id &#x3D; 1;</span><br><span class="line">#多表删除：删除bob以及他女朋友的信息</span><br><span class="line">delete b,bo from beauty b inner join boys bo on b.boyfriend_id &#x3D; bo.id where bo.boyName &#x3D; &#39;bob&#39;</span><br></pre></td></tr></table></figure><p>delete和truncate的区别：如果表中有自增长的列 delete删除后自增长的列值从断点开始而truncate从0开始。truncate没有返回值不能回滚 delete有返回值能回滚</p><h1 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h1><p><strong>库的管理</strong></p><ul><li><p>创建数据库 Create databases (if not exists) mydata;</p></li><li><p>更改库的字符集 alter database mydata character set utf8</p></li><li><p>删除库 drop database (if exists) mydata;</p></li></ul><p><strong>表的管理</strong></p><p>表的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table user(id int,name varchar(20),sex varchar(8));</span><br></pre></td></tr></table></figure><p>表的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#修改列名，必须要带上类型</span><br><span class="line">alter table user change column id num int;</span><br><span class="line">#修改列的类型或约束</span><br><span class="line">alter table user modify column name char;</span><br><span class="line">#添加新列</span><br><span class="line">alter table user add column hobby varchar(20);</span><br><span class="line">#删除列</span><br><span class="line">alter table user drop column hobby;</span><br><span class="line">#修改表名</span><br><span class="line">alter table user rename to users;</span><br><span class="line">#删除表</span><br><span class="line">drop table (if exists) user;</span><br></pre></td></tr></table></figure><p>表的复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#仅复制表的结构</span><br><span class="line">create table myCopy like user;</span><br><span class="line">#复制表的结构和数据</span><br><span class="line">create  table myCopy select * from user;</span><br><span class="line">#只复制一部分数据 全部结构</span><br><span class="line">create  table myCopy select id,name from user where name &#x3D; ‘bob’;</span><br><span class="line">#仅复制某些字段</span><br><span class="line">create  table myCopy select id,name from user where 0;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MySQL是一个关系型数据库管理系统</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://example.com/2021/02/01/zookeeper/"/>
    <id>http://example.com/2021/02/01/zookeeper/</id>
    <published>2021-02-01T10:58:14.000Z</published>
    <updated>2021-02-03T13:34:31.889Z</updated>
    
    <content type="html"><![CDATA[<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><ul><li>维护配置信息</li><li>分布式锁服务</li><li>集群管理</li><li>生成分布式唯一ID</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h4><ul><li>高性能：zookeeper将全量数据存储在内存中，并直接用于客户端的所有非事务请求，尤其适用于以读为主的应用场景</li><li>高可用：zooKeeper一般以集群的方式对外提供服务，一般3~5台机器就可以组成一个可用的Zookeeper集群了，每台机器都会在内存中维护当前的服务器状态，并且每台机器之间都相互保持着通信。只要集群中超过一半的机器都能够正常工作，那么整个集群就能够正常对外服务</li><li>严格顺序访问：对于来自客户端的每个更新请求，ZooKeeper都会分配一个全局唯一的递增编号，这个编号反映了所有事务操作的先后顺序</li></ul><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a><strong>数据模型</strong></h4><p>zookeeper的数据节点可以视为树状结构（或者目录），树中的各节点被称为 znode（即zookeeper node），一个znode可以有多个子节点。zookeeper节点在结构 上表现为树状；使用路径path来定位某个znode，比如/ns1/itcast/mysql/schema1/table1，此处ns-1、itcast、mysql、schema1、table1分别是 根节点、2级节点、3级节点以及4级节点；其中ns-1是itcast的父节点，itcast是ns-1的子 节点，itcast是mysql的父节点，mysql是itcast的子节点，以此类推。 znode，兼具文件和目录两种特点。既像文件一样维护着数据、元信息、ACL、时 间戳等数据结构，又像目录一样可以作为路径标识的一部分。</p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210201193107146.png" alt="image-20210201193107146"></p><p>一个znode大体上分为3各部分： 节点的数据：即znode data(节点path, 节点data)的关系就像是java map中(key, value)的关系 节点的子节点children 节点的状态stat：用来描述当前节点的创建、修改记录，包括cZxid、ctime等</p><p>在zookeeper shell中使用get命令查看指定路径节点的data、stat信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] get /ns-1/tenant</span><br><span class="line">cZxid = 0x6a0000000a</span><br><span class="line">ctime = Wed Mar 27 09:56:44 CST 2019</span><br><span class="line">mZxid = 0x6a0000000a</span><br><span class="line">mtime = Wed Mar 27 09:56:44 CST 2019</span><br><span class="line">pZxid = 0x6a0000000e</span><br><span class="line">cversion = 2</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 2</span><br></pre></td></tr></table></figure><p>属性说明： </p><ul><li>cZxid：数据节点创建时的事务 ID ctime：数据节点创建时的时间 </li><li>mZxid：数据节点最后一次更新时的事务 ID</li><li>mtime：数据节点最后一次更新时的时间 </li><li>pZxid：数据节点的子节点最后一次被修改时的事务 ID </li><li>cversion：子节点的更改次数 </li><li>dataVersion：节点数据的更改次数 </li><li>aclVersion：节点的 ACL 的更改次数 </li><li>ephemeralOwner：如果节点是临时节点，则表示创建该节点的会话的 SessionID；如果节点是持久节点，则该属性值为 0 </li><li>dataLength：数据内容的长度 </li><li>numChildren：数据节点当前的子节点个数</li></ul><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a><strong>节点类型</strong></h4><p>zookeeper中的节点有两种，分别为临时节点和永久节点。节点的类型在创建时即 被确定，并且不能改变。</p><ul><li>临时节点：该节点的生命周期依赖于创建它们的会话。一旦会话(Session)结束，临 时节点将被自动删除，当然可以也可以手动删除。虽然每个临时的Znode都会绑定到 一个客户端会话，但他们对所有的客户端还是可见的。另外，ZooKeeper的临时节 点不允许拥有子节点。</li><li>持久化节点：该节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作 的时候，他们才能被删除</li></ul><h4 id="zookeeper单机安装"><a href="#zookeeper单机安装" class="headerlink" title="zookeeper单机安装"></a>zookeeper单机安装</h4><p>zookeeper-3.4.10.tar.gz，上传并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 进入conf目录</span><br><span class="line">cd /home/zookeeper/zookeeper-3.4.10/conf</span><br><span class="line">// 复制配置文件</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">// zookeeper根目录下新建data目录</span><br><span class="line">mkdir data</span><br><span class="line">// vi 修改配置文件中的dataDir</span><br><span class="line">// 此路径用于存储zookeeper中数据的内存快照、及事物日志文件</span><br><span class="line">dataDir=/home/zookeeper/zookeeper-3.4.10/data</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 进入zookeeper的bin目录</span><br><span class="line">cd /home/zookeeper/zookeeper-3.4.10/bin</span><br><span class="line">// 启动zookeeper</span><br><span class="line">./zkServer.sh start</span><br><span class="line">//启动：zkServer.sh start</span><br><span class="line">//停止：zkServer.sh stop</span><br><span class="line">//查看状态：zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="常用shell命令"><a href="#常用shell命令" class="headerlink" title="常用shell命令"></a>常用shell命令</h4><p><strong>新增节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create [-s] [-e] path data #其中-s 为有序节点，-e 临时节点</span><br><span class="line"><span class="meta">#</span><span class="bash">创建持久化节点</span></span><br><span class="line">create /hadoop &quot;123&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">创建持久化有序节点</span></span><br><span class="line">create -s /a &quot;a&quot; </span><br><span class="line">Created /a0000000001</span><br><span class="line">create -s /a &quot;b&quot;</span><br><span class="line">Created /b0000000002</span><br><span class="line">create -s /a &quot;c&quot;</span><br><span class="line">Created /c0000000003</span><br><span class="line"><span class="meta">#</span><span class="bash">创建临时节点 当当前会话过期后被删除[quit命令退出]</span></span><br><span class="line">create -e /tmp &quot;hhh&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">创建临时有序节点</span></span><br><span class="line">create -s -e /orderTmp &quot;ttt&quot;</span><br></pre></td></tr></table></figure><p><strong>更新节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set /hadoop &quot;345&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">也可以基于版本号进行更改，此时类似于乐观锁机制，当你传入的数据版本号(dataVersion) 和当前节点的数据版本号不符合时，会拒绝本次修改</span></span><br><span class="line">set /hadoop &quot;3456&quot; 1</span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><p>与更新节点类似：delete path [version]</p><p><strong>查看节点</strong></p><p>get path</p><p><strong>查看节点状态</strong></p><p>state path:它的返回值和 get 命令类似，但不会返回 节点数据</p><p><strong>查看节点列表</strong></p><p>查看节点列表有 ls path 和 ls2 path 两个命令，后者是前者的增强，不仅可 以查看指定路径下的所有节点，还可以查看当前节点的信息</p><p><strong>监听器</strong></p><p>get path [watch] ：注册的监听器能够在节点内容发生改变的时候，向客户端发出通知。需要注意的是 zookeeper 的触发器是一次性的 (One-time trigger)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 4] get /hadoop watch</span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] set /hadoop 45678</span><br><span class="line">WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/hadoop #节点值改变</span><br></pre></td></tr></table></figure><p>ls\ls2 path [watch]：使ls path [watch] 或 ls2 path [watch] 注册的监听器能够监听该节点下 所有子节点的增加和删除操作。也是一次性的</p><h4 id="ACL权限控制"><a href="#ACL权限控制" class="headerlink" title="ACL权限控制"></a>ACL权限控制</h4><p>zookeeper 类似文件系统，client 可以创建节点、更新节点、删除节点，那么 如何做到节点的权限的控制呢？zookeeper的access control list 访问控制列表可以做到 这一点。</p><p>acl 权限控制，使用scheme：id：permission 来标识，主要涵盖 3 个方面</p><ul><li>权限模式（scheme）：授权的策略</li><li>授权对象（id）：授权的对象</li><li>权限（permission）：授予的权限</li></ul><p>其特性如下</p><ul><li>zooKeeper的权限控制是基于每个znode节点的，需要对每个节点设置权限</li><li>每个znode支持设置多种权限控制方案和多个权限</li><li>子节点不会继承父节点的权限，客户端无权访问某节点，但可能可以访问它的子节点</li></ul><p><strong>权限模式</strong></p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210202170003037.png" alt="image-20210202170003037"></p><p><strong>授予的权限</strong></p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210202170113833.png" alt="image-20210202170113833"></p><p><strong>授权的相关命令</strong></p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210202170241887.png" alt="image-20210202170241887"></p><p>world授权模式 <code>setAcl /node1 world:anyone:cdrwa</code></p><p>IP授权模式 <code>setAcl /node2 ip:192.168.60.129:cdrwa</code></p><p>Auth授权模式 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addauth digest itcast:123456</span><br><span class="line">setAcl /node3 auth:itcast:cdrwa</span><br></pre></td></tr></table></figure><p>Digest授权模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过以下命令计算密文</span></span><br><span class="line">echo -n &lt;user&gt;:&lt;password&gt; | openssl dgst -binary -sha1 | openssl base64</span><br><span class="line">echo -n bob:123465 | openssl dgst -binary -sha1 | openssl base64</span><br><span class="line"><span class="meta">#</span><span class="bash">使用算出的密文添加权限</span></span><br><span class="line">setAcl /node digest:bob:qlzQzCLKhBROghkooLvb+Mlwv4A=:cdrwa</span><br><span class="line"><span class="meta">#</span><span class="bash">添加认证用户后 才可以得到数据</span></span><br><span class="line">addauth digest bob:123456</span><br><span class="line">get /node</span><br></pre></td></tr></table></figure><p><strong>超级管理员</strong></p><p>首先为超管生成密文</p><p>比如<code>echo -n super:admin | openssl dgst -binary -sha1 | openssl base64</code></p><p>么打开zookeeper目录下的/bin/zkServer.sh服务器脚本文件，找到如下一行</p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210202171936529.png" alt="image-20210202171936529"></p><p>在后面添加</p><p><img src="/2021/02/01/zookeeper/log\source_posts\zookeeper\image-20210202172025240.png" alt="image-20210202172025240"></p><h4 id="javaAPI"><a href="#javaAPI" class="headerlink" title="javaAPI"></a><strong>javaAPI</strong></h4><p><strong>连接到zookeeper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 计数器对象</span></span><br><span class="line">            CountDownLatch countDownLatch=<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// arg1:服务器的ip和端口</span></span><br><span class="line">            <span class="comment">// arg2:客户端与服务器之间的会话超时时间 以毫秒为单位的</span></span><br><span class="line">            <span class="comment">// arg3:连接是异步的 需要实现“监视器”对象 zookeeper集合通过监视器对象返回连接状态</span></span><br><span class="line">            ZooKeeper zooKeeper=<span class="keyword">new</span> ZooKeeper(<span class="string">&quot;192.168.52.131:2181&quot;</span>,</span><br><span class="line">                    <span class="number">5000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(event.getState()==Event.KeeperState.SyncConnected)</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;连接创建成功!&quot;</span>);</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * Decrements the count of the latch, releasing all waiting threads if the count reaches zero.</span></span><br><span class="line"><span class="comment">                         * If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes.</span></span><br><span class="line"><span class="comment">                         * If the current count equals zero then nothing happens.</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 主线程阻塞等待连接对象的创建成功</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">            <span class="comment">// 会话编号</span></span><br><span class="line">            System.out.println(zooKeeper.getSessionId());</span><br><span class="line">            zooKeeper.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步方式</span></span><br><span class="line">create(String path, <span class="keyword">byte</span>[] data, List&lt;ACL&gt; acl, CreateMode createMode)</span><br><span class="line"><span class="comment">// 异步方式</span></span><br><span class="line">create(String path, <span class="keyword">byte</span>[] data, List&lt;ACL&gt; acl, CreateMode createMode，AsyncCallback.StringCallback callBack,Object ctx)</span><br></pre></td></tr></table></figure><ul><li>path - znode路径。例如/node1 </li><li>data - 要存储在指定znode路径中的数据</li><li>acl - 要创建的节点的访问控制列表。zookeeper API提供了一个静态接口 ZooDefs.Ids 来获取一些基本的acl列表。例如，ZooDefs.Ids.OPEN_ACL_UNSAFE 返回打开znode的acl列表。</li><li>createMode - 节点的类型,这是一个枚举。 </li><li>callBack-异步回调接口 </li><li>ctx-传递上下文参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCreate</span> </span>&#123;</span><br><span class="line">    ZooKeeper zooKeeper ;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 计数器对象</span></span><br><span class="line">        CountDownLatch countDownLatch=<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// arg1:服务器的ip和端口</span></span><br><span class="line">        <span class="comment">// arg2:客户端与服务器之间的会话超时时间 以毫秒为单位的</span></span><br><span class="line">        <span class="comment">// arg3:连接是异步的 需要实现“监视器”对象 zookeeper集合通过监视器对象返回连接状态</span></span><br><span class="line">        zooKeeper=<span class="keyword">new</span> ZooKeeper(<span class="string">&quot;192.168.52.131:2181&quot;</span>,</span><br><span class="line">                <span class="number">5000</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(event.getState()==Event.KeeperState.SyncConnected)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;连接创建成功!&quot;</span>);</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * Decrements the count of the latch, releasing all waiting threads if the count reaches zero.</span></span><br><span class="line"><span class="comment">                     * If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes.</span></span><br><span class="line"><span class="comment">                     * If the current count equals zero then nothing happens.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 主线程阻塞等待连接对象的创建成功</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSync</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * READ_ACL_UNSAFE:world:anyone:r 只读的</span></span><br><span class="line"><span class="comment">         * CREATOR_ALL_ACL:赋予了节点的创建者所有的权限，在创建者采用此ACL创建节点之前，已经被服务器所认证（例如，采用 “ digest”方案）。</span></span><br><span class="line"><span class="comment">         * OPEN_ACL_UNSAFE:world:anyone:cdrwa 任何应用程序在节点上可进行任何操作，能创建、列出和删除它的子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node1&quot;</span>,<span class="string">&quot;i am node1&quot;</span>.getBytes(StandardCharsets.UTF_8), ZooDefs.Ids.READ_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAcl</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//自定义权限</span></span><br><span class="line">        <span class="comment">//world授权</span></span><br><span class="line">        List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//授权模式和授权对象</span></span><br><span class="line">        Id id = <span class="keyword">new</span> Id(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;anyone&quot;</span>);</span><br><span class="line">        acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.READ,id));</span><br><span class="line">        acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.WRITE,id));</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),acls,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAcl2</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//ip授权</span></span><br><span class="line">        List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Id id = <span class="keyword">new</span> Id(<span class="string">&quot;ip&quot;</span>,<span class="string">&quot;192.168.52.131&quot;</span>);</span><br><span class="line">        acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL,id));</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),acls,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAcl3</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//auth授权</span></span><br><span class="line">        zooKeeper.addAuthInfo(<span class="string">&quot;digest&quot;</span>,<span class="string">&quot;admin:123456&quot;</span>.getBytes());</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),ZooDefs.Ids.CREATOR_ALL_ACL,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAcl4</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//auth授权</span></span><br><span class="line">        zooKeeper.addAuthInfo(<span class="string">&quot;digest&quot;</span>,<span class="string">&quot;admin:123456&quot;</span>.getBytes());</span><br><span class="line">        List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Id id = <span class="keyword">new</span> Id(<span class="string">&quot;auth&quot;</span>,<span class="string">&quot;bob&quot;</span>);</span><br><span class="line">        acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL,id));</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),acls,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAcl5</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//digest授权</span></span><br><span class="line">        List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Id id = <span class="keyword">new</span> Id(<span class="string">&quot;digest&quot;</span>,<span class="string">&quot;bob:qlzQzCLKhBROghkooLvb+Mlwv4A=&quot;</span>);</span><br><span class="line">        acls.add(<span class="keyword">new</span> ACL(ZooDefs.Perms.ALL,id));</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),acls,CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPer</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建持久化顺序节点</span></span><br><span class="line">        String result = zooKeeper.create(<span class="string">&quot;/create/node1&quot;</span>,<span class="string">&quot;i am node1&quot;</span>.getBytes(StandardCharsets.UTF_8), ZooDefs.Ids.READ_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAsunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/create/node2&quot;</span>,<span class="string">&quot;i am node2&quot;</span>.getBytes(StandardCharsets.UTF_8),ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, <span class="keyword">new</span> AsyncCallback.StringCallback()&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> rc 0代表创建成功</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> path 节点路径</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ctx  上下文参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> name 节点路径</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;i am ctx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        zooKeeper.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">zooKeeper是一个经典的分布式数据—致性解决方案，致力于为分布式应用提供一个高性能、高可用，且具有严格顺序访问控制能力的分布式协调存储服务</summary>
    
    
    
    <category term="分布式" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>解决chrome访问https网站出现您的连接不是私密的问题</title>
    <link href="http://example.com/2021/01/29/%E8%A7%A3%E5%86%B3chrome%E8%AE%BF%E9%97%AEhttps%E7%BD%91%E7%AB%99%E5%87%BA%E7%8E%B0%E6%82%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%98%AF%E7%A7%81%E5%AF%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/01/29/%E8%A7%A3%E5%86%B3chrome%E8%AE%BF%E9%97%AEhttps%E7%BD%91%E7%AB%99%E5%87%BA%E7%8E%B0%E6%82%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%98%AF%E7%A7%81%E5%AF%86%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-01-29T06:49:22.000Z</published>
    <updated>2021-02-03T14:34:19.572Z</updated>
    
    <content type="html"><![CDATA[<p>今天访问博客codebob111.github.io的时候chrome显示连接不是私密连接</p><p><img src="/image-20210129145042596.png" alt="image-20210129145042596"></p><p>在网上看了好多博客 最后终于找到了解决方法 开启使用安全dns并勾上第二个选项</p><p><img src="/2021/01/29/%E8%A7%A3%E5%86%B3chrome%E8%AE%BF%E9%97%AEhttps%E7%BD%91%E7%AB%99%E5%87%BA%E7%8E%B0%E6%82%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E6%98%AF%E7%A7%81%E5%AF%86%E7%9A%84%E9%97%AE%E9%A2%98/image-20210129145207994.png" alt="image-20210129145207994"></p>]]></content>
    
    
    <summary type="html">解决chrome访问https网站出现您的连接不是私密连接的问题</summary>
    
    
    
    <category term="bug" scheme="http://example.com/categories/bug/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>pig_note</title>
    <link href="http://example.com/2021/01/25/pig-note/"/>
    <id>http://example.com/2021/01/25/pig-note/</id>
    <published>2021-01-25T13:04:21.000Z</published>
    <updated>2021-02-03T13:50:25.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="getway"><a href="#getway" class="headerlink" title="getway"></a>getway</h1><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>PigRequestGlobalFilter,对全部的微服务提供了安全过滤（这个后边会讲）和全局StripPrefix=1配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigRequestGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1. 清洗请求头中from 参数</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      因为部分内部feign调用 是没有token的,例如定时任务去调用upms的接口，所以需要在请求头中加了from in的标志</span></span><br><span class="line"><span class="comment">      ,upms看到这个from就放行了，但外部可能会人工恶意传入 所以网关要给清洗掉</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      ServerHttpRequest request = exchange.getRequest().mutate()</span><br><span class="line">            .headers(httpHeaders -&gt; httpHeaders.remove(SecurityConstants.FROM)).build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 重写StripPrefix(截取前缀)=1 : 假如我们通过 Spring Cloud Gateway 访问/aaa/bbb/ccc/ddd的时候如果StripPrefix=2</span></span><br><span class="line">      <span class="comment">// 那么当网关服务向后转发请求时，会去掉/aaa/bbb 微服务收到的就是/ccc/ddd</span></span><br><span class="line">      <span class="comment">// 记录修改前的url</span></span><br><span class="line">      addOriginalRequestUrl(exchange, request.getURI());</span><br><span class="line">      String rawPath = request.getURI().getRawPath(); <span class="comment">// /auth/oauth/token</span></span><br><span class="line">      String newPath = <span class="string">&quot;/&quot;</span> + Arrays.stream(StringUtils.tokenizeToStringArray(rawPath, <span class="string">&quot;/&quot;</span>)).skip(<span class="number">1L</span>)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;/&quot;</span>));  <span class="comment">// /oauth/token</span></span><br><span class="line">      ServerHttpRequest newRequest = request.mutate().path(newPath).build();</span><br><span class="line">      exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, newRequest.getURI());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> chain.filter(exchange.mutate().request(newRequest.mutate().build()).build());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网关降级"><a href="#网关降级" class="headerlink" title="网关降级"></a>网关降级</h2><p>以UMPS路由配置为例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">locator:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#UPMS 模块</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pig-upms</span>      <span class="comment"># 唯一的服务ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://pig-upms</span> <span class="comment"># 注册中心的服务名称，实现负载均衡</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/admin/**</span>  <span class="comment">#所有业务的请求前缀</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span>           <span class="comment">#断路器降级策略</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">&#x27;forward:/fallback&#x27;</span> <span class="comment"># 降级接口的地址</span></span><br></pre></td></tr></table></figure><p>Spring Cloud Gateway 会自动寻找配置Hystrix的Filter，这个功能是内置的，然后回调我们提供的fallbackUr</p><p>降级入口。这里的意思类似于SpringMVC 定义一个 @GetMapping(“/fallback”) 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterFunctionConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HystrixFallbackHandler hystrixFallbackHandler;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ImageCodeHandler imageCodeHandler;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RouterFunction <span class="title">routerFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route(</span><br><span class="line">      RequestPredicates.path(<span class="string">&quot;/fallback&quot;</span>)</span><br><span class="line">        .and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), hystrixFallbackHandler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h1><p>Spring Security Oauth2 以redis的方式存储Token</p>]]></content>
    
    
    <summary type="html">学习pig项目过程中的记录和总结</summary>
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="心得" scheme="http://example.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>面试题总结</title>
    <link href="http://example.com/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-23T06:51:39.000Z</published>
    <updated>2021-02-03T13:36:55.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>七层协议 五层协议 四层协议</strong> </p><p>应用层：通过应用进程之间的交互完成特定的网络应用</p><p><strong>运输层</strong>：为两台计算机之间进程的通信提供通用的数据传输服务</p><p>网络层：计算机网络中进行通讯的两个计算机之间的有很多数据链路和通讯子网，网络层负责找到合适的网间路由和链路节点，确保数据及时传输</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a><strong>三次握手</strong></h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210123145701309.png" alt="image-20210123145701309"></p><p><strong>为什么需要三次握手</strong></p><p>三次握手的最主要目的是保证连接是双工的。为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次握手。</p><p><strong>第2次握手传回了ACK，为什么还要传回SYN？</strong></p><p>接收端传回发送端所发送的ACK是为了告诉客户端，我接收到的信息确实就是你所发送的信号了，这表明从客户端到服务端的通信是正常的。而回传SYN则是为了建立并确认从服务端到客户端的通信</p><p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。 ACK(Acknowledgement)是应答消息</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭</p><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210123150815077.png" alt="image-20210123150815077"></p><p><strong>为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</strong></p><p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的 FIN 报文通知时，它仅仅表示对方没有数据发送给你了，但是你还可以给对方发送数据，也有这么种可能，你还有一些数据在传给对方的途中，所以你不能立马关闭连接,也即你可能还需要把在传输途中的数据给对方之后，又或者，你还有一些数据需要传输给对方后，（再关闭连接）再发送FIN 报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。</p><p><strong>为什么 TIME_WAIT 状态还需要等 2MSL（Maximum Segment Lifetime）后才能返回到 CLOSED 状态？</strong></p><p>因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文</p><p><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h2 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210124134700276.png" alt="image-20210124134700276"></p><h2 id="tcp协议如何保证可靠传输"><a href="#tcp协议如何保证可靠传输" class="headerlink" title="tcp协议如何保证可靠传输"></a>tcp协议如何保证可靠传输</h2><ol><li>应用数据被分割成 TCP 认为最适合发送的数据块并为每一个包进行编号，接收方对数据包进行排序，丢弃重复的数据，把有序数据传送给应用层。</li><li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP发送端不允许发送超过接收端缓冲区大小的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 利用滑动窗口实现流量控制。</li><li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li><li><strong>ARQ协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ol><h2 id="ARQ协议"><a href="#ARQ协议" class="headerlink" title="ARQ协议"></a>ARQ协议</h2><p><strong>自动重传请求</strong>（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ包括停止等待ARQ协议和连续ARQ协议。</p><h3 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85arq%E5%8D%8F%E8%AE%AE">停止等待ARQ协议</a></h3><ul><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；</li><li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li></ul><p><strong>优点：</strong> 简单</p><p><strong>缺点：</strong> 信道利用率低，等待时间长</p><p><strong>1) 无差错情况:</strong></p><p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p><p><strong>2) 出现差错情况（超时重传）:</strong></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p><p><strong>3) 确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失</strong> ：确认消息在传输过程丢失。当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li><li><strong>确认迟到</strong> ：确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。</li></ul><h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=%E8%BF%9E%E7%BB%ADarq%E5%8D%8F%E8%AE%AE">连续ARQ协议</a></h3><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p><p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p><p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p><a href="https://blog.csdn.net/qq_41431406/article/details/97926927">https://blog.csdn.net/qq_41431406/article/details/97926927</a></p><h2 id="从输入url到页面加载完成发生了什么"><a href="#从输入url到页面加载完成发生了什么" class="headerlink" title="从输入url到页面加载完成发生了什么"></a>从输入url到页面加载完成发生了什么</h2><p><a href="https://www.cnblogs.com/liutianzeng/p/10456865.html">https://www.cnblogs.com/liutianzeng/p/10456865.html</a></p><h2 id="同源策略和跨域"><a href="#同源策略和跨域" class="headerlink" title="同源策略和跨域"></a>同源策略和跨域</h2><p>同源策略：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong></p><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源</p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制。</p><p>跨域解决方法</p><p>例如<a href="http://www.123.com/index.html%E9%9C%80%E8%A6%81%E8%B0%83%E7%94%A8www.456.com/server.php%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%86%99%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3www.123.com/server.php%EF%BC%8C%E7%94%B1%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%9C%A8%E5%90%8E%E7%AB%AF%E5%8E%BB%E8%B0%83%E7%94%A8www.456.com/server.php%E5%B9%B6%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E8%BF%94%E5%9B%9E%E7%BB%99index.html%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%90%86%E7%9A%84%E6%A8%A1%E5%BC%8F%E3%80%82%E7%9B%B8%E5%BD%93%E4%BA%8E%E7%BB%95%E8%BF%87%E4%BA%86%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF%EF%BC%8C%E8%87%AA%E7%84%B6%E5%B0%B1%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82">www.123.com/index.html需要调用www.456.com/server.php，可以写一个接口www.123.com/server.php，由这个接口在后端去调用www.456.com/server.php并拿到返回值，然后再返回给index.html，这就是一个代理的模式。相当于绕过了浏览器端，自然就不存在跨域问题。</a></p><h2 id="长连接和短链接"><a href="#长连接和短链接" class="headerlink" title="长连接和短链接"></a>长连接和短链接</h2><p>所谓，短连接说的就是 server 端 与 client 端建⽴连接之后，读写完成之后就关闭掉连接，如果下⼀次再要互相发送消息，就要重新连接。短连接的优点很明显，就是管理和实现都比较简单，缺点也很明显，每⼀次的读写都要建⽴连接必然会带来⼤量⽹络资源的消耗，并且连接的建⽴也需要耗费时间。<br>⻓连接说的就是 client 向 server 双⽅建⽴连接之后，即使 client 与 server 完成⼀次读写，它们之间的连接并不会主动关闭，后续的读写操作会继续使⽤这个连接。⻓连接的可以省去较多的 TCP 建⽴和关闭的操作，降低对⽹络资源的依赖，节约时间。对于频繁请求资源的客户来说，⾮常适⽤⻓连接。</p><h2 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h2><p><a href="https://blog.csdn.net/qq_28296925/article/details/80921585">https://blog.csdn.net/qq_28296925/article/details/80921585</a></p><h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><p>URI是：协议+主机（不含端口）+具体路径（不一定含文件）；URL是：协议+主机（默认是80，或是别的端口）+具体文件路径（还必须是对应到路径下面的具体文件名称）。所以URI是粗框架，URL是详细定位。。。比如URI：<a href="http://www.123.com/123/%EF%BC%8C%E8%AF%A5%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%8F%AF%E8%83%BD%E6%9C%89index.html%E5%92%8Cindex.htm%EF%BC%88%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%89%E3%80%82%E3%80%82%E3%80%82%E6%AF%94%E5%A6%82URL:http://www.123.com/123/index.html%EF%BC%88%E5%94%AF%E4%B8%80%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%89">http://www.123.com/123/，该目录下可能有index.html和index.htm（两个文件）。。。比如URL:http://www.123.com/123/index.html（唯一的文件）</a></p><h2 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h2><ol><li><p><strong>端口</strong> ：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</p></li><li><p>安全性和资源消耗：</p><p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。</p><ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ol><h2 id="带宽和吞吐量"><a href="#带宽和吞吐量" class="headerlink" title="带宽和吞吐量"></a>带宽和吞吐量</h2><p>两者的单位都是Mbps.当我们讨论通信链路的带宽时，一般是指链路上每秒所能传送的<a href="http://baike.baidu.com/view/3021024.htm">比特数</a>，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。我们可以说<a href="http://baike.baidu.com/view/848.htm">以太网</a>的带宽是10Mbps。但是，我们需要区分链路上的可用带宽（带宽）与实际链路中每秒所能传送的比特数（吞吐量）。我们倾向于用“吞吐量”一次来表示一个系统的测试性能。这样，因为实现受各种低效率因素的影响，所以由一段带宽为10Mbps的链路连接的一对节点可能只达到2Mbps的吞吐量。这样就意味着，一个主机上的应用能够以2Mbps的速度向另外的一个主机发送数据。</p><h2 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h2><p>A类地址(1~126)：网络号占前8位，以0开头，主机号占后24位。</p><p>B类地址(128~191)：网络号占前16位，以10开头，主机号占后16位。</p><p>C类地址(192~223)：网络号占前24位，以110开头，主机号占后8位。</p><p>D类地址(224~239)：以1110开头，保留位多播地址。</p><p>E类地址(240~255)：以1111开头，保留位今后使用。</p><h2 id="客户端不断进行请求链接会怎样？DDos-Distributed-Denial-of-Service-攻击？"><a href="#客户端不断进行请求链接会怎样？DDos-Distributed-Denial-of-Service-攻击？" class="headerlink" title="客户端不断进行请求链接会怎样？DDos(Distributed Denial of Service)攻击？"></a>客户端不断进行请求链接会怎样？DDos(Distributed Denial of Service)攻击？</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210126124355659.png" alt="image-20210126124355659"></p><h2 id="Get与POST的区别"><a href="#Get与POST的区别" class="headerlink" title="Get与POST的区别"></a>Get与POST的区别</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210126124446349.png" alt="image-20210126124446349"></p><h2 id="网络层的ARP协议工作原理"><a href="#网络层的ARP协议工作原理" class="headerlink" title="网络层的ARP协议工作原理"></a>网络层的ARP协议工作原理</h2><p>网络层的ARP协议完成了IP地址与物理地址的映射。首先，每台主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己ARP列表中是否存在该IP地址对应的MAC地址：如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><h2 id="物理层的三个基本问题"><a href="#物理层的三个基本问题" class="headerlink" title="物理层的三个基本问题"></a>物理层的三个基本问题</h2><p><strong>封装成帧</strong>：在一段数据前后添加首部和尾部，其中包含控制信息 还起到帧定界的功能</p><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210127140125472.png" alt="image-20210127140125472"></p><ul><li>mtu：最大传送单元</li></ul><p><strong>透明传输</strong>：如果数据中出现像SOH，EOT这样的帧定界控制字符，使用转义符进行转移，接收端收到数据后再去掉转义符</p><p><strong>差错检测</strong>：<strong>使用循环冗余检测传输过程中是否有差错</strong></p><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="netty是什么"><a href="#netty是什么" class="headerlink" title="netty是什么?"></a>netty是什么?</h2><ol><li>Netty 是⼀个 基于 NIO 的 client-server(客户端服务器)框架，使⽤它可以快速简单地开发⽹<br>络应⽤程序。</li><li>它极⼤地简化并优化了 TCP 和 UDP 套接字服务器等⽹络编程,并且性能以及安全性等很多⽅⾯</li></ol><p>-甚⾄都要更好。<br>3. ⽀持多种协议 如 FTP，SMTP，HTTP 以及各种⼆进制和基于⽂本的传统协议。</p><h2 id="netty应用场景"><a href="#netty应用场景" class="headerlink" title="netty应用场景"></a>netty应用场景</h2><p>Netty 主要⽤来做⽹络通信 :</p><ol><li>作为 RPC 框架的⽹络通信⼯具 ： 我们在分布式系统中，不同服务节点之间经常需要相互调<br>⽤，这个时候就需要 RPC 框架了。不同服务节点之间的通信是如何做的呢？可以使⽤ Netty 来<br>做。⽐如我调⽤另外⼀个节点的⽅法的话，⾄少是要让对⽅知道我调⽤的是哪个类中的哪个⽅法<br>以及相关参数吧！</li><li>实现⼀个⾃⼰的 HTTP 服务器 ：通过 Netty 我们可以⾃⼰实现⼀个简单的 HTTP 服务器，这个<br>⼤家应该不陌⽣。说到 HTTP 服务器的话，作为 Java 后端开发，我们⼀般使⽤ Tomcat 比较<br>多。⼀个最基本的 HTTP 服务器可要以处理常⻅的 HTTP Method 的请求，⽐如 POST 请求、GET<br>请求等等。</li><li>实现⼀个即时通讯系统 ： 使⽤ Netty 我们可以实现⼀个可以聊天类似微信的即时通讯系统</li><li><strong>实现消息推送系统</strong> ：市⾯上有很多消息推送系统都是基于 Netty 来做的。</li></ol><h2 id="netty的核心组件"><a href="#netty的核心组件" class="headerlink" title="netty的核心组件"></a>netty的核心组件</h2><p><strong>Channel</strong></p><p>Channel 接⼝是 Netty 对⽹络操作的抽象类，它除了包括基本的 I/O 操作，如bind() 、 connect() 、 read() 、 write() 等。</p><p>比较常⽤的 Channel 接⼝实现类是 NioServerSocketChannel （服务端）和NioSocketChannel （客户端）</p><p><strong>EventLoop</strong></p><p>EventLoop 的主要作⽤是负责监听⽹络事件并调⽤事件处理器进⾏相关 I/O 操作的处理。</p><p>那 Channel 和 EventLoop 直接有啥联系呢？<br>EventLoop 负责处理注册到其上的 Channel的 I/O 操作，两者配合参与 I/O 操作。</p><p><strong>ChannelFuture</strong></p><p>Netty 是异步⾮阻塞的，所有的 I/O 操作都为异步的。<br>因此，我们不能⽴刻知道操作是否执⾏成功，但是，你可以通过 ChannelFuture 接⼝的addListener() ⽅法注册⼀个ChannelFutureListener ，当操作执⾏成功或者失败时，监听就会⾃动触发返回结果。</p><p>并且，你还可以通过 ChannelFuture 的 channel() ⽅法获取关联的 Channel</p><p>另外，我们还可以通过 ChannelFuture 接⼝的 sync() ⽅法让异步的操作变成同步的。</p><p><strong>ChannelHandler 和 ChannelPipeline</strong></p><p>ChannelHandler 是消息的具体处理器。他负责处理读写操作、客户端连接等事情。<br>ChannelPipeline 为 ChannelHandler 的链，提供了⼀个容器并定义了⽤于沿着链传播⼊站和出站事件流的 API 。当 Channel 被创建时，它会被⾃动地分配到它专属的 ChannelPipeline 。</p><h2 id="Netty-的零拷贝实现？"><a href="#Netty-的零拷贝实现？" class="headerlink" title="Netty 的零拷贝实现？"></a>Netty 的零拷贝实现？</h2><p>在 OS 层⾯上的 Zero-copy 通常指避免在 ⽤户态(User-space) 与 内核态(Kernel-space)之间来回拷⻉数据。⽽在 Netty 层⾯ ，零拷⻉主要体现在对于数据操作的优化。<br>Netty 中的零拷⻉体现在以下⼏个⽅⾯</p><ol><li>使⽤ Netty 提供的 CompositeByteBuf 类, 可以将多个 ByteBuf 合并为⼀个逻辑上的<br>ByteBuf , 避免了各个 ByteBuf 之间的拷⻉。</li><li>ByteBuf ⽀持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同⼀个存储区域的<br>ByteBuf , 避免了内存的拷⻉。</li><li>通过 FileRegion 包装的 FileChannel.tranferTo 实现⽂件传输, 可以直接将⽂件缓冲<br>区的数据发送到⽬标 Channel , 避免了通过传统循环 write的⽅式导致的内存拷⻉问题.</li></ol><h2 id="netty心跳机制"><a href="#netty心跳机制" class="headerlink" title="netty心跳机制"></a>netty心跳机制</h2><p>⼼跳机制的⼯作原理是: 在 client 与 server 之间在⼀定时间内没有数据交互时, 即处于 idle 状态时, 客户端或服务器就会发送⼀个特殊的数据包给对⽅, 当接收⽅收到这个数据报⽂后, 也⽴即发送⼀个特殊的数据报⽂, 回应发送⽅, 此即⼀个 PING-PONG 交互。所以, 当某⼀端收到⼼跳消息后, 就知道了对⽅仍然在线, 这就确保 TCP 连接的有效性.</p><p>TCP 实际上⾃带的就有⻓连接选项，本身是也有⼼跳包机制，也就是 TCP 的选项： SO_KEEPALIVE 。但是，TCP 协议层⾯的⻓连接灵活性不够。所以，⼀般情况下我们都是在应⽤层协议上实现⾃定义⼼跳机制的，也就是在 Netty 层⾯通过编码实现。通过 Netty 实现⼼跳机制的话，核⼼类是IdleStateHandler 。</p><h2 id="Netty-支持哪些心跳类型设置？"><a href="#Netty-支持哪些心跳类型设置？" class="headerlink" title="Netty 支持哪些心跳类型设置？"></a>Netty 支持哪些心跳类型设置？</h2><p>readerIdleTime：为读超时时间（即测试端一定时间内未接受到被测试端消息）。</p><p>writerIdleTime：为写超时时间（即测试端一定时间内向被测试端发送消息）。</p><p>allIdleTime：所有类型的超时时间。</p><h2 id="TCP-粘包-拆包的原因及解决方法？"><a href="#TCP-粘包-拆包的原因及解决方法？" class="headerlink" title="TCP 粘包/拆包的原因及解决方法？"></a><strong>TCP 粘包/拆包的原因及解决方法？</strong></h2><ul><li>TCP是以流的方式来处理数据，一个完整的包可能会被TCP拆分成多个包进行发送，也可能把小的封装成一个大的数据包发送。</li><li>TCP粘包/分包的原因：<ul><li>应用程序写入的字节大小大于套接字发送缓冲区的大小，会发生拆包现象，而应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包现象；</li><li>进行MSS大小的TCP分段，当TCP报文长度-TCP头部长度&gt;MSS的时候将发生拆包</li><li>以太网帧的payload（净荷）大于MTU（1500字节）进行ip分片。</li></ul></li><li>解决方法<ul><li>消息定长：FixedLengthFrameDecoder类</li><li>包尾增加特殊字符分割：行分隔符类：LineBasedFrameDecoder或自定义分隔符类 ：DelimiterBasedFrameDecoder</li><li>将消息分为消息头和消息体，消息头中带有长度信息：LengthFieldBasedFrameDecoder类。分为有头部的拆包与粘包、长度字段在前且有头部的拆包与粘包、多扩展头部的拆包与粘包。</li></ul></li></ul><h2 id="Netty-和-Tomcat-的区别"><a href="#Netty-和-Tomcat-的区别" class="headerlink" title="Netty 和 Tomcat 的区别"></a>Netty 和 Tomcat 的区别</h2><ul><li>作用不同：Tomcat 是 Servlet 容器，可以视为 Web 服务器，而 Netty 是异步事件驱动的网络应用程序框架和工具用于简化网络编程，例如TCP和UDP套接字服务器。</li><li>协议不同：Tomcat 是基于 http 协议的 Web 服务器，而 Netty 能通过编程自定义各种协议，因为 Netty 本身自己能编码/解码字节流，所有 Netty 可以实现，HTTP 服务器、FTP 服务器、UDP 服务器、RPC 服务器、WebSocket 服务器、Redis 的 Proxy 服务器、MySQL 的 Proxy 服务器等等。</li></ul><h2 id="Netty的线程模型？"><a href="#Netty的线程模型？" class="headerlink" title="Netty的线程模型？"></a><strong>Netty的线程模型？</strong></h2><p>Netty通过Reactor模型基于多路复用器接收并处理用户请求，内部实现了两个线程池，boss线程池和work线程池，其中boss线程池的线程负责处理请求的accept事件，当接收到accept事件的请求时，把对应的socket封装到一个NioSocketChannel中，并交给work线程池，其中work线程池负责请求的read和write事件，由对应的Handler处理。</p><h2 id="同步与异步、阻塞与非阻塞的区别？"><a href="#同步与异步、阻塞与非阻塞的区别？" class="headerlink" title="同步与异步、阻塞与非阻塞的区别？"></a>同步与异步、阻塞与非阻塞的区别？</h2><p>同步：发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事。</p><p>异步：当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p><p>阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回,它还会抢占cpu去执行其他逻辑，也会主动检测io是否准备好。</p><p>非阻塞：指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p><h2 id="select、poll、epoll之间的区别"><a href="#select、poll、epoll之间的区别" class="headerlink" title="select、poll、epoll之间的区别"></a>select、poll、epoll之间的区别</h2><p>(1)select==&gt;时间复杂度O(n)</p><p>它仅仅知道了，有I/O事件发生了，却并不知道是哪几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以<strong>select具有O(n)的无差别轮询复杂度</strong>，同时处理的流越多，无差别轮询时间就越长。</p><p>(2)poll==&gt;时间复杂度O(n)</p><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态， <strong>但是它没有最大连接数的限制</strong>，原因是它是基于链表来存储的.</p><p>(3)epoll==&gt;时间复杂度O(1)</p><p><strong>epoll可以理解为event poll</strong>，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是<strong>事件驱动（每个事件关联上fd）</strong>的，此时我们对这些流的操作都是有意义的。<strong>（复杂度降低到了O(1)）</strong></p><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。 </p><h2 id="netty执行流程"><a href="#netty执行流程" class="headerlink" title="netty执行流程"></a>netty执行流程</h2><ol><li>创建ServerBootStrap实例</li><li>设置并绑定Reactor线程池：EventLoopGroup，EventLoop就是处理所有注册到本线程的Selector上面的Channel</li><li>设置并绑定服务端的channel</li><li>创建处理网络事件的ChannelPipeline和handler，网络事件以流的形式在其中流转，handler完成多数的功能定制：比如编解码 SSl安全认证</li><li>绑定并启动监听端口</li><li>当轮训到准备就绪的channel后，由Reactor线程：NioEventLoop执行pipline中的方法，最终调度并执行channelHandler</li></ol><h2 id="为什么要⽤-Netty-呢"><a href="#为什么要⽤-Netty-呢" class="headerlink" title="为什么要⽤ Netty 呢"></a>为什么要⽤ Netty 呢</h2><p>因为 Netty 具有下⾯这些优点，并且相⽐于直接使⽤ JDK ⾃带的 NIO 相关的 API 来说更加易⽤。</p><ul><li>统⼀的 API，⽀持多种传输类型，阻塞和⾮阻塞的。</li><li>简单⽽强⼤的线程模型。</li><li>⾃带编解码器解决 TCP 粘包/拆包问题。</li><li>⾃带各种协议栈。</li><li>真正的⽆连接数据包套接字⽀持。</li><li>⽐直接使⽤ Java 核⼼ API 有更⾼的吞吐量、更低的延迟、更低的资源消耗和更少的内存复制。</li><li>安全性不错，有完整的 SSL/TLS 以及 StartTLS ⽀持。</li><li>社区活跃</li><li>成熟稳定，经历了⼤型项⽬的使⽤和考验，⽽且很多开源项⽬都使⽤到了 Netty， ⽐如我们经常接触的 Dubbo、RocketMQ 等等。</li></ul><h2 id="Bootstrap-和-ServerBootstrap-了解么？"><a href="#Bootstrap-和-ServerBootstrap-了解么？" class="headerlink" title="Bootstrap 和 ServerBootstrap 了解么？"></a>Bootstrap 和 ServerBootstrap 了解么？</h2><ol><li>Bootstrap 通常使⽤ connet() ⽅法连接到远程的主机和端⼝，作为⼀个 Netty TCP 协议通信中的客户端。另外， Bootstrap 也可以通过 bind() ⽅法绑定本地的⼀个端⼝，作为UDP 协议通信中的⼀端。</li><li>ServerBootstrap 通常使⽤ bind() ⽅法绑定本地的端⼝上，然后等待客户端的连接。</li><li>Bootstrap 只需要配置⼀个线程组— EventLoopGroup ,⽽ ServerBootstrap 需要配置两个线程组— EventLoopGroup ，⼀个⽤于接收连接，⼀个⽤于具体的事件处理。</li></ol><h2 id="Netty-服务端和客户端的启动过程"><a href="#Netty-服务端和客户端的启动过程" class="headerlink" title="Netty 服务端和客户端的启动过程"></a><strong>Netty 服务端和客户端的启动过程</strong></h2><p><strong>服务端</strong></p><ul><li>创建两个NioEventLoopGroup对象实例：一个处理连接请求 一个处理读写操作</li><li>创建一个服务端启动引导类/辅助类</li><li>通过group方法给引导类配置两大线程组，确定了线程模型</li><li>通过channel方法给引导类指定IO模型为NIO(NIOSeverSocketChannel)</li></ul><p><strong>客户端</strong></p><ul><li>创建一个NioEventLoopGroup对象实例</li><li>创建服务端启动的引导类</li><li>通过group方法给引导类配置线程组</li><li>通过channel方法给引导类指定IO模型为NIO(NIOSocketChannel)</li><li>通过childHandler()给引导类创建一个ChannelInitializer然后指定了客户端消息的业务处理逻辑对象</li><li>调用BootStrap的Connect方法进行连接</li></ul><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><ol><li><strong>操作系统本质上是一个运行在计算机上的软件程序 ，用于管理计算机硬件和软件资源。</strong></li><li><strong>操作系统存在屏蔽了硬件层的复杂性。</strong> </li><li><strong>操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理</strong>。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</li></ol><h2 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h2><p>在我们运行的用户程序中，凡是与系统态级别资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成</p><p>这些系统调用按功能大致可分为如下几类：</p><ul><li>设备管理。完成设备的请求或释放，以及设备启动等功能。</li><li>文件管理。完成文件的读、写、创建及删除等功能。</li><li>进程控制。完成进程的创建、撤销、阻塞及唤醒等功能。</li><li>进程通信。完成进程之间的消息传递或信号传递等功能。</li><li>内存管理。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。 </li></ul><h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><p> 线程是进程划分成的更小的运行单位，一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和方法区 (JDK1.8 之后的元空间)资源，但是每个线程有自己的<strong>程序计数器</strong>、**虚拟机栈 和 **本地方法栈。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p><h2 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h2><p><a href="https://www.jianshu.com/p/c1015f5ffa74">https://www.jianshu.com/p/c1015f5ffa74</a></p><h2 id="线程间同步方式"><a href="#线程间同步方式" class="headerlink" title="线程间同步方式"></a>线程间同步方式</h2><ol><li>**互斥量(Mutex)**：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。</li><li><strong>信号量(Semphares)</strong> ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量</li><li><strong>事件(Event)</strong> :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操</li></ol><h2 id="进程的调度算法"><a href="#进程的调度算法" class="headerlink" title="进程的调度算法"></a>进程的调度算法</h2><ul><li><strong>先到先服务(FCFS)调度算法</strong> : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>短作业优先(SJF)的调度算法</strong> : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li><li><strong>多级反馈队列调度算法</strong> ：前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li><li><strong>优先级调度</strong> ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li></ul><h2 id="内存管理主要是做什么？"><a href="#内存管理主要是做什么？" class="headerlink" title="内存管理主要是做什么？"></a><strong>内存管理主要是做什么？</strong></h2><p>操作系统的内存管理主要负责内存的分配与回收（malloc 函数：申请内存，free 函数：释放内存），另外地址转换也就是将逻辑地址转换成相应的物理地址等功能也是操作系统内存管理做的事情</p>]]></content>
    
    
    <summary type="html">整理的高频面试题和知识点</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>清除maven为下载成功的jar包</title>
    <link href="http://example.com/2021/01/12/%E6%B8%85%E9%99%A4maven%E4%B8%BA%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%E7%9A%84jar%E5%8C%85/"/>
    <id>http://example.com/2021/01/12/%E6%B8%85%E9%99%A4maven%E4%B8%BA%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%E7%9A%84jar%E5%8C%85/</id>
    <published>2021-01-12T11:15:44.000Z</published>
    <updated>2021-02-03T13:51:27.454Z</updated>
    
    <content type="html"><![CDATA[<p>导入项目如果中途退出或者发生中断 刚下载一半的jar包会下载失败 需要手动清除</p><p>创建一个txt文件 把这段内容复制进入</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=D:\maven_repository</span><br><span class="line"><span class="comment">rem 正在搜索...</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem 搜索完毕</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>修改文件后缀为.bat 点击运行</p>]]></content>
    
    
    <summary type="html">清除maven未下载成功的jar包</summary>
    
    
    
    <category term="bug" scheme="http://example.com/categories/bug/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>tcp/ip详解卷一:协议</title>
    <link href="http://example.com/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-01-05T07:36:48.569Z</published>
    <updated>2021-02-03T13:46:35.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="互联网的地址"><a href="#互联网的地址" class="headerlink" title="互联网的地址"></a>互联网的地址</h2><p>五类ip地址</p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210106201011718.png" alt="image-20210106201011718"></p><p>各类ip地址的范围</p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210106201115334.png" alt="image-20210106201115334"></p><h2 id="客户-服务器模型"><a href="#客户-服务器模型" class="headerlink" title="客户-服务器模型"></a>客户-服务器模型</h2><p>大部分网络应用程序在编写时都假设一端是客户，另一端是服务器，其目的是为了让服务器为客户提供一些特定的服务。<br>可以将这种服务分为两种类型：重复型或并发型。重复型服务器通过以下步骤进行交互：</p><p>I1.等待一个客户请求的到来。<br>I2.处理客户请求。<br>I3.发送响应给发送请求的客户。<br>I4.返回I1步。</p><p>重复型服务器主要的问题发生在I2状态。在这个时候，它不能为其他客户机提供服务。相应地，并发型服务器采用以下步骤：<br>C1.等待一个客户请求的到来。<br>C2.启动一个新的服务器来处理这个客户的请求。在这期间可能生成一个新的进程、任务或线程，并依赖底层操作系统的支持。这个步骤如何进行取决于操作系统。生成的新服务器对客户的全部请求进行处理。处理结束后，终止这个新服务器。<br>C3.返回C1步。<br>并发服务器的优点在于它是利用生成其他服务器的方法来处理客户的请求。也就是说，每个客户都有它自己对应的服务器。如果操作系统允许多任务，那么就可以同时为多个客户服务。</p><p>一般来说，TCP服务器是并发的，而UDP服务器是重复的，但也存在一些例外</p><h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><p><strong>以太网的帧格式</strong></p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210107220050740.png" alt="image-20210107220050740"></p><ul><li>CRC字段用于帧内后续字节差错的循环冗余码检验</li></ul><h2 id="SLIP：串行线路IP"><a href="#SLIP：串行线路IP" class="headerlink" title="SLIP：串行线路IP"></a><strong>SLIP：串行线路IP</strong></h2><p>SLIP的全称是SerialLineIP。它是一种在串行线路上对IP数据报进行封装的简单形式</p><p>SLIP协议定义的帧格式：<br>1)IP数据报以一个称作END（0xc0）的特殊字符结束。同时，为了防止数据报到来之前的线路噪声被当成数据报内容，大多数实现在数据报的开始处也传一个END字符（如果有线路噪声，那么END字符将结束这份错误的报文。这样当前的报文得以正确地传输，而前一个错误报文交给上层后，会发现其内容毫无意义而被丢弃）。<br>2)如果IP报文中某个字符为END，那么就要连续传输两个字节0xdb和0xdc来取代它。0xdb这个特殊字符被称作SLIP的ESC字符，但是它的值与ASCII码的ESC字符（0x1b）不同。<br>3)如果IP报文中某个字符为SLIP的ESC字符，那么就要连续传输两个字节0xdb和0xdd来取代它。下图的例子就是含有一个END字符和一个ESC字符的IP报文。在这个例子中，在串行线路上传输的总字节数是原IP报文长度再加4个字节。</p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210107230510162.png" alt="image-20210107230510162"></p><p>SLIP的缺陷：</p><p>1)每一端必须知道对方的IP地址。没有办法把本端的IP地址通知给另一端。</p><p>2)数据帧中没有类型字段（类似于以太网中的类型字段）。如果一条串行线路用于SLIP，那么它不能同时使用其他协议。</p><p>3)SLIP没有在数据帧中加上检验和（类似于以太网中的CRC字段）。如果SLIP传输的报文被线路噪声影响而发生错误，只能通过上层协议来发现（另一种方法是，新型的调制解调器可以检测并纠正错误报文）。这样，上层协议提供某种形式的CRC就显得很重要。</p><h2 id="压缩的SLIP：CompressSLIP"><a href="#压缩的SLIP：CompressSLIP" class="headerlink" title="压缩的SLIP：CompressSLIP"></a><strong>压缩的SLIP：CompressSLIP</strong></h2><p>由于串行线路的速率通常较低（19200b/s或更低），而且通信经常是交互式的（如Telnet和Rlogin，二者都使用TCP），因此在SLIP线路上有许多小的TCP分组进行交换。为了传送1个字节的数据需要20个字节的IP首部和20个字节的TCP首部，总数超过40个字节</p><p>CSLIP一般能把上面的40个字节压缩到3或5个字节。它能在CSLIP的每一端维持多达16个TCP连接，并且知道其中每个连接的首部中的某些字段一般不会发生变化。对于那些发生变化的字段，大多数只是一些小的数字和的改变。这些被压缩的首部大大地缩短了交互响应时间。</p><h2 id="PPP-点对点协议"><a href="#PPP-点对点协议" class="headerlink" title="PPP:点对点协议"></a><strong>PPP:点对点协议</strong></h2><p>PPP，点对点协议修改了SLIP协议中的所有缺陷。</p><p>PPP包括以下三个部分：<br>1)在串行链路上封装IP数据报的方法。PPP既支持数据为8位和无奇偶检验的异步模式（如大多数计算机上都普遍存在的串行接口），还支持面向比特的同步链接。<br>2)建立、配置及测试数据链路的链路控制协议（LCP：LinkControlProtocol）。它允许通信双方进行协商，以确定不同的选项。<br>3)针对不同网络层协议的网络控制协议（NCP：NetworkControlProtocol）体系。当前RFC定义的网络层有IP、OSI网络层、DECnet以及AppleTalk。例如，IPNCP允许双方商定是否对报文首部进行压缩，类似于CSLIP（缩写词NCP也可用在TCP的前面）。</p><h2 id="PPP数据帧的格式"><a href="#PPP数据帧的格式" class="headerlink" title="PPP数据帧的格式"></a><strong>PPP数据帧的格式</strong></h2><p>每一帧都以标志字符0x7e开始和结束。紧接着是一个地址字节，值始终是0xff，然后是一个值为0x03的控制字节。</p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210107235728957.png" alt="image-20210107235728957"></p><p>由于标志字符的值是0x7e，因此当该字符出现在信息字段中时，PPP需要对它进行转义。在同步链路中，该过程是通过一种称作比特填充的硬件技术来完成的。在异步链路中，特殊字符0x7d用作转义字符。当它出现在PPP数据帧中时，那么紧接着的字符的第6个比特要取其补码，具体实现过程如下：<br>1)当遇到字符0x7e时，需连续传送两个字符：0x7d和0x5e，以实现标志字符的转义。<br>2)当遇到转义字符0x7d时，需连续传送两个字符：0x7d和0x5d，以实现转义字符的转义。<br>3)默认情况下，如果字符的值小于0x20（比如，一个ASCII控制字符），一般都要进行转义。例如，遇到字符0x01时需连续传送0x7d和0x21两个字符（这时，第6个比特取补码后变为1，而前面两种情况均把它变为0）。<br>这样做的原因是防止它们出现在双方主机的串行接口驱动程序或调制解调器中，因为有时它们会把这些控制字符解释成特殊的含义。另一种可能是用链路控制协议来指定是否需要对这32个字符中的某一些值进行转义。默认情况下是对所有的32个字符都进行转义。</p><p>与SLIP类似，由于PPP经常用于低速的串行链路，因此减少每一帧的字节数可以降低应用程序的交互时延。利用链路控制协议，大多数的产品通过协商可以省略标志符和地址字段，并且把协议字段由2个字节减少到1个字节。如果我们把PPP的帧格式与前面的SLIP的帧格式进行比较会发现，PPP只增加了3个额外的字节：1个字节留给协议字段，另2个给CRC字段使用。另外，使用IP网络控制协议，大多数的产品可以通过协商采用VanJacobson报文首部压缩方法（对应于CSLIP压缩），减小IP和TCP首部长度。总的来说，PPP比SLIP具有下面这些优点：(1)PPP支持在单根串行线路上运行多种协议，不只是IP协议；(2)每一帧都有循环冗余检验；(3)通信双方可以进行IP地址的动态协商(使用IP网络控制协议)；(4)与CSLIP类似，对TCP和IP报文首部进行压缩；(5)链路控制协议可以对多个数据链路选项进行设置。为这些优点付出的代价是在每一帧的首部增加3个字节，当建立链路时要发送几帧协商数据，以及更为复杂的实现。</p><p>PPP取代SLIP是大势所趋</p><h2 id="环回接口"><a href="#环回接口" class="headerlink" title="环回接口"></a>环回接口</h2><p>大多数的产品都支持环回接口（ Loopback Interface），以允许运行在同一台主机上的客户程序和服务器程序通过 T C P / I P进行通信。A类网络号1 2 7就是为环回接口预留的。根据惯例，大多数系统把I P地址1 2 7 . 0 . 0 . 1分配给这个接口，并命名为 l o c a l h o s t。一个传给环回接口的 I P数据报不能在任何网络上出现。我们想象，一旦传输层检测到目的端地址是环回地址时，应该可以省略部分传输层和所有网络层的逻辑操作。但是大多数的产品还是照样完成传输层和网络层的所有过程，只是当I P数据报离开网络层时把它返回给自己。</p><p>环回接口处理ip数据报的简单过程</p><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210109201930597.png" alt="image-20210109201930597"></p><p>图中需要指出的关键点是：</p><ol><li>传给环回地址（一般是1 2 7 . 0 . 0 . 1）的任何数据均作为I P输入。</li><li>传给广播地址或多播地址的数据报复制一份传给环回接口，然后送到以太网上。这是因为广播传送和多播传送的定义包含主机本身。<br>3 ) 任何传给该主机I P地址的数据均送到环回接口。</li></ol><h2 id="最大传输单元MTU"><a href="#最大传输单元MTU" class="headerlink" title="最大传输单元MTU"></a>最大传输单元MTU</h2><p>MTU：数据帧的最大长度</p><p>如果 I P层有一个数据报要传，而且数据的长度比链路层的 M T U还大，那么 I P层就需要进行分片</p><h2 id="路径MTU"><a href="#路径MTU" class="headerlink" title="路径MTU"></a>路径MTU</h2><p>当在同一个网络上的两台主机互相进行通信时，该网络的 M T U是非常重要的。但是如果两台主机之间的通信要通过多个网络，那么每个网络的链路层就可能有不同的 M T U。重要的不是两台主机所在网络的 M T U的值，重要的是两台通信主机路径中的最小 M T U。它被称作路径M T U。<br>两台主机之间的路径 M T U不一定是个常数。它取决于当时所选择的路由。而选路不一定是对称的（从A到B的路由可能与从B到A的路由不同），因此路径M T U在两个方向上不一定是一致的。</p><h1 id="IP-网际协议"><a href="#IP-网际协议" class="headerlink" title="IP:网际协议"></a>IP:网际协议</h1><p>IP提供不可靠、无连接的数据报传送服务</p><p>不可靠（u n r e l i a b l e）的意思是它不能保证 I P数据报能成功地到达目的地。 I P仅提供最好的传输服务。如果发生某种错误时，如某个路由器暂时用完了缓冲区， I P有一个简单的错误处理算法：丢弃该数据报，然后发送 I C M P消息报给信源端。任何要求的可靠性必须由上层来提供（如T C P）</p><p>无连接（c o n n e c t i o n l e s s）这个术语的意思是 I P并不维护任何关于后续数据报的状态信息。每个数据报的处理是相互独立的。这也说明， I P数据报可以不按发送顺序接收。如果一信源向相同的信宿发送两个连续的数据报（先是 A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此 B可能在A到达之前先到达。</p><h2 id="ip首部"><a href="#ip首部" class="headerlink" title="ip首部"></a>ip首部</h2><p><img src="/2021/01/05/tcp-ip%E8%AF%A6%E8%A7%A3%E5%8D%B7%E4%B8%80-%E5%8D%8F%E8%AE%AE/log\source_posts\tcp-ip详解卷一-协议\image-20210110191848168.png" alt="image-20210110191848168"></p>]]></content>
    
    
    <summary type="html">计算机网络的深入学习（未完待续）</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="http://example.com/2020/12/28/leetcode/"/>
    <id>http://example.com/2020/12/28/leetcode/</id>
    <published>2020-12-28T06:25:28.000Z</published>
    <updated>2021-02-03T14:18:04.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(x))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(x),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/</a></p><p>解法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> m = nums2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = n + m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> aStart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bStart = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= sum / <span class="number">2</span>;i++)&#123;</span><br><span class="line">            left = right;</span><br><span class="line">            <span class="keyword">if</span>(aStart &lt; n &amp;&amp; (bStart &gt;= m || nums1[aStart] &lt; nums2[bStart]))&#123;</span><br><span class="line">                right = nums1[aStart++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = nums2[bStart++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = (left + right) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法二：使用二分法 假设我们要找第 <code>k</code> 小数，我们可以每次循环排除掉 <code>k/2</code> 个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> m = nums2.length;</span><br><span class="line">    <span class="keyword">int</span> left = (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> right = (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span> end1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> end2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/">https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/</a></p><p>消除状态：每次都移动较短的板 水槽面积才可能变大 若移动长板 下个水槽的面积一定小于当前水槽面积。所以无论是移动短板或者长板，我们都只关注移动后的新短板会不会变长，而每次移动的木板都只有三种情况，比原短板短，比原短板长，与原短板相等；如向内移动长板，对于新的木板：1.比原短板短，则新短板更短。2.与原短板相等或者比原短板长，则新短板不变。所以，向内移动长板，一定不能使新短板变长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> j = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            res = height[i] &gt; height[j] ? Math.max(res,(j - i) * height[j--]) : Math.max(res, (j - i) * height[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/">https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//固定 3 个指针中最左（最小）数字的指针 k，双指针 i，j 分设在数组索引 (k, len(nums)) 两端，通过双指针交替向中间移动，记录对于每个固定指针 k 的所有满足 nums[k] + nums[i] + nums[j] == 0 的 i,j 组合：</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;nums.length - <span class="number">2</span>;k++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[k] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">//防止重复</span></span><br><span class="line">          <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">int</span> i = k + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">              <span class="keyword">int</span> sum = nums[i] + nums[k] + nums[j];</span><br><span class="line">              <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="comment">//防止重复</span></span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == nums[++i]);</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == nums[--j]);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(nums[i],nums[j],nums[k])));</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == nums[++i]);</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == nums[--j]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n^2)</p><h2 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode-cn.com/problems/next-permutation/">31. 下一个排列</a></h2><p>参考答案：官方解题</p><p>以排列 [4,5,2,6,3,1][4,5,2,6,3,1] 为例：</p><p>我们能找到的符合条件的一对「较小数」与「较大数」的组合为 22 与 33，满足「较小数」尽量靠右，而「较大数」尽可能小。</p><p>当我们完成交换后排列变为 [4,5,3,6,2,1][4,5,3,6,2,1]，此时我们可以重排「较小数」右边的序列，序列变为 [4,5,3,1,2,6][4,5,3,1,2,6]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//如果是倒序的数组 i的值为-1 直接reserve</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j])&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;   </span><br><span class="line">            swap(nums ,i ,j);</span><br><span class="line">        &#125;</span><br><span class="line">        reserve(nums, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i ,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            swap(nums,i++,j--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h2><p>参考答案：官方解题</p><p>有序数组就考虑使用二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>] == target ? <span class="number">0</span> : -<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="comment">//如果左面是有序的</span></span><br><span class="line">            <span class="comment">//为什么是&lt;=:(l+r)/2是把小数部分都省去了的结果，因此当l=0,r=1时会出现l==(l+r)/2。nums[left]&lt;nums[mid]，虽然可以判断出mid左边是升序的，但当mid=0时，就会到了else中，而else中mid右边有序的，不可能成立，所以要在这个位置加个等号。</span></span><br><span class="line">            <span class="keyword">if</span>(nums[left] &lt;= nums[mid])&#123;</span><br><span class="line">                <span class="comment">//如果target在这个范围内</span></span><br><span class="line">                <span class="keyword">if</span>(nums[left] &lt;= target&amp;&amp;nums[mid] &gt;= target)&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//如果右面是有序的</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target &amp;&amp; nums[right] &gt;= target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right = mid -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/si-lu-hen-jian-dan-xi-jie-fei-mo-gui-de-er-fen-cha/">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/si-lu-hen-jian-dan-xi-jie-fei-mo-gui-de-er-fen-cha/</a></p><p>参考博客：<a href="https://www.zhihu.com/question/36132386/answer/712269942">https://www.zhihu.com/question/36132386/answer/712269942</a></p><p>​                   <a href="https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/xs41qg/">https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/xs41qg/</a></p><p>​                   <a href="https://blog.csdn.net/shaomingmin/article/details/105901635">https://blog.csdn.net/shaomingmin/article/details/105901635</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> firstPosition = FirstPosition(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(firstPosition == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lastPosition = LastPosition(nums,target);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstPosition,lastPosition&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FirstPosition</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == nums.length) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//因为是闭区间且循环终止条件是 `&lt;` 所以nums[left]被漏掉 需要做一次特殊判断</span></span><br><span class="line">        <span class="keyword">return</span> nums[left] == target ? left : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">LastPosition</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt;target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left-<span class="number">1</span>] == target ? left-<span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FindLastPosition方法中需要上取整的原因</p><p><img src="/2020/12/28/leetcode/log\source_posts\leetcode\image-20210104141114097.png" alt="image-20210104141114097"></p><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/">39. 组合总和</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/">https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/</a></p><p>代码1：无剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates,target,<span class="number">0</span>,len,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates,<span class="keyword">int</span> target,<span class="keyword">int</span> begin,<span class="keyword">int</span> len,Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin;i &lt; len;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            <span class="comment">//数组元素可以重复使用所以begin还是i</span></span><br><span class="line">            dfs(candidates,target-candidates[i],i,len,path,res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//剪枝的前提是排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates,target,<span class="number">0</span>,len,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates,<span class="keyword">int</span> target,<span class="keyword">int</span> begin,<span class="keyword">int</span> len,Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="comment">//目标值比当前数组值小 则进行剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            dfs(candidates,target-candidates[i],i,len,path,res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/">48. 旋转图像</a></h2><p>参考解题；<a href="https://leetcode-cn.com/problems/rotate-image/solution/ji-qiao-ti-zai-zeng-song-yi-wei-xing-shi-377z/">https://leetcode-cn.com/problems/rotate-image/solution/ji-qiao-ti-zai-zeng-song-yi-wei-xing-shi-377z/</a></p><p>答案中拓展了一维数组旋转的方法</p><p><img src="/2020/12/28/leetcode/log\source_posts\leetcode\image-20210106135604308.png" alt="image-20210106135604308"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">                matrix[i][n - <span class="number">1</span> - j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/hua-jie-suan-fa-53-zui-da-zi-xu-he-by-guanpengchn/">https://leetcode-cn.com/problems/maximum-subarray/solution/hua-jie-suan-fa-53-zui-da-zi-xu-he-by-guanpengchn/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum += num;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum = num;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode-cn.com/problems/jump-game/">55. 跳跃游戏</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/">https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/</a></p><ol><li>如果某一个作为 <strong>起跳点</strong> 的格子可以跳跃的距离是 3，那么表示后面 3 个格子都可以作为 <strong>起跳点</strong>。</li><li>可以对每一个能作为 <strong>起跳点</strong> 的格子都尝试跳一次，把 <strong>能跳到最远的距离</strong> 不断更新。</li><li>如果可以一直跳到最后，就成功了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; i) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; nums.length - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k = Math.max(k,nums[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode-cn.com/problems/merge-intervals/">56. 合并区间</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/">https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals,<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; merged = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; intervals.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(merged.size() == <span class="number">0</span> || merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] &lt; left)&#123;</span><br><span class="line">                merged.add(intervals[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] = Math.max(right,merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[merged.size()][]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/">https://leetcode-cn.com/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(arr,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">                arr[j] += arr[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录刷题中看到的比较好的解题并对刷过的题进行分类</summary>
    
    
    
    <category term="错题本" scheme="http://example.com/categories/%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>springCloud_mall</title>
    <link href="http://example.com/2020/12/13/springCloud-mall/"/>
    <id>http://example.com/2020/12/13/springCloud-mall/</id>
    <published>2020-12-13T14:53:24.000Z</published>
    <updated>2021-02-03T13:42:33.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h1><p>project:springboot_druid</p><p>Druid阿里巴巴开源的一个java数据库连接池，是Java语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能；集成它能够方便我们对数据库连接进行监控和分析</p><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.52.131:3306/mall?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Bbj0611..</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span> <span class="comment">#连接池初始化大小</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">10</span> <span class="comment">#最小空闲连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span> <span class="comment">#最大连接数</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span> <span class="comment">#不统计这些请求数据</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment">#访问监控网页的登录用户名和密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br></pre></td></tr></table></figure><h1 id="集成admin"><a href="#集成admin" class="headerlink" title="集成admin"></a>集成admin</h1><p>参考博客：<a href="https://www.cnblogs.com/forezp/p/10242004.html">https://www.cnblogs.com/forezp/p/10242004.html</a></p><h1 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h1><p>安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>dl.minio.org.cn<span class="regexp">/server/mi</span>nio<span class="regexp">/release/</span>linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">.<span class="regexp">/minio server /</span>data</span><br></pre></td></tr></table></figure><p>默认账号名和密码为:minioadmin</p><h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><p>下载地址:<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>解压后 启动：<code>sh startup.sh -m standalone</code></p><p>启动失败解决方法：<a href="https://www.cnblogs.com/rookiemzl/p/13814919.html">https://www.cnblogs.com/rookiemzl/p/13814919.html</a></p><p>访问地址： <a href="http://192.168.52.131:8848/nacos/">http://192.168.52.131:8848/nacos/</a></p><p>默认账号和密码：nacos</p><p><strong>nacos可以作为配置中心</strong></p><p>项目：springcloud-learning-&gt;nacos-config-client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个页面需要参数config.info 但是配置文件里没有</p><p>在nacos中创建一个配置</p><p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20201214094003249.png" alt="image-20201214094003249"></p><p>并在bootstarp中配置获取路径</p><p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20201214094027256.png" alt="image-20201214094027256"></p><h1 id="Gateway集成Oauth2-0"><a href="#Gateway集成Oauth2-0" class="headerlink" title="Gateway集成Oauth2.0"></a>Gateway集成Oauth2.0</h1><p><img src="https://pic4.zhimg.com/80/v2-93c28c22643361ecd5f265e33de6be03_1440w.png" alt="img"></p><p><strong>密码验证获取token</strong></p><p>使用postman根据密码授权模式获取token</p><p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20210129210526873.png" alt="image-20210129210526873"></p><p>/mall-auth/oauth/token被设置在网关的白名单中 可以不用认证直接访问</p><p>访问服务的时候 在headers上加上token</p><p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20210129210553051.png" alt="image-20210129210553051"></p><p>token在auth被密钥加密 在gateway中被公钥解密</p>]]></content>
    
    
    <summary type="html">学习mall-swarm项目过程中的记录和总结</summary>
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="心得" scheme="http://example.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>netty</title>
    <link href="http://example.com/2020/12/10/netty/"/>
    <id>http://example.com/2020/12/10/netty/</id>
    <published>2020-12-10T15:43:03.000Z</published>
    <updated>2021-02-03T13:50:40.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p><strong>介绍</strong></p><p>BIO(同步阻塞IO模式):服务器实现模式为 一个连接对应一个线程，即客户端有连接请求时服务端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</p><p>适用于连接数目较少且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中</p><p><strong>工作流程</strong></p><ul><li>服务端启动一个ServerSocket</li><li>客户端启动socket对服务器进行通信，默认情况下服务器需要对每个客户 建立一个线程与之通讯</li><li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝</li><li>如果有响应，客户端线程会等待请求结束后，再继续执行</li></ul><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201211180810904.png" alt="，"></p><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            pool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getId());</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = inputStream.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在linux中进行连接：<code>telnet 192.168.52.1 6666</code></p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO(同步非阻塞IO模式):服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接时如果有IO请求就进行处理</p><p>适用于连接数目较多且连接比较短的架构 </p><p>AIO适合连接数目多且连接比较长的架构</p><p>三大核心：selector-&gt;channel-&gt;buffer</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212231552096.png" alt="image-20201212231552096"></p><p>一个selector对应一个线程，buffer和channel之间是双向绑定的 客户端只能和buffer进行交互</p><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>缓冲区本质是一个可以读写数据的内存块</p><p><strong>类型</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233528926.png" alt="image-20201212233528926"></p><p><strong>方法</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233156593.png" alt="image-20201212233156593"></p><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntBuffer buffer = IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;buffer.capacity();i++)&#123;</span><br><span class="line">            buffer.put(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读写转换</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.mark());</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/woshijpf/articles/3723364.html">java.nio.Buffer flip()方法的用法详解</a></p><p><strong>ByteBuffer(二进制数据)</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233406121.png" alt="image-20201212233406121"></p><p>ByteBuffer支持类型化的put和int  put什么类型就应该get什么类型 不然会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数是bytes</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">20</span>);</span><br><span class="line">    byteBuffer.putInt(<span class="number">4</span>);</span><br><span class="line">    byteBuffer.putLong(<span class="number">5L</span>);</span><br><span class="line">    </span><br><span class="line">byteBuffer.flip();</span><br><span class="line">    </span><br><span class="line">    byteBuffer.getInt();</span><br><span class="line">    byteBuffer.getLong();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将一个buffer转换成只读的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">    byteBuffer.putInt(<span class="number">4</span>);</span><br><span class="line">    byteBuffer.putLong(<span class="number">5L</span>);</span><br><span class="line"></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    ByteBuffer readOnlyBuffer =  byteBuffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(readOnlyBuffer.hasRemaining())&#123;</span><br><span class="line">        System.out.println(readOnlyBuffer.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MappedByteBuffer可以直接在堆外内存中修改文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\data\\test.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps a region of this channel&#x27;s file directly into memory.</span></span><br><span class="line"><span class="comment">     * 参数1:文件以什么模式被映射到内存</span></span><br><span class="line"><span class="comment">     * 参数2:The position within the file at which the mapped region is to star</span></span><br><span class="line"><span class="comment">     * 参数3:The size of the region to be map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    mappedByteBuffer.put(<span class="number">0</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    mappedByteBuffer.put(<span class="number">2</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    randomAccessFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>buffer的分散和聚集：通过多个buffer完成读写操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGathering</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Scattering:将数据依次写入到buffer</span></span><br><span class="line">    <span class="comment">//Gathering:将数据依次从buffer中读取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line">        <span class="comment">//绑定端口到socket并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建buffer数据</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> byteWrite = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(byteRead &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> n = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += n;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers).stream().map(buffer-&gt; <span class="string">&quot;position=&quot;</span>+buffer.position()+<span class="string">&quot;, limit&quot;</span>+buffer.limit()).forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(byteWrite &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> n = socketChannel.write(byteBuffers);</span><br><span class="line">                byteWrite += n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt;buffer.clear());</span><br><span class="line">            System.out.println(<span class="string">&quot;byteWrite=&quot;</span>+byteWrite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>类似于流 但是可以同时进行读写 可以实现异步读写数据 可以从缓冲读数据 也可以写数据到缓冲</p><p>常见的channel有：FileChannel(用于文件读写),DatagramChannel(用于UDP的数据读写),ServerSocketChannel,SockerChannel(TCP数据读写)</p><p><strong>FileChannel类的常用方法</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201213001353087.png" alt="image-20201213001353087"></p><p>读文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">int</span> len = (<span class="keyword">int</span>) file.length();</span><br><span class="line">        ByteBuffer.allocate(len);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(len);</span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(message.length());</span><br><span class="line">        byteBuffer.put(message.getBytes());</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel.write(byteBuffer);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读写文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用一个buffer完成文件读取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadAndBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//copy test.txt to test2.txt</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel readChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test2.txt&quot;</span>);</span><br><span class="line">        FileChannel writeChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            len = readChannel.read(byteBuffer);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            writeChannel.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用transferFrom直接拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel readChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test2.txt&quot;</span>);</span><br><span class="line">        FileChannel writeChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        writeChannel.transferFrom(readChannel,<span class="number">0</span>,readChannel.size());</span><br><span class="line"></span><br><span class="line">        readChannel.close();</span><br><span class="line">        writeChannel.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>selector执行select的方法时会获取到所有selectionkey，可以通过selectionkey知道当前的channel发生了什么事件 从而去操作相关的channel</p><p><strong>常用方法</strong></p><ul><li>open：得到一个选择器对象</li><li>select：监控所有注册的通道，当其中有io操作可以进行时，将对应的selectionKey加入到内部集合中并返回。该方法不带参数的时候  当没有事件时会阻塞 带参数的时候 可以设置超时时间，selectNow立即获取selectionkey不进行等待</li><li>selectedKeys：从内部集合中得到所有的selectionkey</li><li>wakeup：唤醒selector</li></ul><p><strong>Selector，SelectionKey，SocketChannel，ServerSocketChannel之间的关系</strong></p><ul><li>当客户端连接时，会通过ServerSocketChannel得到SocketChannel</li><li>selector通过select方法 返回有事件发生的通道个数</li><li>将SocketChannel通过register方法注册到Selector上，一个selector可以注册多个channel</li><li>注册后返回一个SelectionKey，会和Selector关联</li><li>进一步得到各个SelectionKey(有事件发生的)</li><li>再通过SelectionKey反向获取SocketChannel</li><li>通过得到的channel完成业务处理</li></ul><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201228190103175.png" alt="image-20201228190103175"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">//绑定端口</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line"><span class="comment">//设置为非堵塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//把serverSocketChannel注册到selector</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(selector.select(<span class="number">1000</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;等待了1s,无连接&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey next = iterator.next();</span><br><span class="line">                <span class="comment">//如果有新的客户端连接</span></span><br><span class="line">                <span class="keyword">if</span>(next.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//为该客户端生成一个SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    <span class="comment">//将socketChannel注册到selector关注事件为write 并关联一个buffer 这个buffer是位于selector和SocketChannel之间的</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(next.isReadable())&#123;</span><br><span class="line">                    SocketChannel socketChannel = (SocketChannel)next.channel();</span><br><span class="line">                    <span class="comment">//获取channel关联的buffer</span></span><br><span class="line">                    ByteBuffer byteBuffer = (ByteBuffer) next.attachment();</span><br><span class="line">                    socketChannel.read(byteBuffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;from客户端:&quot;</span>+<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//移除当前selectionKey 防止多线程重复操作</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="comment">//如果链接不成功</span></span><br><span class="line">        <span class="keyword">if</span>(!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">            <span class="keyword">while</span>(!socketChannel.finishConnect())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;因为连接需要时间 客户端不会阻塞 我可以做其他工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="comment">//根据字节数组大小生成buffer</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(s.getBytes());</span><br><span class="line"></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelectionKey定义的四种事件：<a href="https://www.cnblogs.com/liuxiuhao/p/5785027.html">https://www.cnblogs.com/liuxiuhao/p/5785027.html</a></p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p><a href="https://blog.csdn.net/weixin_37782390/article/details/103833306">sendfile和mmap的区别以及什么是零拷贝</a></p><p>nio实现零拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroCopyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class="line">        socket.bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(-<span class="number">1</span> != readCount)&#123;</span><br><span class="line">                socketChannel.read(byteBuffer);</span><br><span class="line">                <span class="comment">//倒带:position = 0 清除mark</span></span><br><span class="line">                byteBuffer.rewind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroCopyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        String filename = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(filename).getChannel();</span><br><span class="line">        <span class="comment">//linux:一次transferTo方法就可以完成传输</span></span><br><span class="line">        <span class="comment">//windows: 一次transferTo只能传输8m</span></span><br><span class="line">        <span class="keyword">long</span> count = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line">        fileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><h2 id="传统阻塞IO服务模型"><a href="#传统阻塞IO服务模型" class="headerlink" title="传统阻塞IO服务模型"></a>传统阻塞IO服务模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141453740.png" alt="image-20210103141453740"></p><h2 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141349608.png" alt="image-20210103141349608"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141723787.png" alt="image-20210103141723787"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141852408.png" alt="image-20210103141852408"></p><p>根据Reactor的数量和处理资源池线程的数量不同 实现可以分为三种</p><ul><li>单Reactor单线程</li><li>单Reactor多线程</li><li>主从Reactor多线程</li></ul><h3 id="单Reactor单线程模式"><a href="#单Reactor单线程模式" class="headerlink" title="单Reactor单线程模式"></a>单Reactor单线程模式</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103142745489.png" alt="image-20210103142745489"></p><p>前面的NIO群聊系统就是这种类型</p><p>优缺点分析</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103142901882.png" alt="image-20210103142901882"></p><h3 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103143433032.png" alt="image-20210103143433032"></p><p>优缺点</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103144843844.png" alt="image-20210103144843844"></p><h3 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103144856459.png" alt="image-20210103144856459"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103145238171.png" alt="image-20210103145238171"></p><p>netty就是基于这种模型</p><h2 id="netty模型"><a href="#netty模型" class="headerlink" title="netty模型"></a>netty模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210105203951914.png" alt="image-20210105203951914"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210105205010494.png" alt="image-20210105205010494"></p><ul><li>该图中WorkerGroup中的NioEventGroup应为NioEventLoop</li><li>每个NioEventLoop都有一个selector 用于监听绑定在其上的多个socket网络通道（channel） 还包含一个taskQueue</li><li>每个NioChannel只会绑定再唯一的NioEventLoop上 每个NioChannel都绑定有一个自己的ChannelPipeline</li><li>NioEventLoop串行化执行 读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送</li></ul><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个线程组</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup含有的子线程(NioEventLoop)的个数默认为cpu核心线程数 * 2</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup()传入参数可以指定子线程个数</span></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建服务端的启动服务并配置参数</span></span><br><span class="line">           ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">           bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                   .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                   .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)<span class="comment">//设置线程队列得到连接个数</span></span><br><span class="line">               <span class="comment">//handler对应bossGroup，childHandler对应workerGroup</span></span><br><span class="line">               <span class="comment">//handler()是发生在初始化的时候，childHandler()是发生在客户端连接之后。</span></span><br><span class="line">                   .handler(<span class="keyword">null</span>)</span><br><span class="line">                   .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;()&#123;<span class="comment">//创建一个通道测试对象</span></span><br><span class="line">                       <span class="comment">//给pipeline设置处理器</span></span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                           <span class="comment">//传入自定义的handler</span></span><br><span class="line">                           ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">           System.out.println(<span class="string">&quot;server is ready&quot;</span>);</span><br><span class="line">           <span class="comment">//启动服务器，绑定一个端口并同步 生成了一个ChannelFuture对象</span></span><br><span class="line">           ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">           <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">           channelFuture.channel().closeFuture().sync();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           bossGroup.shutdownGracefully();</span><br><span class="line">           workerGroup.shutdownGracefully();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端发来的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx:上下文对象 含有管道pipeline，通道channel，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg:就是客户端发送的数据 默认是object类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ByteBuf比Nio中的ByteBuffer性能更高</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送的消息:&quot;</span>+byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址:&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取数据完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//把数据写到缓冲区并刷新(从缓冲区发送到管道)</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span>&#123;</span><br><span class="line">        <span class="comment">//关闭通道</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class)<span class="comment">//设置客户端通道的实现类</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;client is ready&quot;</span>);</span><br><span class="line">            <span class="comment">//启动客户端去连接服务端</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,server&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当通道有读取事件时会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息:&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址:&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="taskQueue"><a href="#taskQueue" class="headerlink" title="taskQueue"></a>taskQueue</h2><p>如果pipeline中的handler处理一个时间较长的任务时 可以把该任务交给该channel对应的NioEvenLoop的TaskQueue异步执行 防止阻塞</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210106144955073.png" alt="image-20210106144955073"></p><p>修改NettyServerHandler中的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ByteBuf比Nio中的ByteBuffer性能更高</span></span><br><span class="line"><span class="comment">//        ByteBuf byteBuf = (ByteBuf)msg;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;客户端发送的消息:&quot;+byteBuf.toString(CharsetUtil.UTF_8));</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;客户端地址:&quot;+ctx.channel().remoteAddress());</span></span><br><span class="line"><span class="comment">//模拟耗时任务</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取数据完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//把数据写到缓冲区并刷新(从缓冲区发送到管道)</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,aaa&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>客户端先需要等待10s才能得到bbb 在得到aaa</p><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端不会阻塞 立马输出go on 客户端也立刻得到aaa</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,ccc&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在队列中再增加一个任务 ccc会间隔20s才被收到 taskQueue只有一个线程处理任务</p><h2 id="scheduledTaskQueue"><a href="#scheduledTaskQueue" class="headerlink" title="scheduledTaskQueue"></a>scheduledTaskQueue</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//延时执行</span></span><br><span class="line">    ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,ccc&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scheduleTaskQueue和taskQueue是两个线程</p><h2 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107142433930.png" alt="image-20210107142433930"></p><p>工作原理</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107143303168.png" alt="image-20210107143303168"></p><p>在使用Netty进行编程时，拦截操作和转换出入站数据只需要您提供callback或利用future即可。这使得链式操作简单、高效,并有利于编写可重用的、通用的代码</p><p><strong>Future-Listener机制</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107143917889.png" alt="image-20210107143917889"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107144247867.png" alt="image-20210107144247867"></p><ul><li>绑定端口是异步操作 当绑定操作处理完 将会调用相应的监听器处理逻辑</li></ul><h2 id="http服务程序实例"><a href="#http服务程序实例" class="headerlink" title="http服务程序实例"></a>http服务程序实例</h2><p>要求：服务器回复消息给客户端 并对特定请求资源过滤</p><p>新写法：把ChannelInitializer提取出来作为一个单独的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建服务端的启动服务并配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> HttpServerInitializer());</span><br><span class="line">            <span class="comment">//启动服务器，绑定一个端口并同步 生成了一个ChannelFuture对象</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//加入一个netty 提供的 httpServerCodec（coder和encoder）</span></span><br><span class="line">        <span class="comment">//HttpServerCodec是netty提供的处理http的编解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>,<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加自定义的handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;handler&quot;</span>,<span class="keyword">new</span> HttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SimpleChannelInboundHandler是ChannelInboundHandlerAdapter的子类</span></span><br><span class="line"><span class="comment">//HttpObject:客户端和服务端相互通讯的数据被封装成 HttpObject</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果不是httpRequest请求</span></span><br><span class="line">        <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line">            System.out.println(msg.getClass());</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress());</span><br><span class="line">            <span class="comment">//回复信息给浏览器</span></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello,i am server&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">            <span class="comment">//构造一个http的响应</span></span><br><span class="line">            DefaultFullHttpResponse httpResponse = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line">            httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());</span><br><span class="line">            <span class="comment">//返回response</span></span><br><span class="line">            ctx.writeAndFlush(httpResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务 在浏览器中访问localhost:8888 根据控制台打印的信息 可以判断出浏览器发出了两次请求</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107152203610.png" alt="image-20210107152203610"></p><p>过滤掉favicon.ico的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//如果是httpRequest请求</span></span><br><span class="line">    <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line">        System.out.println(msg.getClass());</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">        HttpRequest httpRequest = (HttpRequest)msg;</span><br><span class="line">        <span class="comment">//获取uri</span></span><br><span class="line">        URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath()))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回复信息给浏览器</span></span><br><span class="line">        ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello,i am server&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">        <span class="comment">//构造一个http的响应</span></span><br><span class="line">        DefaultFullHttpResponse httpResponse = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line">        httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());</span><br><span class="line">        <span class="comment">//返回response</span></span><br><span class="line">        ctx.writeAndFlush(httpResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Netty核心模块"><a href="#Netty核心模块" class="headerlink" title="Netty核心模块"></a>Netty核心模块</h2><p>Bootstrap,ServerBootstrap</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154223866.png" alt="image-20210107154223866"></p><p>Future,ChannelFuture</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154759707.png" alt="image-20210107154759707"></p><p>Channel</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154914489.png" alt="image-20210107154914489"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154925428.png" alt="image-20210107154925428"></p><p>Selector</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155214479.png" alt="image-20210107155214479"></p><p>ChannelHandler</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155510137.png" alt="image-20210107155510137"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155716574.png" alt="image-20210107155716574"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155955429.png" alt="image-20210107155955429"></p><p>ChannelPipeline</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109140931439.png" alt="image-20210109140931439"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141324593.png" alt="image-20210109141324593"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141802136.png" alt="image-20210109141802136"></p><p>ChannelHandlerContext</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141930634.png" alt="image-20210109141930634"></p><p>ChannelOption</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109142440513.png" alt="image-20210109142440513"></p><p>EventLoop</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109142715578.png" alt="image-20210109142715578"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109143347566.png" alt="image-20210109143347566"></p><h2 id="Unpooled类"><a href="#Unpooled类" class="headerlink" title="Unpooled类"></a>Unpooled类</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109143543585.png" alt="image-20210109143543585"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ByteBuf对象 该对象包含一个数组byte[10]</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            byteBuf.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不需要读写转换 因为ByteBuf中有两个指针readerIndex和writerIndex表示下一个要写入和要读的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; byteBuf.capacity();i++)&#123;</span><br><span class="line">            <span class="comment">//该方法不会引起readIndex的变化</span></span><br><span class="line">            System.out.println(byteBuf.getByte(i));</span><br><span class="line">            <span class="comment">//根据readIndex读取</span></span><br><span class="line">            System.out.println(byteBuf.readByte());</span><br><span class="line">            <span class="comment">//readIndex,writeIndex,capacity将byteBuf划分为三个区间</span></span><br><span class="line">            <span class="comment">//0-readIndex:已读区间</span></span><br><span class="line">            <span class="comment">//readIndex-writeIndex:可读区间</span></span><br><span class="line">            <span class="comment">//writeIndex-capacity:可写区间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="群聊系统"><a href="#群聊系统" class="headerlink" title="群聊系统"></a>群聊系统</h2><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">//获取到pipeLine</span></span><br><span class="line">                            ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//加入解码器和编码器</span></span><br><span class="line">                            channelPipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            channelPipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            <span class="comment">//加入自己的业务处理handler</span></span><br><span class="line">                            channelPipeline.addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;netty服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(port).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//管理所有的channel</span></span><br><span class="line">    <span class="comment">//GlobalEventExecutor.INSTANCE)是全局事件执行器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接建立后 该方法第一个被执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//将当前客户加入聊天的信息推送给其他在线的客户端</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//该方法会将channelGroup中所有channel遍历并发送消息</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;客户端&quot;</span> + channel.remoteAddress() + <span class="string">&quot;加入聊天&quot;</span>);</span><br><span class="line">        <span class="comment">//将当前Channel加入到channelGroup</span></span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示channel处于活跃状态 提示xx上线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;上线了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示channel处于非活跃状态 提示xx下线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;下线了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//断开连接:提示在线用户xx离开</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//当前ChannelGroup容量会-1</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;客户端&quot;</span>+channel.remoteAddress()+<span class="string">&quot;离开了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据并转发给其他人</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//根据不同情况 回送不同的消息</span></span><br><span class="line">        channelGroup.forEach(ch -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel != ch)&#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;客户&quot;</span>+channel.remoteAddress() + <span class="string">&quot;发送了消息&quot;</span>+msg);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;自己发送了消息&quot;</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭通道</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class).handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">                    channelPipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    channelPipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                    channelPipeline.addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(channel.localAddress());</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                channel.writeAndFlush(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;localhost&quot;</span>,<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="心跳检测案例"><a href="#心跳检测案例" class="headerlink" title="心跳检测案例"></a>心跳检测案例</h2><p>有数据交互的时候用SimpleChannelInboundHanlder没有的时候用ChannelInboundHandlerAdapter </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))<span class="comment">//日志</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//IdleStateHandler是netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没读 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没写 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没读写 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//当IdleStatement触发后 就会传递给管道的下一个handler 通过userEventTriggered处理</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> Handler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = <span class="keyword">null</span>;</span><br><span class="line">            channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</span><br><span class="line">            IdleStateEvent stateEvent = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (stateEvent.state())&#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;++超时时间++&quot;</span> + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebSocket长连接"><a href="#WebSocket长连接" class="headerlink" title="WebSocket长连接"></a>WebSocket长连接</h2><p>实例要求：</p><ul><li>http协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接</li><li>要求：实现基于webSocket的长连接的全双工的交互</li><li>改变http协议多次请求的约束，实现长连接后，服务器可以发送消息给浏览器</li><li>客户端浏览器和服务器会相互感知</li></ul><p>server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))<span class="comment">//日志</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//因为基于http协议 所以要使用http的编码器和解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//http数据在传输过程中是分段的 HttpObjectAggregator可以将数据聚合起来</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                            <span class="comment">//浏览器请求时 ws://localhost:7000/hello 表示请求的url</span></span><br><span class="line">                            <span class="comment">//WebSocketServerProtocolHandler的核心功能是将http协议升级为ws协议 保持长连接</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> Handler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = <span class="keyword">null</span>;</span><br><span class="line">            channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TextWebSocketFrame表示一个文本帧 数据是以帧的形式传播的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到的消息:&quot;</span>+msg.text());</span><br><span class="line">        <span class="comment">//回复消息给浏览器</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务器关闭会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断当前浏览器是否支持WS</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.WebSocket)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//与服务器地址必须对应</span></span></span><br><span class="line"><span class="javascript">            socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:7000/hello&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//相当于channelRead0 可以接收服务器会送的消息</span></span></span><br><span class="line"><span class="javascript">            socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value += event.data;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//连接开启</span></span></span><br><span class="line"><span class="javascript">            socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value = <span class="string">&quot;连接开启&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//连接关闭</span></span></span><br><span class="line"><span class="javascript">            socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value += <span class="string">&quot;连接关闭&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;当前浏览器不支持ws&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//先判断socket是否创建</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!<span class="built_in">window</span>.socket)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">                if(socket.readyState == WebSocket.OPEN)&#123;</span><br><span class="line">                    socket.send(message)</span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;连接未开启&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;responseText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编码解码机制"><a href="#编码解码机制" class="headerlink" title="编码解码机制"></a>编码解码机制</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114171347281.png" alt="image-20210114171347281"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114171547184.png" alt="image-20210114171547184"></p><h2 id="ProToBuf"><a href="#ProToBuf" class="headerlink" title="ProToBuf"></a>ProToBuf</h2><p>protobuf是一种轻便高效的结构化数据存储方式，可以用于结构化数据串行化(序列化)，以message的方式管理数据，支持跨平台跨语言，高性能高可靠性</p><p>运行过程</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114201233174.png" alt="image-20210114201233174"></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><p>编写proto文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//版本</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;StudentPojo&quot;</span>; <span class="comment">//生成的外部类名，同时也是文件名</span></span><br><span class="line"><span class="comment">//使用message管理对象 会在StudentPojo外部类中生成一个内部类 它是真正要发送的pojo对象</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//proto类型与java类型的对应请查看官方文档 1表示属性序号 不是值</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载protoc 把.proto文件放到protoc.exe同目录下 执行命令:protoc.exe –java_out=. Student.proto</p><p><strong>改写simple中的代码</strong></p><p>在client中加入encoder</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114230945733.png" alt="image-20210114230945733"></p><p>在clientHandler中创建对象并发送</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114231007239.png" alt="image-20210114231007239"></p><p>server中加入decoder</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114231222528.png" alt="image-20210114231222528"></p><p>serverHandler中进行接收</p><p>方式一</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114232038708.png" alt="image-20210114232038708"></p><p>方式二</p><h3 id="传输多种类型"><a href="#传输多种类型" class="headerlink" title="传输多种类型"></a>传输多种类型</h3><p>编写一个含有多个类型的proto文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//版本</span></span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED; <span class="comment">//加快解析</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;protobuf&quot;</span>; <span class="comment">//指定生成的包</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;DataInfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个枚举类型</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">DataType</span></span>&#123;</span><br><span class="line">    StudentType = <span class="number">0</span>;</span><br><span class="line">    TeacherType = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义属性</span></span><br><span class="line">  DataType data_type = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//表示枚举类型只能出现其中一个</span></span><br><span class="line">  <span class="keyword">oneof</span> dataBody&#123;</span><br><span class="line">    Student student = <span class="number">2</span>;</span><br><span class="line">    Teacher teacher = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//proto类型与java类型的对应请查看官方文档 1表示属性序号 不是值</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> age = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改ClientHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//随机发送数据</span></span><br><span class="line">    <span class="keyword">int</span> nextInt = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">    DataInfo.MyMessage myMessage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(nextInt == <span class="number">0</span>)&#123;</span><br><span class="line">        myMessage = DataInfo.MyMessage.newBuilder().setDataType(DataInfo.MyMessage.DataType.StudentType).setStudent(DataInfo.Student.newBuilder().setId(<span class="number">3</span>).setName(<span class="string">&quot;bob&quot;</span>).build()).build();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        myMessage = DataInfo.MyMessage.newBuilder().setDataType(DataInfo.MyMessage.DataType.TeacherType).setTeacher(DataInfo.Teacher.newBuilder().setAge(<span class="number">23</span>).setName(<span class="string">&quot;bob&quot;</span>).build()).build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.writeAndFlush(myMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 修改server</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ch</span><span class="selector-class">.pipeline</span>()<span class="selector-class">.addLast</span>(&quot;<span class="selector-tag">decoder</span>&quot;,<span class="selector-tag">new</span> <span class="selector-tag">ProtobufDecoder</span>(<span class="selector-tag">DataInfo</span><span class="selector-class">.MyMessage</span><span class="selector-class">.getDefaultInstance</span>()));</span><br></pre></td></tr></table></figure><p>修改serverHandler</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115142725948.png" alt="image-20210115142725948"></p><h2 id="入站与出栈机制"><a href="#入站与出栈机制" class="headerlink" title="入站与出栈机制"></a>入站与出栈机制</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115143455187.png" alt="image-20210115143455187"></p><h2 id="Handler链调用机制"><a href="#Handler链调用机制" class="headerlink" title="Handler链调用机制"></a>Handler链调用机制</h2><p>package：netty.handler</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115144700212.png" alt="image-20210115144700212"></p><p>使用自定义编解码器来说明handler调用机制 ，客户端和服务端分别可以发送和接收long类型的数据</p><p><strong>Server</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ServerInitializer());</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入站的handler进行解码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ByteToLongDecoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LongToByteEncoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端&quot;</span> + channelHandlerContext.channel().remoteAddress() + <span class="string">&quot;读取到long &quot;</span> + aLong);</span><br><span class="line">        System.out.println(<span class="string">&quot;给客户端发送数据&quot;</span>);</span><br><span class="line">        channelHandlerContext.writeAndFlush(<span class="number">54545L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteToLongDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该方法根据接受的数据 被多次调用 如果list内容不为空则将他传入给下一个handler处理 该handler的方法也会被调用多次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(byteBuf.readableBytes() &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">            list.add(byteBuf.readLong());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongToByteEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(aLong);</span><br><span class="line">        byteBuf.writeLong(aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>client</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class)<span class="comment">//设置客户端通道的实现类</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ClientInitializer());</span><br><span class="line">            System.out.println(<span class="string">&quot;client is ready&quot;</span>);</span><br><span class="line">            <span class="comment">//启动客户端去连接服务端</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">        <span class="comment">//加入一个出站的handler进行解码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LongToByteEncoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ByteToLongDecoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息&quot;</span> + aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(<span class="number">1234546L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MessageToByteEncoder中有一个write方法该方法判断数据是否为Long类型如果不是不进行encoder直接发送</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;sdfsafdsadfsdf&quot;, CharsetUtil.UTF_8));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他常用编解码器"><a href="#其他常用编解码器" class="headerlink" title="其他常用编解码器"></a>其他常用编解码器</h2><p><strong>ReplayingDecoder</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116135659701.png" alt="image-20210116135659701"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteToLongDecoder2</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//内部自动进行判断</span></span><br><span class="line">        list.add(byteBuf.readLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其他解码器</strong></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116140257726.png" alt="image-20210116140257726"></p><h2 id="TCP粘包和拆包"><a href="#TCP粘包和拆包" class="headerlink" title="TCP粘包和拆包"></a>TCP粘包和拆包</h2><p>package：netty.tcp</p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116141719207.png" alt="image-20210116141719207"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116141840005.png" alt="image-20210116141840005"></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.readableBytes()];</span><br><span class="line">        byteBuf.readBytes(buffer);</span><br><span class="line">        String s = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端收到消息&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">120</span>;i++)&#123;</span><br><span class="line">            ByteBuf buffer = Unpooled.copiedBuffer(<span class="string">&quot;hello world&quot;</span> + i, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            ctx.writeAndFlush(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.readableBytes()];</span><br><span class="line">        byteBuf.readBytes(buffer);</span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到数据&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回送数据</span></span><br><span class="line">        ByteBuf buf = Unpooled.copiedBuffer(UUID.randomUUID().toString(),Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        channelHandlerContext.writeAndFlush(buf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义协议解决粘包拆包问题"><a href="#自定义协议解决粘包拆包问题" class="headerlink" title="自定义协议解决粘包拆包问题"></a>自定义协议解决粘包拆包问题</h3><p>package:netty.protocolTcp</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116145332644.png" alt="image-20210116145332644"></p><h2 id="服务器启动源码分析"><a href="#服务器启动源码分析" class="headerlink" title="服务器启动源码分析"></a>服务器启动源码分析</h2><p><strong>EchoServer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SSL = System.getProperty(<span class="string">&quot;ssl&quot;</span>) != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = Integer.parseInt(System.getProperty(<span class="string">&quot;port&quot;</span>, <span class="string">&quot;8007&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Configure SSL.</span></span><br><span class="line">        <span class="keyword">final</span> SslContext sslCtx;</span><br><span class="line">        <span class="keyword">if</span> (SSL) &#123;</span><br><span class="line">            SelfSignedCertificate ssc = <span class="keyword">new</span> SelfSignedCertificate();</span><br><span class="line">            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sslCtx = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bossGroup用于接收tcp请求,将请求交割workerGroup，workerGroup会获取真正的连接，然后和连接通信</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">final</span> EchoServerHandler serverHandler = <span class="keyword">new</span> EchoServerHandler();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline p = ch.pipeline();</span><br><span class="line">                            <span class="keyword">if</span> (sslCtx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                p.addLast(sslCtx.newHandler(ch.alloc()));</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//p.addLast(new LoggingHandler(LogLevel.INFO));</span></span><br><span class="line">                            p.addLast(serverHandler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start the server.</span></span><br><span class="line">            ChannelFuture f = b.bind(PORT).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait until the server socket is closed.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Shut down all event loops to terminate all threads.</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>EventLoopGroup</strong>是事件循环组 含有多个EventLoop 可以注册channel 默认线程数:核心线程数 * 2 </p><p>通过debug查看 断点：EventLoopGroup workerGroup = new NioEventLoopGroup()</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117125453180.png" alt="image-20210117125453180"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">NettyRuntime</span>.</span></span>available<span class="constructor">Processors()</span>获取核心线程数</span><br></pre></td></tr></table></figure><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117130022398.png" alt="image-20210117130022398"></p><p>线程放在数组EventExcutor中：继续debug到方法MultithreadEventExecutorGroup中</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133132513.png" alt="image-20210117133132513"></p><p>参数说明：</p><ul><li>Executor：如果传入null则采用Netty默认的线程工厂和默认的执行器ThreadPerTaskExecutor</li><li>chooserFactory：单例new  EventExecutorChooserFactory ()</li><li>在创建执行器时传入的固定参数</li></ul><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117130829226.png" alt="image-20210117130829226"></p><p>为每个单例线程池添加一个关闭监听器</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133602412.png" alt="image-20210117133602412"></p><p>将所有单例线程池添加到HashSet中</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133644923.png" alt="image-20210117133644923"></p><p>children的类型是EventExecutor他是NioEventLoop的父接口</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117131059365.png" alt="image-20210117131059365"></p><p><strong>ServerBootStrap</strong>是一个引导类 用于启动服务器和引导整个程序的初始化。和ServerChannel有关联</p><p>首先变量b调用了group方法把两个group放入自己的字段</p><p>然后添加了一个channel 参数为Class，引导类通过这个class对象用ChannelFactory反射创建Channel </p><p>debug到AbstartBootstrap中</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117132618131.png" alt="image-20210117132618131"></p><p>option方法传入tcp参数 放在LinkedHashMap中</p><p>handler方法传入一个handler这个handler专属于ServerSocketChannel而不是SocketChannel</p><p>childHandler传入一个handler 这个handler在每个客户端连接时调用供SocketChannel使用</p><p><strong>bind</strong>:底层调用了dobind，dobind中有两个核心方法initAndRegister()和doBind0</p><p>在iniAndResigter中创建了NioServerSocketChannel，channelFactory.newChannel()做了以下操作</p><ul><li>(1)通过NIO的SelectorProvider的openServerSocketChannel方法得到JDK的通道。目的是让Netty包装JDK的 channel。<br>(2)创建了一个唯一的ChannelId，创建了一个NioMessageUnsecurity，用于操作消息，创建了DefaultChannelPipeline 管道，是个双向链表结构，用于过滤所有的进出的消息。<br>(3创建了一个NioServerSocketChannelConfig对象，用于对外展示一些配置.</li></ul><p>init()方法：</p><ul><li>设置了NioServerSocketChannel的TCP属性</li><li>对NioServerSocketChannel的ChannelPipeline添加ChannelInitialize处理器</li><li>pipeLine是一个双向链表 本身初始化了head和tail 调用addLast方法是将handler插入到tail的前面 tail永远在最后面做一些系统的固定工作</li></ul><p>pipeLine的addLast方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118123748135.png" alt="image-20210118123748135"></p><p>dobind0():bind会调用NioServerSocketChannel中的dobind方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118125013825.png" alt="image-20210118125013825"></p><p>执行完后 服务启动完成 进入NioEventLoop对事件实行循环监听</p><h2 id="服务器接收客户端请求源码分析"><a href="#服务器接收客户端请求源码分析" class="headerlink" title="服务器接收客户端请求源码分析"></a>服务器接收客户端请求源码分析</h2><p>NioEventLoop的processSelectedKey方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118130702064.png" alt="image-20210118130702064"></p><p>查看SelectionKey：当接受一个连接的时候readyOps是16</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118130739324.png" alt="image-20210118130739324"></p><p>在unsafe.read()处标断点 debug 启动 在浏览器访问localhost:8007</p><p>read方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118131430679.png" alt="image-20210118131430679"></p><p>doReadMessage方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118131506713.png" alt="image-20210118131506713"></p><p>pipeline.fireChannelRead方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118132243964.png" alt="image-20210118132243964"></p><p>channelRead方法</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118135049425.png" alt="image-20210118135049425"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118132559863.png" alt="image-20210118132559863"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140151220.png" alt="image-20210118140151220"></p><p>register底层调用</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140217227.png" alt="image-20210118140217227"></p><p>next返回一个Executor它是workGroup子线程中的一个</p><p>regiter把channel再次包装 </p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140308861.png" alt="image-20210118140308861"></p><p>最后调用的是AbstractChannel中的register</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140655725.png" alt="image-20210118140655725"></p><p>最后调用doBeginRead开始监听读</p><h2 id="pipeline源码分析"><a href="#pipeline源码分析" class="headerlink" title="pipeline源码分析"></a>pipeline源码分析</h2><p>每当ServerSocket创建一个连接的时候 都会创建一个socket 每个新建的socket都会被分配一个ChannelPipeline 每个ChannelPipeline都会包含多个Context context是对handler的封装</p><p>入站出站是根据context的状态进行判断 找到链中相应的handler</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122133352078.png" alt="image-20210122133352078"></p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122133737141.png" alt="image-20210122133737141"></p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC—远程过程调用，是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程，当两个或多个应用程序都分布在不同的服务器上，它们之间的调用都像是本地方法调用一样(如图)</p><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122140307335.png" alt="image-20210122140307335"></p><h2 id="基于Netty实现DubboRPC"><a href="#基于Netty实现DubboRPC" class="headerlink" title="基于Netty实现DubboRPC"></a>基于Netty实现DubboRPC</h2>]]></content>
    
    
    <summary type="html">Netty是一个异步的，基于事件驱动的网络应用框架，用以快速开发高性能 高可靠性的网络IO程序，本质是一个NIO框架 适用于服务器通讯相关的多种应用场景</summary>
    
    
    
    <category term="高并发" scheme="http://example.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://example.com/2020/12/01/redis/"/>
    <id>http://example.com/2020/12/01/redis/</id>
    <published>2020-12-01T10:13:56.000Z</published>
    <updated>2021-02-03T13:59:44.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>redis-benchmark</strong>可以进行性能测试</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td><strong>-h</strong></td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>2</td><td><strong>-p</strong></td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td><strong>-s</strong></td><td>指定服务器 socket</td><td></td></tr><tr><td>4</td><td><strong>-c</strong></td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td><strong>-n</strong></td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td><strong>-d</strong></td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td>7</td><td><strong>-k</strong></td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td>8</td><td><strong>-r</strong></td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td>9</td><td><strong>-P</strong></td><td>通过管道传输 <numreq> 请求</numreq></td><td>1</td></tr><tr><td>10</td><td><strong>-q</strong></td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td>11</td><td><strong>–csv</strong></td><td>以 CSV 格式输出</td><td></td></tr><tr><td>12</td><td><strong>-l</strong></td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td><strong>-t</strong></td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>14</td><td><strong>-I</strong></td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> -t <span class="keyword">set</span>,lpush -n <span class="number">10000</span> -q</span><br></pre></td></tr></table></figure><p>默认有16个数据库 可以使用select n 进行切换</p><p>清空当前数据库：flushdb</p><p>清空所有数据库：flushall</p><p>查看所有key：keys * </p><p>判断key是否存在：exists name</p><p>设置过期时间 单位秒：expire name n</p><p>查看key的剩余时间：ttl name</p><p>查看key的类型：type name</p><p>移动key到其他数据库：move name n</p><p>删除key：del name</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>数字和字符串都用String存储</p><p>append：追加字符串 没有的话新建一个</p><p>strlen：获取字符串长度</p><p>incr：自增 第二个参数可以指定步长 incr views 10</p><p>decr：自减 第二个参数可以指定步长</p><p>getrange：getrange name 0 3  如果最后一个参数是-1则获取整个字符串</p><p>setrange: setrange name 0 xx  | abcde-&gt;xxcde</p><p>setex：为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。setex name 10 bob</p><p>setnx：如果不存在才创建 setnx name bob </p><p>mget：批量获取值 mget k1 k2</p><p>mset：批量设置值 mset k1 v1 k2 v2</p><p>msetnx：原子性的 要么批量成功要么批量失败</p><p>设置对象：</p><pre><code>1. set user:1 &#123;name:zhangdan,age:3&#125; 获取：get user:12. set user:1 &#123;name:zhangdan,age:3&#125;  获取：get user:1:name</code></pre><p>getset：返回旧值 设置新值 getset name bob</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>lpush(头插法)：从左端放入对应的是rpush(尾插法)</p><p>lrange：获取指定范围 如果最后一个参数是-1则获取全部</p><p>Lpop：移除头部元素 对应的是rpop</p><p>lindex：获取下标对应的元素</p><p>llen：返回列表长度</p><p>lrem：移除指定的值 第二个参数是移除的数量 lrm list 1 one 从头部开始移除</p><p>ltrim： ltrim list 0 3 只留下 下标0-3的元素</p><p>rpoplpush：rpoplpush list mylist  把list最右边的元素移除并添加到mylist中</p><p>lset：lset list [index] [new_value] 将指定下标的值替换为另一个</p><p>linsert：linsert list after/before “two” “world” 往two后面/前面插入world</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set中的值不能重复</p><p>sadd： 添加元素</p><p>smembers：查看集合中的元素</p><p>sismember：查看集合中是否有某个元素</p><p>scard：获取集合中的元素个数</p><p>srem：移除指定元素</p><p>srandmember：随机获取n个元素</p><p>spop：随机删除元素</p><p>smove：smove set1 set2 value1将指定值移动到另一个集合</p><p>sdiff：sdiff set1 set2查看set1中哪些元素set2中没有</p><p>sinter：两个集合的交集</p><p>sunion：两个集合的并集</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>存放的key是一个map</p><p>hset和hget：设置 获取元素 也有hmset和hmget</p><p>hdel：删除</p><p>hgetall：获取所有键值对</p><p>hlen：获取键值对数量</p><p>hkeys：只获取所有key</p><p>hvals：只获取所有value</p><p>hincrby ：hincrby hash age 5 </p><p>hsetnx</p><h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>是set的有序版本</p><p>zset：zset myset 1 bob </p><p>zrange</p><p>zrangebyscore：第二个和第三个参数指定范围 降序是zrevrangebyscore</p><p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202093438696.png" alt="image-20201202093438696"></p><p>zrem ：移除元素</p><p>zcard：获取有序集合中的个数</p><p>zcount：获取指定区间的成员数量</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>不保证原子性：Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><p>没有隔离级别的概念</p><p>开启事务：multi</p><p>执行事务：exec</p><p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202100249565.png" alt="image-20201202100249565"></p><p>discard：取消事务 事务队列中的命令都不会被执行</p><p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202100555522.png" alt="image-20201202100555522"></p><p>如果事务中出现编译型异常(代码有问题或者命令出错) 所有命令都不会执行 ，如果事务中出现运行时异常(get不存在的值) 其他命令可以正常执行</p><p><strong>redis实现乐观锁</strong></p><p>watch：监视一个元素 如果事务中有其他线程修改这个值 则事务执行失败 失败后可以使用unwatch取消监视 再次watch并开始事务</p><p>unwatch：取消所有的监视    </p><p>通过</p><h1 id="操作redis"><a href="#操作redis" class="headerlink" title="操作redis"></a>操作redis</h1><h2 id="通过jedis操作redis"><a href="#通过jedis操作redis" class="headerlink" title="通过jedis操作redis"></a>通过jedis操作redis</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.52.131&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;bob&quot;</span>);</span><br><span class="line">            multi.set(<span class="string">&quot;value2&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">            multi.get(<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            multi.discard();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;value2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h2><p>引入依赖：spring-boot-starter-data-redis</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202104116611.png" alt="image-20201202104116611"></p><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">      RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">      template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">      StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">      template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Database index used by the connection factory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> database = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Connection URL. Overrides host, port, and password. User is ignored. Example:</span></span><br><span class="line"><span class="comment">    * redis://user:password@example.com:6379</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Redis server host.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String host = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Login password of the redis server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Redis server port.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Whether to enable SSL support.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> ssl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Connection timeout.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Duration timeout;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Client name to be set on connections with CLIENT SETNAME.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String clientName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Sentinel sentinel;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Cluster cluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushAll();</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">    String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义RedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//配置具体的序列化方式</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><p>daemonize yes ：以守护进程的方式运行 默认是no 需要自己开启</p><p>pidfile /var/run/redis_6379.pid：如果以后台方式运行 需要制定pid文件</p><p>save 120 1：表示如果120s内至少有一条数据改动 则进行持久化</p><p>stop-writes-on-bgsave-error yes：持久化失败后 是否继续工作</p><p>rdbcompression yes：是否压缩rdb文件，需要消耗一些cpu资源</p><p>rdbchechsum yes：保存rdb文件的时候 进行错误的校验</p><p>dir ./：文件的保存目录 </p><p>maxclients：设置能连接上redis的最大客户端数</p><p>maxmemory：配置最大的内存容量</p><p>aof配置</p><p>​    appendonly  no ：默认不开启</p><p>​    appendfilename：持久化的文件名</p><p>​    appendfsync everysec：每秒执行 一次 同步 这1s可能会丢失数据</p><h1 id="持久化之RDB操作"><a href="#持久化之RDB操作" class="headerlink" title="持久化之RDB操作"></a>持久化之RDB操作</h1><p>流程：</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202233309973.png" alt="image-20201202233309973"></p><p>在指定时间间隔内将内存中的数据集快照写入磁盘，恢复时将快照文件直接读到内存中</p><p>Redis会单独创建 ( fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>触发机制：默认生成dump.rdb文件</p><ul><li>save的规则 满足的情况下 会自动触发rdb规则</li><li>执行flushdb命令时 会触发</li><li>退出redis 也会触发</li></ul><p>只需要将rdb文件放入到redis启动目录就行 redis启动的时候自动检查dump.rdb并回复其中的数据</p><p>通过命令 config get dir查看启动目录</p><h1 id="持久化之AOF操作"><a href="#持久化之AOF操作" class="headerlink" title="持久化之AOF操作"></a>持久化之AOF操作</h1><p>流程：</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202234131430.png" alt="image-20201202234131430"></p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>Aof保存的是appendonely.aof文件 </p><p>默认是不开启的 需要手动开启</p><p>如果aof文件被修改 就会启动失败 可以进行修复redis-check-aof –fix appendonly.aof</p><p>优点</p><ul><li>每一个修改都会同步，文件完整性会更好</li><li>每秒同步一次，可能会丢失一秒的数据</li></ul><p>缺点</p><ul><li>aof数据文件远大于rdb 修复数据较慢</li><li>aof运行速率较慢</li></ul><p>如果aof大小超过了默认配置，会fork一个新的线程来将我们的文件进行重写，这里重写是为了将aof文件变得更小，降低文件占用空间，以便更快的被redis加载</p><p><strong>同时开启两种持久化方式</strong></p><ul><li>·在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢?作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul><p><strong>性能建议</strong></p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 9001这条规则。</li><li>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite的最后将 rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF，仅靠Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave 中的RDB文件，载入较新的那个，微博就是这种架构。</li></ul><h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p><strong>流程</strong></p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203001310583.png" alt="image-20201203001310583"></p><p><strong>命令</strong></p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203001635483.png" alt="image-20201203001635483"></p><p><strong>测试</strong>：创建两个redis连接 一个订阅subscribe diantai 一个推送消息publish diantai hello </p><p><strong>底层实现</strong></p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203002602416.png" alt="image-20201203002602416"></p><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>数据的复制是单向的 只能从主机复制到从机 主节点可以有多个从节点 一个从节点只能由一个主节点</p><p>设置主人：slaveof ip port  (建议在配置文件中进行配置)  查看信息：info replication</p><p>从机不能写 只能读 主机中的信息和数据会自动保存到从机中</p><p><strong>复制原理</strong></p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203083755766.png" alt="image-20201203083755766"></p><p><strong>哨兵模式</strong></p><p>哨兵是一个独立的进程 ，作为进程 他会独立运行，其原理是哨兵通过发送命令，等待redis服务器响应，从而监控运行的多个redis实例</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203084635501.png" alt="image-20201203084635501"></p><p>当哨兵监控到master宕机 会自动将slave切换成master 然后通过发布订阅通知通知其他从服务器 修改配置文件 让他们切换主机</p><p>一个哨兵可能会出现问题 使用多个哨兵进行监控</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203084841536.png" alt="image-20201203084841536"></p><p>主观下线和客观下线</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203090416317.png" alt="image-20201203090416317"></p><p>配置哨兵配置文件sentinel.conf</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor myredis<span class="built_in"> ip port </span>1 #最后一个参数 是否进行重新投票</span><br></pre></td></tr></table></figure><p>启动哨兵：redis-sentinel /config/sentinel.conf</p><p>当主机宕机的时候 会自动挑选一个从机作为主机 宕机的主机修复后成为从机</p><h1 id="缓存穿透和雪崩"><a href="#缓存穿透和雪崩" class="headerlink" title="缓存穿透和雪崩"></a>缓存穿透和雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h2><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀!），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><p><strong>解决方法</strong></p><p><strong>布隆过滤器</strong>：是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合就舍弃，从而避免了对底层存储系统的查询压力</p><p><strong>缓存空对象</strong>：当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p><p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203094734020.png" alt="image-20201203094734020"></p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h2><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><p><strong>解决方案</strong></p><p>设置热点数据永不过期</p><p>加互斥锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h2><p>缓存雪崩是指在某一时间段，缓存集中过期失效，redis宕机</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><strong>解决方案</strong></p><p>高可用：搭建集群</p><p>限流降级：缓存失效后，通过加锁或队列来控制数据库写缓存的线程数量</p><p>数据预热：数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
    
    
    <summary type="html">Redis，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>牛客网练习题笔记</title>
    <link href="http://example.com/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-23T15:16:32.000Z</published>
    <updated>2021-02-03T13:48:39.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="希尔排序是不是一种稳定的排序方法？"><a href="#希尔排序是不是一种稳定的排序方法？" class="headerlink" title="希尔排序是不是一种稳定的排序方法？"></a>希尔排序是不是一种稳定的排序方法？</h2><p>答：由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p><p><a href="https://www.cnblogs.com/chengxiao/p/6104371.html">图解算法之希尔排序</a></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><a href="https://blog.csdn.net/qq_34840129/article/details/80619761?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">前中后序遍历</a></p><ul><li><p>前序遍历：根左右</p></li><li><p>中序遍历：左根右</p></li><li><p>后序遍历：左右根</p></li></ul><p><a href="https://blog.csdn.net/adminabcd/article/details/46672759?utm_medium=distribute.pc_relevant_t0.none-task-blog-searchFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-searchFromBaidu-1.control">n个节点的二叉树有多少种形态</a></p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><a href="https://baijiahao.baidu.com/s?id=1618548971082312617&wfr=spider&for=pc">关于IP地址、网络地址、子网掩码、广播地址的理解</a></p><p><a href="https://blog.csdn.net/u014465934/article/details/81146443">子网掩码、网络地址、广播地址的计算</a></p><p>面试问题</p><ul><li><a href="https://blog.csdn.net/weixin_41910694/article/details/91960815">https://blog.csdn.net/weixin_41910694/article/details/91960815</a></li><li><a href="https://blog.csdn.net/qq_39322743/article/details/79700863">https://blog.csdn.net/qq_39322743/article/details/79700863</a></li></ul><p>RIP基础知识</p><ul><li><a href="https://cshihong.blog.csdn.net/article/details/80503512?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control">https://cshihong.blog.csdn.net/article/details/80503512?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control</a></li><li><a href="https://bingw.blog.csdn.net/article/details/53346473?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">https://bingw.blog.csdn.net/article/details/53346473?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control</a></li></ul><p>CRC校验原理</p><ul><li><a href="https://blog.csdn.net/qiaobt/article/details/81661345">https://blog.csdn.net/qiaobt/article/details/81661345</a></li></ul><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><a href="https://blog.csdn.net/starlh35/article/details/76445267?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control">并发操作会带来哪些数据不一致性</a>:<strong>丢失的修改、不可重复读、读脏数据、幻影读</strong>（幻影读在一些资料中往往与不可重复读归为一类）。</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>问：写个的sql查询语句，如有一张表示英语口语练习每个学员的学时的表a，字段有 studentid(学号) name(可重复) grade(年级) hours（学时），找出那些学时高于他们同一年级的平均学时的学生。</p><p>答：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">table</span>  a <span class="keyword">left</span>  <span class="keyword">join</span>  (<span class="keyword">SELECT</span> grade,<span class="keyword">AVG</span>(<span class="keyword">hours</span>) <span class="keyword">as</span> <span class="keyword">hours</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade) <span class="keyword">as</span> b <span class="keyword">on</span> a.grade=b.grade <span class="keyword">where</span>   a.hours&gt;b.hours <span class="keyword">AND</span> a.grade=b.grade</span><br></pre></td></tr></table></figure><p>问：<a href="https://blog.csdn.net/qq_35571554/article/details/82796278">说下你对索引的理解，以及数据库索引的数据结构，为什么会被设计为b树或者B+树</a></p><p>答：索引用于提升数据库的查找速度。 主要从树的高度、降低磁盘io两方面展开</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;I’m BaseClass class&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;static BaseClass&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;I’m Base class&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;static Base&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">new</span> Base();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><p>执行顺序为：父类静态代码块 -&gt;子类静态代码块 -&gt;父类非静态代码块 -&gt; 父类构造函数 -&gt; 子类非静态代码块 -&gt; 子类构造函数。</p><ol start="2"><li>对象空间被收集掉之后，会执行该对象的finalize方法(×)：一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用其finalize()方法， 并且在<strong>下一次</strong>垃圾回收动作发生时，才会<strong>真正的</strong>回收对象占用的内存</li></ol><ol start="3"><li><strong>包的作用</strong></li></ol><ul><li>1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ul><p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。</p><ol start="4"><li>java中 %是取余运算最后符号和第1个值一样</li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228162626849.png" alt="image-20201228162626849"></li></ol><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228162636766.png" alt="image-20201228162636766"></p><ol start="6"><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163509069.png" alt="image-20201228163509069"></li></ol><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163617276.png" alt="image-20201228163617276"></p><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163529004.png" alt="image-20201228163529004"></p><ol start="7"><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163800403.png" alt="image-20201228163800403"></li></ol><p>我们在执行URL u =new URL(“<a href="http://www.123.com/">http://www.123.com</a>“);这句话的时候确实要抛出异常，但是这个异常属于IOException，不管网址是否存在，最后都会返回该网址的一个连接，打印出来就是该网址。</p><ol start="8"><li><a href="https://blog.csdn.net/liangyihuai/article/details/83106584">CyclicBarrier和CountDownLatch都可以让一组线程等待其他线程。前者是让一组线程相互等待到某一个状态再执行。后者是一个线程等待其他线程结束再执行。</a></li></ol><p><strong>Callable中的call比Runnable中的run厉害就厉害在有返回值和可以抛出异常。同时这个返回值和线程池一起用的时候可以返回一个异步对象Future。</strong></p><ol start="9"><li><p>java8中，忽略内部接口的情况，不能用来修饰interface里的方法的修饰符有:private , protected</p></li><li><p>抽象方法只可以被public 和 protected修饰；</p></li><li><p>重载与方法的返回值类型与访问权限无关</p></li><li><p>线程私有：虚拟机栈，程序计数器，本地方法栈  共享:java堆，方法区</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164700773.png" alt="image-20201228164700773"></p></li></ol><ul><li>声明的时候不能指定大小</li></ul><ol start="14"><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164913519.png" alt="image-20201228164913519"></li></ol><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164946718.png" alt="image-20201228164946718"></p><ol start="15"><li><p>java运算符优先级：<a href="http://c.biancheng.net/view/794.html">http://c.biancheng.net/view/794.html</a></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105170242902.png" alt="image-20210105170242902"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105170252150.png" alt="image-20210105170252150"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171431976.png" alt="image-20210105171431976"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171440894.png" alt="image-20210105171440894"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171937623.png" alt="image-20210105171937623"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105172313366.png" alt="image-20210105172313366"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105172515143.png" alt="image-20210105172515143"></p><ol><li><pre><code class="java">public static void main(String[] args) &#123;    String str = &quot;12,3&quot;;    String str2 = &quot;123&quot;;    System.out.print(str.split(&quot;,&quot;).length);//2    //String split 这个方法默认返回一个数组，如果没有找到分隔符，会把整个字符串当成一个长度为1的字符串数组返回到结果    System.out.print(str2.split(&quot;,&quot;).length);//2&#125;</code></pre></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173044278.png" alt="image-20210105173044278"></p><ol><li>注意equal和==的区别</li></ol></li><li><p>接口中的属性默认是private static final</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173343910.png" alt="image-20210105173343910"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173635738.png" alt="image-20210105173635738"></p><ol><li>数组元素在内存中是一个接着一个线性存放的，通过第一个元素就能访问随后的元素，避免了数据覆盖的可能性，和数据类型覆盖并没有关系。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173752455.png" alt="image-20210105173752455"></p><ol><li><p>这类多态问题中，无论向上或向下转型，都记住一句话就可以了。</p><p><strong>编译看左边，运行看右边。</strong>意思编译时候，看左边有没有该方法，运行的时候结果看 <strong>new</strong> 的对象是谁，就调用的谁。</p></li></ol></li><li><p>单例模式中，两个基本要点是:构造函数私有,唯一实例</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174349947.png" alt="image-20210105174349947"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174358254.png" alt="image-20210105174358254"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174542394.png" alt="image-20210105174542394"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174601119.png" alt="image-20210105174601119"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174723561.png" alt="image-20210105174723561"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211441331.png" alt="image-20210106211441331"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211458214.png" alt="image-20210106211458214"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211835788.png" alt="image-20210106211835788"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211852176.png" alt="image-20210106211852176"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106212423016.png" alt="image-20210106212423016"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106212429344.png" alt="image-20210106212429344"></li><li>A B D是并发编程的锁机制相关，Future是一个线程任务的返回结果的‘欠条’。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213047691.png" alt="image-20210106213047691"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213058066.png" alt="image-20210106213058066"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213443483.png" alt="image-20210106213443483"></p><ol><li>second中v.i = <code>20</code>;已经改变v指向的对象中的值 所以first最后一行打印的应该是20</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214233706.png" alt="image-20210106214233706"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214323629.png" alt="image-20210106214323629"></li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214330068.png" alt="image-20210106214330068"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214433699.png" alt="image-20210106214433699"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214444017.png" alt="image-20210106214444017"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214547104.png" alt="image-20210106214547104"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214552994.png" alt="image-20210106214552994"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214614323.png" alt="image-20210106214614323"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171020455.png" alt="image-20210107171020455"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171509591.png" alt="image-20210107171509591"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171510385.png" alt="image-20210107171510385">z<img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171513513.png" alt="image-20210107171513513"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107172001632.png" alt="image-20210107172001632"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107172012758.png" alt="image-20210107172012758"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107174912026.png" alt="image-20210107174912026"></p><ol><li>Square没有重写equal方法 判断的还是两个引用是否相等</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107175344971.png" alt="image-20210107175344971"></p><ol><li>接口方法默认是public abstract的，且实现该接口的类中对应的方法的可见性不能小于接口方法的可见性，因此也只能是public的。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180458042.png" alt="image-20210107180458042"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180503469.png" alt="image-20210107180503469"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180943624.png" alt="image-20210107180943624"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180950765.png" alt="image-20210107180950765"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184059579.png" alt="image-20210107184059579"></p><ol><li>（1）是一个普通方法</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184205583.png" alt="image-20210107184205583"></p><ol><li>Java中静态变量只能在类主体中定义，不能在方法中定义。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184306702.png" alt="image-20210107184306702"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107194106028.png" alt="image-20210107194106028"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107194132761.png" alt="image-20210107194132761"></li></ol></li><li><p>正则表达式的学习</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107202231599.png" alt="image-20210107202231599"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107202501184.png" alt="image-20210107202501184"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109175818399.png" alt="image-20210109175818399"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109175910347.png" alt="image-20210109175910347"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180045460.png" alt="image-20210109180045460"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180301821.png" alt="image-20210109180301821"></p><ol><li>子类可以不是abstract</li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180518044.png" alt="image-20210109180518044"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180552071.png" alt="image-20210109180552071"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180557485.png" alt="image-20210109180557485"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180719868.png" alt="image-20210109180719868"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181346678.png" alt="image-20210109181346678"></p><ol><li>读取路径是request做的</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181704154.png" alt="image-20210109181704154"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181727290.png" alt="image-20210109181727290"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182209631.png" alt="image-20210109182209631"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182215903.png" alt="image-20210109182215903"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182505921.png" alt="image-20210109182505921"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182834824.png" alt="image-20210109182834824"></p><ol><li><img src="file://D:/log/source/_posts/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/image-20210109182834824.png?lastModify=1610188297" alt="image-20210109182834824"><ol><li>实例变量是在类声明的内部但是在类的其他成员方法之外声明的</li><li>类的成员变量包括实例变量和类变量（静态变量）,成员方法包括实例方法和类方法（静态方法）</li></ol></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109183322635.png" alt="image-20210109183322635"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109183337878.png" alt="image-20210109183337878"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110184406346.png" alt="image-20210110184406346"></p><ol><li>A、abstract修饰的类，不可实例化，所以需要子类去继承，然后重写其中的抽象方法。但是final修饰类是不可继承的。两者属性相冲。</li><li>D、static不可以修饰非static的属性，因为类加载的时候，static属性比非static先初始化，那么一个存在的总不能访问一个没有存在的吧。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185014750.png" alt="image-20210110185014750"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185023277.png" alt="image-20210110185023277"></li></ol></li><li><p>重载和重写的区别</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185211470.png" alt="image-20210110185211470"></p><ol><li>服务器就创建了一个application</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185442964.png" alt="image-20210110185442964"></p><ol><li>java的赋值运算有返回值 赋什么值就返回什么值</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110190014730.png" alt="image-20210110190014730"></p><ol><li>子类可以继承父类的全部数据域和方法，但是这里继承代表的是“拥有”，即：只是拥有父类的全部数据域和方法，但不具备对某些私有数据域或私有方法的使用权（调用）。</li></ol></li><li><p>实现多线程的方法：继承Thread类 实现Runnable接口 实现Callable接口</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110190522958.png" alt="image-20210110190522958"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110191027017.png" alt="image-20210110191027017"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110191154675.png" alt="image-20210110191154675"></p><ol><li><img src="https://uploadfiles.nowcoder.com/images/20180701/3807435_1530425536125_D49BCBCCF82CF58C566E12F1E3130070" alt="img"></li></ol></li><li><p>session中存储属性：session.setAttribute(“key”，”value”)</p></li><li><p>Sting,StringBuilder,StringBuffer</p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115165852224.png" alt="image-20210115165852224"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170023661.png" alt="image-20210115170023661"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170037923.png" alt="image-20210115170037923"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170304923.png" alt="image-20210115170304923"></p><ol><li>因为String是被final修饰的类，所以本身的内容是不会改变的，相当于基本数据类型的值传递，在changge方法中给str赋值了“test”，相当于重新创建了一个string类型的变量</li><li>注意String str = “test”; 和 String str = new String(“test”);的区别</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115171538415.png" alt="image-20210115171538415"></p><ol><li><strong>如果try，finally语句里均有return，忽略try的return，而使用finally的return.</strong></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172030479.png" alt="image-20210115172030479"></p><ol><li>java object默认的基本方法中没有copy()，含有如下方法：getClass(), hashCode(), equals(), clone(), toString(), notify(), notifyAll(), wait(), finalize()</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172236655.png" alt="image-20210115172236655"></p><ol><li>导入java.util.*不能读取其子目录的类，因为如果java.util里面有个a类，java.util.regex里面也有个a类，我们若是要调用a类的方法或属性时，应该使用哪个a类呢。所以也应该选C</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172352568.png" alt="image-20210115172352568"></p><ol><li><p>首先 super.getClass() 是父类的getClass（）方法，其父类是Date，它的getClass（）方法是继承自Object类而且没有重写，</p><p>所以就是调用<strong>object的getClass（）方法。而看一下getclass的方法解释如下图</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20160722/579609_1469158660593_072774B6B658B3603E1AA7198722775C"></p><p><strong>所以可以知道是返回当前运行时的类。</strong></p></li><li><p>在调用getName()方法而getName()是：包名+类名**</p></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172522217.png" alt="image-20210115172522217"></p><ol><li>web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如JAVA中的Tomcat容器，ASP的IIS或PWS都是这样的容器。一个服务器可以多个容器。</li><li>servlet是运行在服务器端的小应用程序，是接收网络服务的请求和产生响应的一种方式。servlet的功能：接受http请求，产生动态http响应。</li></ol></li><li><p>true flase null不是关键字</p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172819184.png" alt="image-20210115172819184"></p><ol><li><p>Jsp只会在客户端第一次发请求的时候被编译，之后的请求不会再编译，同时tomcat能自动检测jsp变更与否，变更则再进行编译。</p><p>第一次编译并初始化时调用： init() ；销毁调用： destroy() 。在整个jsp生命周期中均只调用一次。 </p><p>service()方法是接收请求，返回响应的方法。每次请求都执行一次，该方法被HttpServlet封装为doGet和doPost方法</p></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172950347.png" alt="image-20210115172950347"></p><ol><li>ab相同 cd相同</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115173104765.png" alt="image-20210115173104765"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115173119227.png" alt="image-20210115173119227"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162100847.png" alt="image-20210116162100847"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162408021.png" alt="image-20210116162408021"></p><ol><li>不能有两个public类 子类不能访问父类的私有变量</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162521133.png" alt="image-20210116162521133"></p><ol><li>EOFException：当输入过程中意外到达文件或流的末尾时，抛出此异常。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163034404.png" alt="image-20210116163034404"></p><ol><li>枚举类有三个实例，故调用三次构造方法，打印三次It is a account type</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163256251.png" alt="image-20210116163256251"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163328489.png" alt="image-20210116163328489"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161309975.png" alt="image-20210117161309975"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117160613840.png" alt="image-20210117160613840"></p><ol><li><p><strong>（1）从速度上看：System.arraycopy &gt; clone &gt; Arrays.copyOf &gt; for</strong><br><strong>（2）for的速度之所以最慢是因为下标表示法每次都从起点开始寻位到指定下标处（现代编译器应该对其有进行优化，改为指针），另外就是它每一次循环都要判断一次是否达到数组最大长度和进行一次额外的记录下标值的加法运算。</strong> </p><p>（3）System.arraycopy:native方法+jvm手写函数 在jvm中预写好速度最快</p><p>（4）clone:native方法但并未手写 需要jni转换 速度其次</p><p><strong>（5）查看Arrays.copyOf的源码可以发现，它其实本质上是调用了System.arraycopy。之所以时间差距比较大，是因为很大一部分开销全花在了Math.min函数上了。</strong></p></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161051627.png" alt="image-20210117161051627"></p><ol><li><strong>由于replaceAll方法的第一个参数是一个正则表达式，而”.”在正则表达式中表示任何字符，所以会把前面字符串的所有字符都替换成”/“。如果想替换的只是”.”，那么久要写成”\.”</strong></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161540388.png" alt="image-20210117161540388"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161724389.png" alt="image-20210117161724389"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162000840.png" alt="image-20210117162000840"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162008056.png" alt="image-20210117162008056"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162150331.png" alt="image-20210117162150331"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162201796.png" alt="image-20210117162201796"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162552290.png" alt="image-20210117162552290"></p><ol><li><p>主要考核了这几个知识点：</p><p>1.静态内部类才可以声明静态方法</p><p>2.静态方法不可以使用非静态变量</p><p>3.抽象方法不可以有函数体 </p></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162446809.png" alt="image-20210122162446809"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162647241.png" alt="image-20210122162647241"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162653784.png" alt="image-20210122162653784"></li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162702612.png" alt="image-20210122162702612"></li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162709782.png" alt="image-20210122162709782"></li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162716157.png" alt="image-20210122162716157"></li><li>只有A可以指定字符集、</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162912805.png" alt="image-20210122162912805"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162922723.png" alt="image-20210122162922723"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163014350.png" alt="image-20210122163014350"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163035993.png" alt="image-20210122163035993"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163405991.png" alt="image-20210122163405991"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163427923.png" alt="image-20210122163427923"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163637223.png" alt="image-20210122163637223"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163642864.png" alt="image-20210122163642864"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163758860.png" alt="image-20210122163758860"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163810456.png" alt="image-20210122163810456"></li></ol></li><li><p>重载与重写：<a href="https://blog.csdn.net/wintershii/article/details/80558739">https://blog.csdn.net/wintershii/article/details/80558739</a></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122164017658.png" alt="image-20210122164017658"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123124816263.png" alt="image-20210123124816263"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123124930710.png" alt="image-20210123124930710"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125045033.png" alt="image-20210123125045033"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125057445.png" alt="image-20210123125057445"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125247316.png" alt="image-20210123125247316"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125319422.png" alt="image-20210123125319422"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125346966.png" alt="image-20210123125346966"></p><ol><li>运行异常，可以通过java虚拟机来自行处理。非运行异常，我们应该捕获或者抛出</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125435657.png" alt="image-20210123125435657"></p><ol><li>length得到的是字符，不是字节。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125624618.png" alt="image-20210123125624618"></p><ol><li>request.getAttribute()方法返回request范围内存在的对象，而request.getParameter()方法是获取http提交过来的数据。</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125952795.png" alt="image-20210123125952795"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130011892.png" alt="image-20210123130011892"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130033328.png" alt="image-20210123130033328"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130135614.png" alt="image-20210123130135614"></li><li>java是自动管理内存的，通常情况下程序运行到稳定状态，内存大小也达到一个 基本稳定的值但是内存泄露导致Gc不能回收泄露的垃圾，内存不断变大.最终超出内存界限，抛出OutOfMemoryExpection</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130334531.png" alt="image-20210123130334531"></p><ol><li>分母为0 为运行时异常，jvm帮我们捕获，无需代码里面显式捕获</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130740493.png" alt="image-20210123130740493"></p><ol><li>A：方法抛出异常是throws B：throw用于抛出异常 C也是错的</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130914569.png" alt="image-20210123130914569"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131316466.png" alt="image-20210123131316466"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131326280.png" alt="image-20210123131326280"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131427089.png" alt="image-20210123131427089"></p><ol><li>字符流和字节流每次读入的字节数是不确定的，可能相同也可能不相同；字符流和字节流都有缓冲流</li><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131506629.png" alt="image-20210123131506629"></li></ol></li><li><p>IO流关系图</p><ol><li><img src="http://uploadfiles.nowcoder.com/images/20150328/138512_1427527478646_1.png" alt="img"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185021408.png" alt="image-20210128185021408"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185249478.png" alt="image-20210128185249478"></p><ol><li>​    既然求最小整数，那肯定先想到负数，则最高位（符号位）一定为1，原码中肯定是1所在的位数越高，值越小，而补码是由原码取反加1得到的，则在补码中1所在的位数一定要越低，即补码为1000 0011；由补码求得原码：1111 1101=-(64+32+16+8+4+1)=-125;</li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185532442.png" alt="image-20210128185532442"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185546647.png" alt="image-20210128185546647"></li></ol></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185714149.png" alt="image-20210128185714149"></p></li><li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185825903.png" alt="image-20210128185825903"></p><ol><li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185832411.png" alt="image-20210128185832411"></li></ol></li><li></li></ol>]]></content>
    
    
    <summary type="html">记录在牛客刷题过程中的错题和解题过程以及相关知识点整理</summary>
    
    
    
    <category term="错题本" scheme="http://example.com/categories/%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://example.com/2020/11/23/MongoDB/"/>
    <id>http://example.com/2020/11/23/MongoDB/</id>
    <published>2020-11-23T10:31:16.000Z</published>
    <updated>2021-02-03T13:44:30.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在linux上安装</p><p>在mongodb/bin目录下执行./mongod  -f  mongodb.conf</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>数据库：存放集合的仓库</p><p>集合：类似于数组 存放文档</p><p>文档：文档是数据库中最小的单位</p><p>数据库和集合不需要手动创建 当创建的文档所在的集合或数据库不存在会自动创建（在第一次往里插入文档的时候创建）</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>show dbs：显示当前所有数据库</p><p>use 数据库名：进入到指定数据库中</p><p>db：显示当前所在的数据库</p><p>show collections：显示数据库的所有集合</p><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><p>insert：同时插入多条或一条数据（如果插入一条去掉[]）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.students.insert([</span><br><span class="line">&#123;<span class="attr">name:</span><span class="string">&quot;bob&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name:</span><span class="string">&quot;jack&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name:</span><span class="string">&quot;rose&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name:</span><span class="string">&quot;tom&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li>自动生成一个字段_id该字段由ObjectId()生成 可以自己指定</li></ul><p>insertOne：插入一条数据</p><p>insertMany：插入多条数据</p><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>find:查询集合所有文档 可以接收一个文档作为条件参数                  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>(&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>findOne：查询集合中符合条件的第一个文档 返回的是一个文档替换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.findOne</span>(&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;)<span class="selector-class">.name</span></span><br></pre></td></tr></table></figure><p>count和length</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.count</span>()</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.length</span>()</span><br></pre></td></tr></table></figure><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><p>update:第一个参数为查询条件 第二个参数为新替换  默认情况下会使用新替换替换旧替换 如果想只替换指定的属性 需要使用修改操作符$set</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;,</span><br><span class="line">&#123;$<span class="attribute">set</span>:&#123;</span><br><span class="line"><span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>,</span><br><span class="line"><span class="attribute">age</span>:<span class="number">121</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>$unset可以删除指定属性</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">&#123;<span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>&#125;,</span><br><span class="line">&#123;$<span class="attribute">unset</span>:&#123;</span><br><span class="line"><span class="attribute">age</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>updateOne:删除第一个符合条件的文档</p><p>updateMany:删除所有符合条件的文档</p><p>update默认是只修改一个 如果想修改多个 需要增加属性</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;,</span><br><span class="line">&#123;$<span class="attribute">set</span>:&#123;</span><br><span class="line"><span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>,</span><br><span class="line"><span class="attribute">age</span>:<span class="number">121</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">multi</span>:true</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>很少调用删除方法 一般进行逻辑删除</p><p>remove:默认删除所有符合条件的文档 如果有第二个参数且为true则只删除一个 如果传入空参则删除所有文档</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>(&#123;<span class="attribute">age</span>:<span class="number">121</span>&#125;)</span><br></pre></td></tr></table></figure><p>removeOne:删除一个</p><p>removeMany:删除多个</p><p>db.集合名.drop():删除集合</p><p>db.dropDatabase():删除当下的数据库</p><h2 id="sort-投影"><a href="#sort-投影" class="headerlink" title="sort 投影"></a>sort 投影</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:<span class="number">1</span>&#125;) <span class="comment">//升序</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:-<span class="number">1</span>&#125;) <span class="comment">//降序</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:<span class="number">1</span>,<span class="attribute">sal</span>:<span class="number">1</span>&#125;) <span class="comment">//按多个条件进行排序</span></span><br></pre></td></tr></table></figure><p>find可以传入第二个参数设置查询结果的投影(只显示指定的字段)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>(&#123;&#125;,&#123;<span class="attribute">name</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>mongoose是nodeJS提供连接 mongodb的一个库.遵循的是一种, 模板式方法, 能够对你输入的数据进行自动处理</p><p>mongoose提供了几个新的对象</p><ul><li>Schema：定义了约束数据库的文档结构</li><li>Model：表示集合中的所有文档，对应collection</li><li>Document：表示集合中的具体文档</li></ul><p>安装:npm i mongoose –save</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">//链接数据库 如果端口是默认端口可以省略</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://192.168.52.131/test&quot;</span> )</span><br><span class="line"><span class="comment">//监视连接状态 mongoose.connection.once(&quot;open&quot;,function()&#123;&#125;) , mongoose.connection.once(&quot;close&quot;,function()&#123;&#125;)</span></span><br><span class="line">mongoose.connection.once(<span class="string">&quot;open&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库 链接成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//断开数据库</span></span><br><span class="line">mongoose.disconnect()</span><br><span class="line"></span><br><span class="line">mongoose.connection.once(<span class="string">&quot;close&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库 链接断开&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Schema和Model"><a href="#Schema和Model" class="headerlink" title="Schema和Model"></a>Schema和Model</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">//链接数据库 如果端口是默认端口可以省略</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://192.168.52.131/test&quot;</span> )</span><br><span class="line"><span class="comment">//创建schema对象</span></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    gender: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建model:第一个参数是映射的数据库中的集合名,可以将集合名自动变为复数可以是student</span></span><br><span class="line"><span class="keyword">let</span> studentModel = mongoose.model(<span class="string">&quot;students&quot;</span>,studentSchema)</span><br><span class="line"><span class="comment">//操作文档</span></span><br><span class="line">studentModel.create(&#123;<span class="attr">name</span>:<span class="string">&quot;zhao&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">gender</span>:<span class="string">&quot;female&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;插入成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="model的方法"><a href="#model的方法" class="headerlink" title="model的方法"></a>model的方法</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201125235035148.png" alt="image-20201125235035148"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询:docs是查询到的集合 project有两种形式(&quot;name -age&quot;),&#123;name:1,age:0&#125;</span></span><br><span class="line"><span class="comment">//skip是跳过几个文档 limit是显示几个文档</span></span><br><span class="line"><span class="comment">//返回一个docs</span></span><br><span class="line">studentModel.find(&#123;<span class="attr">age</span>:<span class="number">23</span>&#125;,<span class="string">&quot;name age&quot;</span>,&#123;<span class="attr">skip</span>:<span class="number">1</span>,<span class="attr">limit</span>:<span class="number">1</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(docs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">studentModel.find(<span class="string">&quot;5fbe5d6c575e000016001b71&quot;</span>,<span class="string">&quot;name age&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126000554126.png" alt="image-20201126000554126"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">studentModel.updateOne(&#123;<span class="attr">name</span>:<span class="string">&quot;zhao&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">100</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;更新成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126000636656.png" alt="image-20201126000636656"></p><p>查询文档数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">studentModel.count(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="document的方法"><a href="#document的方法" class="headerlink" title="document的方法"></a>document的方法</h2><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126001448733.png" alt="image-20201126001448733"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个document</span></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> studentModel(&#123;</span><br><span class="line">    name:<span class="string">&quot;zhao&quot;</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    gender: <span class="string">&quot;female&quot;</span></span><br><span class="line">&#125;)moku</span><br><span class="line">student.save()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">studentModel.findOne(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="comment">//修改1</span></span><br><span class="line">        doc.update(&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">28</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;修改成功&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//修改2</span></span><br><span class="line">        doc.age = <span class="number">12</span></span><br><span class="line">        doc.save()</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        doc.remove(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接使用doc删除属性是删不掉的 需要用toObject转换成对象 在删除</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">doc</span> = <span class="meta">doc</span>.toObject()</span><br><span class="line">delete <span class="meta">doc</span>.age</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MongoDB笔记</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="http://example.com/2020/11/16/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2020/11/16/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2020-11-16T15:49:37.000Z</published>
    <updated>2021-02-03T13:45:15.172Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_42034205/article/details/90384772">为什么与hashcode &gt;&gt;&gt; 16异或？</a></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = <span class="built_in">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/JustBeauty/article/details/81116144">ParameterizedType详解</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(<span class="built_in">Object</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x instanceof <span class="built_in">Comparable</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; c; <span class="built_in">Type</span>[] ts, <span class="keyword">as</span>; <span class="built_in">Type</span> t; ParameterizedType p;</span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == <span class="built_in">String</span>.<span class="keyword">class</span>) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) instanceof ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     <span class="built_in">Comparable</span>.<span class="keyword">class</span>) &amp;&amp;</span><br><span class="line">                    (<span class="keyword">as</span> = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    <span class="keyword">as</span>.length == <span class="number">1</span> &amp;&amp; <span class="keyword">as</span>[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/loading4/p/6239441.html">返回大于输入参数且最近的2的整数次幂的数</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final <span class="built_in">int</span> tableSizeFor(<span class="built_in">int</span> cap) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = cap - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    return (<span class="built_in">n</span> &lt; <span class="number">0</span>) ? <span class="number">1</span> <span class="symbol">:</span> (<span class="built_in">n</span> &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY <span class="symbol">:</span> <span class="built_in">n</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于为什么最后要+1：<a href="https://www.jianshu.com/p/e33d3fa32091">https://www.jianshu.com/p/e33d3fa32091</a></p><p>以cap = 5为例</p><p><img src="/2020/11/16/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image.png"></p><p>参考：</p><p>​    <a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a></p><p>​    <a href="https://blog.csdn.net/qq_40574571/article/details/97612100">https://blog.csdn.net/qq_40574571/article/details/97612100</a></p>]]></content>
    
    
    <summary type="html">HashMap的一些方法详解和源码分析</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>elasticSearch笔记</title>
    <link href="http://example.com/2020/11/14/elasticSearch%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/14/elasticSearch%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-14T05:01:05.000Z</published>
    <updated>2021-02-03T13:52:41.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h1><p>首先在docker中部署好es和kibana</p><p>在es中添加ik分词器插件:elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.1/e">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.1/e</a></p><p>重启es：docker restart id</p><h1 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><strong>搜索所有字段并排序</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>limit</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 10,</span><br><span class="line">  &quot;size&quot;: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索指定字段： searches the <code>address</code> field to find customers whose addresses contain <code>mill</code> or <code>lane</code></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill lane&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索整个字段而不是词条</strong>：Only matches addresses that contain the phrase <code>mill lane</code></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_phrase&quot;: &#123; &quot;address&quot;: &quot;mill lane&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用bool条件查询</strong>：should,must,must not</p><p>For example, the following request searches the <code>bank</code> index for accounts that belong to customers who are 40 years old, but excludes anyone who lives in Idaho (ID)</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;40&quot; &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;state&quot;: &quot;ID&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>bool查询中也可以使用filter进行筛选</strong></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;balance&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 20000,</span><br><span class="line">            &quot;lte&quot;: 30000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>基本使用</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123; #指定结果名称</span><br><span class="line">      &quot;terms&quot;: &#123; #指定聚合方法</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子聚合</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;average_balance&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在聚合中排序</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;average_balance&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;average_balance&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-Data-ElasticSearch"><a href="#Spring-Data-ElasticSearch" class="headerlink" title="Spring Data ElasticSearch"></a>Spring Data ElasticSearch</h1><p>导入jar包并修改版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot 的版本2.x会报错</p><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.52.131&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="狂神"><a href="#狂神" class="headerlink" title="狂神"></a>狂神</h2><h3 id="关于索引的API操作"><a href="#关于索引的API操作" class="headerlink" title="关于索引的API操作"></a>关于索引的API操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creatIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//索引的创建</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    AcknowledgedResponse delete = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于文档的API操作"><a href="#关于文档的API操作" class="headerlink" title="关于文档的API操作"></a>关于文档的API操作</h3><p>创建一个pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;item&quot;,shards = 1, replicas = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">// 分类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line"><span class="comment">//index默认为ture 如果不想索引该值可以设置为false</span></span><br><span class="line">    <span class="meta">@Field(index = false,type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Double price; <span class="comment">// 价格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> addDocument() throws IOException &#123;</span><br><span class="line">    Good good = <span class="built_in">new</span> Good(<span class="number">1</span>L,&quot;测试商品&quot;,&quot;手机&quot;,&quot;apple&quot;,<span class="number">1000.0</span>);</span><br><span class="line">    IndexRequest request = <span class="built_in">new</span> IndexRequest(&quot;good&quot;);</span><br><span class="line">    request.id(&quot;1&quot;);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    //将我们的数据利用fastjson转换成<span class="type">json</span>并放入请求</span><br><span class="line">    request.source(<span class="type">JSON</span>.toJSONString(good), XContentType.JSON);</span><br><span class="line">    IndexResponse response = restHighLevelClient.<span class="keyword">index</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.toString());</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest request = <span class="built_in">new</span> GetRequest(&quot;good&quot;,&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="keyword">exists</span> = restHighLevelClient.<span class="keyword">exists</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">exists</span>)&#123;</span><br><span class="line">        GetResponse response = restHighLevelClient.<span class="keyword">get</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.getSourceAsString());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">exists</span>);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> deleteDocument() throws IOException &#123;</span><br><span class="line">    DeleteRequest request = <span class="built_in">new</span> DeleteRequest(&quot;good&quot;,&quot;1&quot;);</span><br><span class="line">    DeleteResponse response= restHighLevelClient.<span class="keyword">delete</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量处理数据"><a href="#批量处理数据" class="headerlink" title="批量处理数据"></a>批量处理数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    ArrayList&lt;Good&gt; goods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">1L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">2L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">3L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">4L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">5L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;goods.size();i++)&#123;</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;good&quot;</span>).id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>)).source(JSON.toJSONString(goods.get(i)),XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse response = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.hasFailures());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;测试商品&quot;</span>);</span><br><span class="line"><span class="comment">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span>(SearchHit documentFields:searchResponse.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="黑马"><a href="#黑马" class="headerlink" title="黑马"></a>黑马</h2><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="新增和更新"><a href="#新增和更新" class="headerlink" title="新增和更新"></a>新增和更新</h4><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p><p>我们只需要定义接口，然后继承它就OK了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Good</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增和批量新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Good good = <span class="keyword">new</span> Good(<span class="number">10L</span>, <span class="string">&quot;小米手机7&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3499.00</span>);</span><br><span class="line">    goodRepository.save(good);</span><br><span class="line">    List&lt;Good&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(good);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Good&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Good(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Good(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    goodRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Good&gt; optional = goodRepository.findById(<span class="number">1l</span>);</span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询全部，并按照价格降序排序</span></span><br><span class="line">    Iterable&lt;Good&gt; items = goodRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">&quot;price&quot;</span>));</span><br><span class="line">    items.forEach(good -&gt; System.out.println(good));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h4><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p><p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p><p>当然，方法名称要符合一定的约定：</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByPriceLessThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByPriceGreaterThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByNameEndingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Contains/Containing</code></td><td><code>findByNameContaining</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Near</code></td><td><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td><code>findByAvailableTrue</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>False</code></td><td><code>findByAvailableFalse</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : false&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAvailableTrueOrderByNameDesc</code></td><td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr></tbody></table><p>例如，我们来按照价格区间查询，定义这样的一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据价格区间查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> price1, <span class="keyword">double</span> price2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加一些测试数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">&quot;小米手机7&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3299.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">4L</span>, <span class="string">&quot;小米Mix2S&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">4299.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">5L</span>, <span class="string">&quot;荣耀V10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">2799.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要写实现类，然后我们直接去运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">this</span>.itemRepository.findByPriceBetween(<span class="number">2000.00</span>, <span class="number">3500.00</span>);</span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;item = &quot;</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/11/14/elasticSearch%E7%AC%94%E8%AE%B0/log\source_posts\elasticSearch笔记\1531993518230.png" alt="1531993518230"></p><p>虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。</p><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="基本查询-1"><a href="#基本查询-1" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 词条查询</span></span><br><span class="line">    MatchQueryBuilder queryBuilder = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    Iterable&lt;Good&gt; items = goodRepository.search(queryBuilder);</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>QueryBuilders提供了大量的静态方法，用于生成各种不同类型的查询对象，例如：词条、模糊、通配符等QueryBuilder对象。</p><h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>));</span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Good&gt; items = goodRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;手机&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化分页参数</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page, size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    System.out.println(items.getSize());</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    System.out.println(items.getNumber());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;手机&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">&quot;price&quot;</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聚合-1"><a href="#聚合-1" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;&quot;</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">&quot;brands&quot;</span>).field(<span class="string">&quot;brand&quot;</span>));</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">&quot;brands&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString());</span><br><span class="line">        <span class="comment">// 3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套聚合求平均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;&quot;</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">&quot;brands&quot;</span>).field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.avg(<span class="string">&quot;priceAvg&quot;</span>).field(<span class="string">&quot;price&quot;</span>)) <span class="comment">// 在品牌聚合桶内进行嵌套聚合，求平均值</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">&quot;brands&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString() + <span class="string">&quot;，共&quot;</span> + bucket.getDocCount() + <span class="string">&quot;台&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.6.获取子聚合结果：</span></span><br><span class="line">        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(<span class="string">&quot;priceAvg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均售价：&quot;</span> + avg.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ES的基本使用以及使用spring data操作ES</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>RuoYi</title>
    <link href="http://example.com/2020/11/09/RuoYi/"/>
    <id>http://example.com/2020/11/09/RuoYi/</id>
    <published>2020-11-09T08:40:57.000Z</published>
    <updated>2021-02-03T13:58:47.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h1><h2 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h2><h3 id="initBinder"><a href="#initBinder" class="headerlink" title="initBinder"></a>initBinder</h3><p>@InitBinder:<a href="https://blog.csdn.net/qq_38016931/article/details/82080940">博客1</a>       <a href="https://www.cnblogs.com/lvbinbin2yujie/p/10459303.html">博客2</a></p><h3 id="startPage"><a href="#startPage" class="headerlink" title="startPage"></a>startPage</h3><h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><h3 id="toEnum"><a href="#toEnum" class="headerlink" title="toEnum"></a>toEnum</h3><p>isAssignableFrom:<a href="https://blog.csdn.net/qq_36666651/article/details/81215221">博客</a></p><h3 id="toStr"><a href="#toStr" class="headerlink" title="toStr"></a>toStr</h3><p>ChatSet:<a href="https://blog.csdn.net/qq_36691683/article/details/81608244?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242">博客</a></p><h2 id="ServletUtils"><a href="#ServletUtils" class="headerlink" title="ServletUtils"></a>ServletUtils</h2><h3 id="getRequestAttributes"><a href="#getRequestAttributes" class="headerlink" title="getRequestAttributes"></a>getRequestAttributes</h3><p>RequestContextHolder:<a href="https://blog.csdn.net/asdfsadfasdfsa/article/details/79158459">博客1</a>,<a href="https://www.jianshu.com/p/3a3dc1c9bf4c">博客2</a></p><h3 id="isAjaxRequest"><a href="#isAjaxRequest" class="headerlink" title="isAjaxRequest"></a>isAjaxRequest</h3><p>X-Requested-With:<a href="https://blog.csdn.net/jokeMqc/article/details/78739677">博客</a></p><p>规定uri中有xml和json是异步请求</p><p><img src="/2020/11/09/RuoYi/ruoyi%5Cimage-20201110091906045.png" alt="image-20201110091906045"></p><h2 id="StrFormatter"><a href="#StrFormatter" class="headerlink" title="StrFormatter"></a>StrFormatter</h2><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>只是大概了解了一下 以后仔细研究这个类的原理</p><h2 id="IpUitls"><a href="#IpUitls" class="headerlink" title="IpUitls"></a>IpUitls</h2><h3 id="getIpAddr"><a href="#getIpAddr" class="headerlink" title="getIpAddr"></a>getIpAddr</h3><p>代理http请求获取客户端IP:<a href="https://blog.csdn.net/fengwind1/article/details/51992528">https://blog.csdn.net/fengwind1/article/details/51992528</a></p><h2 id="ExcelUitls"><a href="#ExcelUitls" class="headerlink" title="ExcelUitls"></a>ExcelUitls</h2><h3 id="getCellValue"><a href="#getCellValue" class="headerlink" title="getCellValue"></a>getCellValue</h3><p>判断是否为小数 </p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((<span class="name">Double</span>) val % <span class="number">1</span> &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>使用DecimalFormat可以将数字进行格式化 <a href="https://www.cnblogs.com/Small-sunshine/p/11648652.html">参考博客</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">DecimalFormat(<span class="string">&quot;0&quot;</span>)</span>.format(<span class="keyword">val</span>);</span><br></pre></td></tr></table></figure><h1 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h1>]]></content>
    
    
    <summary type="html">学习若依项目过程中的记录和总结</summary>
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="心得" scheme="http://example.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>Debug</title>
    <link href="http://example.com/2020/11/08/DeBug/"/>
    <id>http://example.com/2020/11/08/DeBug/</id>
    <published>2020-11-08T00:26:54.000Z</published>
    <updated>2020-11-20T02:31:45.003Z</updated>
    
    <content type="html"><![CDATA[<p>centos 7 docker 启动一个web服务的时候 启动报错</p><p>WARNING: IPv4 forwarding is disabled. Networking will not work.</p><p>在宿主机上修改配置文件 <code>/usr/lib/sysctl.d/00-system.conf</code> 追加  <code>net.ipv4.ip_forward=1</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt;<span class="regexp">/usr/</span>lib<span class="regexp">/sysctl.d/</span><span class="number">00</span>-system.conf</span><br></pre></td></tr></table></figure><p>重启network和docker服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart<span class="built_in"> network </span>&amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录日常的一些bug</summary>
    
    
    
    <category term="bug" scheme="http://example.com/categories/bug/"/>
    
    
    <category term="bug" scheme="http://example.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js</title>
    <link href="http://example.com/2020/10/22/Vue-js/"/>
    <id>http://example.com/2020/10/22/Vue-js/</id>
    <published>2020-10-22T12:46:05.000Z</published>
    <updated>2021-02-03T13:56:36.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUE基础"><a href="#VUE基础" class="headerlink" title="VUE基础"></a>VUE基础</h1><h2 id="列表展示"><a href="#列表展示" class="headerlink" title="列表展示"></a>列表展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello vue&#39;,</span><br><span class="line">                names: [&#39;bob&#39;,&#39;jack&#39;,&#39;rose&#39;],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!--        @是v-on的简写 是语法糖--&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;counter--&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                increment: function ()&#123;</span><br><span class="line">                    this.counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue的options"><a href="#Vue的options" class="headerlink" title="Vue的options"></a>Vue的options</h2><p>创建vue实例的时候 传入了一个对象options 包含一下选项</p><ul><li>el:决定之后vue实例管理哪个dom 类型:String|HtmlElement</li><li>data: vue实例对应的数据对象 类型：Object|Function 在组件中必须是函数类型</li><li>methods:定义vue的一些方法 可以在其他地方调用  也可以在指令中使用</li></ul><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/vue%E5%85%A5%E9%97%A8/assets/lifecycle.png?lastModify=1603424928" alt="Vue life cycle"></p><p><strong>钩子函数</strong></p><p>beforeCreated：我们在用Vue时都要进行实例化，因此，该函数就是在Vue实例化时调用，也可以将他理解为初始化函数比较方便一点，在Vue1.0时，这个函数的名字就是init。 </p><p>created：在创建实例之后进行调用。 </p><p>beforeMount：页面加载完成，没有渲染。如：此时页面还是</p><p>mounted：我们可以将他理解为原生js中的window.onload=function({.,.}),或许大家也在用jquery，所以也可以理解为jquery中的$(document).ready(function(){….})，他的功能就是：在dom文档渲染完毕之后将要执行的函数，该函数在Vue1.0版本中名字为compiled。 此时页面中的已被渲染成峰哥</p><p>beforeDestroy：该函数将在销毁实例前进行调用 。</p><p>destroyed：改函数将在销毁实例时进行调用。</p><p>beforeUpdate：组件更新之前。</p><p>updated：组件更新之后。</p><h2 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h2><p>mustache语法也就是双大括号 里面不仅可以直接写变量 也可以写简单的表达式 <code>&#123;&#123;namee * 2&#125;&#125;</code> </p><p>不能在属性值中使用&lt;img src=”“&gt;</p><p>v-once：当修改module中的数据时 view中的数据不会改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--        在console中分别修改两个变量的值 查看是否改变--&gt;</span><br><span class="line">        &lt;h1 v-once&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>v-html:将string中的html解析并渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-html&#x3D;&quot;url&quot;&gt;&#123;&#123;url&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;url&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23,</span><br><span class="line">                url: &#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>v-text:会把标签中的文本内容覆盖掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-text&#x3D;&quot;name&quot;&gt;我即将被覆盖&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure><p>v-pre:标签的内容不会编译解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">页面上直接显示&#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;h2 v-pre&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure><p>v-cloak:有时候页面可能加载过慢 先显示 再显示bob 为了避免这总情况 使用v-cloak vue解析之后v-cloak被删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 v-text&#x3D;&quot;name&quot;&gt;我即将被覆盖&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23,</span><br><span class="line">                url: &#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>动态绑定:为属性绑定model中的数据 可以简写为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;baidu&quot;&gt;跳转到百度&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a :href&#x3D;&quot;baidu&quot;&gt;跳转百度&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                baidu: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>动态绑定class:对象语法</p><p><strong>方法一</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .front &#123;</span><br><span class="line">            font-size:10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .location &#123;</span><br><span class="line">            text-align:center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 class&#x3D;&#39;location&#39; :class&#x3D;&quot;&#123;active:isActive,front:true&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;一条信息&#39;,</span><br><span class="line">                title: &#39;title&#39;,</span><br><span class="line">                active: &#39;active&#39;,</span><br><span class="line">                isActive: true,</span><br><span class="line">                isFront: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 class&#x3D;&#39;location&#39; :class&#x3D;&quot;getClasses()&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;一条信息&#39;,</span><br><span class="line">                title: &#39;title&#39;,</span><br><span class="line">                </span><br><span class="line">                isActive: true,</span><br><span class="line">                isFront: true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                getClasses: function ()&#123;</span><br><span class="line">                    return &#123;active:this.isActive,front:this.isFront&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>数组语法：无法动态修改 很少使用 也可以封装成一个方法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 <span class="keyword">class</span>=&#x27;<span class="symbol">location</span>&#x27; :<span class="symbol">class</span>=&quot;[<span class="symbol">active,</span>&#x27;<span class="symbol">front</span>&#x27;]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>作业：点击哪个 哪个变色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;(item,index) in movies&quot;</span><br><span class="line">                :class&#x3D;&quot;&#123;&#39;active&#39;:currentIndex&#x3D;&#x3D;index&#125;&quot;</span><br><span class="line">                @click&#x3D;&#39;changeColor(index)&#39;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                currentIndex: 0,</span><br><span class="line">                movies: [&quot;三国演义&quot;,&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;西游记&quot;]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeColor: function(index)&#123;</span><br><span class="line">                    this.currentIndex &#x3D; index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>v-bind动态绑定style：对象语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 :style&#x3D;&quot;&#123;fontSize: &#39;20px&#39;,color: red&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                currentIndex: 0,</span><br><span class="line">                message: &#39;hello wolrd&#39;,</span><br><span class="line">                movies: [&quot;三国演义&quot;,&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;西游记&quot;],</span><br><span class="line">                red: &#39;red&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeColor: function(index)&#123;</span><br><span class="line">                    this.currentIndex &#x3D; index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>返回的是一个属性 相比于method 可以缓存数据 调用多次 不用重复计算</p><p>简写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName: &#39;Bob&#39;,</span><br><span class="line">                LastName: &#39;Allen&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                fullName: function ()&#123;</span><br><span class="line">                    return this.firstName + &#39; &#39; + this.LastName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>属性有两个方法getter和setter 完整写法</p><h2 id="块级作用域var和let"><a href="#块级作用域var和let" class="headerlink" title="块级作用域var和let"></a>块级作用域var和let</h2><p>var的if和for没有块级作用域 函数有作用域 很多时候需要借助function的作用域来解决引用外面变量的问题 </p><p>ES6中加入了let let有if和for的块级作用域</p><h2 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h2><p>const修饰的变量不会被再次赋值 在es6开发中 优先使用const 需要改变某个标识符的时候才使用let</p><p>const修饰的标识符必须赋值  错误示范：const name;</p><p>指向的对象不能修改但是可以改变对象的内部属性</p><h2 id="对象增量写法"><a href="#对象增量写法" class="headerlink" title="对象增量写法"></a>对象增量写法</h2><p>ES6中新增的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;自动解析：把变量和他的值最为对象的属性</span><br><span class="line">      const name &#x3D; &quot;bob&quot;;</span><br><span class="line">      const age &#x3D; 18;</span><br><span class="line">      const obj &#x3D; &#123;</span><br><span class="line">          name,age,</span><br><span class="line">          &#x2F;&#x2F;定义函数:并进行类型验证 传入的参数必须是String</span><br><span class="line">          run(name:String)&#123;</span><br><span class="line">              console.log(&quot;我要跑了&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>.stop修饰符 阻止事件冒泡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;div @click&#x3D;&quot;divClick&quot;&gt;</span><br><span class="line">           aaaa</span><br><span class="line">           &lt;button @click.stop&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello vue&#39;,</span><br><span class="line">                names: [&#39;bob&#39;,&#39;jack&#39;,&#39;rose&#39;],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                divClick()&#123;</span><br><span class="line">                    console.log(&quot;divClick&quot;)</span><br><span class="line">                &#125;,</span><br><span class="line">                btnClick()&#123;</span><br><span class="line">                    console.log(&quot;btnClick&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>.prevent阻止默认事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#执行自己的函数submitClick而不是跳转到baidu</span><br><span class="line">&lt;form action&#x3D;&quot;baidu&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; @click.prevent&#x3D;&quot;submitClick&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>监听键帽的点击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; @keyup&#x3D;&quot;keyUp&quot;&gt;</span><br><span class="line">#只监听enter</span><br><span class="line">@keyUp.enter</span><br></pre></td></tr></table></figure><p>.once只触发一次回调</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.once&#x3D;&quot;btnClick&quot;&gt;只触发一次&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h2 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if v-else"></a>v-if v-else-if v-else</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-if&#x3D;&quot;counter&gt;0&quot;&gt;&#123;&#123;message+&#39;counter&gt;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2 v-else-if&#x3D;&quot;counter&lt;0&quot;&gt;&#123;&#123;message+&#39;counter&lt;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2 v-else&gt;&#123;&#123;message+&#39;counter&#x3D;&#x3D;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 1,</span><br><span class="line">                message:&quot;hello world&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"></span><br><span class="line">                increment: function ()&#123;</span><br><span class="line">                    this.counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>案例：登录切换 点击切换 输入框显示不同的内容</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201026213741391.png" alt="image-20201026213741391"></p><p>小问题：在输入框输入内容后 点击切换 输入框中的内容还在 因为vue在进行dom渲染时 出于性能考虑 会尽可能的复用已经存在的元素 而不是重新创建新的元素  如果不希望重复利用  可以在input里添加key 如果两个input的key不同则不可以复用</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show当条件为false的时候 仅将元素的dispaly属性置为none </p><p>v-if条件为false的时候 不会有对应的元素在dom中</p><p>显示与隐藏切换频繁的时候使用v-show</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p><strong>遍历数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(movie,index) in movies&quot;&gt;</span><br><span class="line">            &#123;&#123;index+1&#125;&#125;.&#123;&#123;movie&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>第二个参数是index 顺序不能交换</p><p><strong>遍历对象</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#x2F;&#x2F;key是下标</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(value,key) in person&quot;&gt;</span><br><span class="line">            &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028082150266.png" alt="image-20201028082150266"></p><p>vue是响应式的 当数据发生变化的时候 vue会自动检测 数据变化 视图会发生对应的更新 </p><p>vue中包含了一组观察数组编译的方法 使用他们改变数组也会触发视图的更新:push pop shift unshift sort reverse</p><p>shift删除数组最前面的元素 unshift在数组前面添加元素</p><p>使用数组下标修改元素 不能做到响应式</p><h2 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h2><p>过滤器的使用：过滤器会把管道前的元素作为第一个参数传入</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028091630236.png" alt="image-20201028091630236"></p><p>​    <img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028091636710.png" alt="image-20201028091636710"></p><h2 id="高阶函数的使用"><a href="#高阶函数的使用" class="headerlink" title="高阶函数的使用"></a>高阶函数的使用</h2><p>遍历的两种方式</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030090307298.png" alt="image-20201030090307298"></p><p><strong>filter</strong>：回调函数返回true时 函数内部将这次回调的n加入到新的数据中 返回false 这个n被过滤掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;h2 v-for&#x3D;&quot;num in testFilter(nums)&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testFilter(arr)&#123;</span><br><span class="line">                    return arr.filter(function (n)&#123;</span><br><span class="line">                        return n&lt;&#x3D;3;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p><strong>map</strong>:返回的值取代之前的值加入到回调函数的数组中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;h2 v-for&#x3D;&quot;num in testMap(nums)&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testMap(arr)&#123; </span><br><span class="line">                    return arr.map(function (n)&#123;</span><br><span class="line">                        return n*2;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>reduce:对数组中的所有内容进行汇总</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;testReduce(nums)&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testReduce(arr)&#123;</span><br><span class="line">                    &#x2F;&#x2F;n是数组的元素 preValue是每次返回的结果</span><br><span class="line">                    return arr.reduce(function (preValue,n)&#123;</span><br><span class="line">                        return preValue+n;</span><br><span class="line">                    &#125;,0)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model可以实现表单元素和数据的双向绑定</p><p><strong>radio</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        男：&lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;男&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot;&gt;&lt;br&gt;</span><br><span class="line">        女：&lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;女&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot;&gt;&lt;br&gt;</span><br><span class="line">        选择结果:&#123;&#123;sex&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                sex: &quot;&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p><strong>checkbox</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;agree&quot; v-model&#x3D;&quot;isAgree&quot;&gt;同意协议</span><br><span class="line"></span><br><span class="line">        &lt;h2&gt;您选择的是&#123;&#123;isAgree&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button :disabled&#x3D;&quot;!isAgree&quot;&gt;下一步&lt;&#x2F;button&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isAgree: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;篮球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;篮球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;足球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;足球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;排球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;排球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;羽毛球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;羽毛球</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        你的爱好是:&#123;&#123;hobbies&#125;&#125;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                hobbies: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>值绑定：标签中的属性不要写死 使用动态绑定</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030103422316.png" alt="image-20201030103422316"></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>延时加载v-model.lazy:当表格失去焦点或者回车的时候 数据才会更新</p><p>如果希望表格中数据是number类型 可以使用v-model.member</p><p>v-model.trim:去除掉首尾的空格</p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="基本使用过程"><a href="#基本使用过程" class="headerlink" title="基本使用过程"></a><strong>基本使用过程</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--        使用组件--&gt;</span><br><span class="line">        &lt;my-cpn&gt;&lt;&#x2F;my-cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;创建组件</span><br><span class="line">        const cpn &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是标题&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;h2&gt;不能引用data里的数据&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F;注册组件</span><br><span class="line">        Vue.component(&#39;my-cpn&#39;,cpn)</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a><strong>全局组件和局部组件</strong></h3><p>全局组件：使用Vue.component()进行注册  可以在多个vue实例中使用</p><p>局部组件:在vue中的conponents中进行组测只能在当前vue实例中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">myCpn:cpn</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="父组件和局部组件"><a href="#父组件和局部组件" class="headerlink" title="父组件和局部组件"></a><strong>父组件和局部组件</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;创建组件</span><br><span class="line">        const child &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        const parent &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是父组件&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                child: child</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                parent: parent</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a><strong>注册组件语法糖</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;直接创建并注册组件</span><br><span class="line">        Vue.component(&#39;child&#39;,&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.component(&#39;parent&#39;,&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是父组件&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                &#39;cpn&#39;: &#123;</span><br><span class="line">                    template: &#96;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &#96;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="组件模块抽离"><a href="#组件模块抽离" class="headerlink" title="组件模块抽离"></a><strong>组件模块抽离</strong></h3><p>template只能有一个根标签</p><p>方法一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;cpn&#39;: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;cpn&#39;: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件data"><a href="#组件data" class="headerlink" title="组件data"></a>组件data</h3><p>组件不能访问实例中的数据 有自己的data 保存在 data函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                &#39;cpn&#39;: &#123;</span><br><span class="line">                    template: &#39;#cpn&#39;,</span><br><span class="line">                    date() &#123;</span><br><span class="line">                        return &#123;</span><br><span class="line">                            message: &#39;hello world&#39;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>为什么data必须是函数？防止相同组件定义多个的时候数据共享 导致错误 通过函数定义data可以保证每个组件都有自己单独的空间</p><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>通过props向子组件传递数据 通过事件向父组件发送消息</p><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a><strong>父传子</strong></h4><p>vue实例相当于一个父组件 template只能有一个根标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;cpn v-bind:cmovies&#x3D;&quot;movies&quot; v-bind:cmessage&#x3D;&quot;message&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;cmovies&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;cmessage&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const cpn &#x3D;  &#123;</span><br><span class="line">            template: &#39;#cpn&#39;,</span><br><span class="line">            &#x2F;&#x2F;数组形式</span><br><span class="line">            &#x2F;&#x2F; props: [&quot;cmovies&quot;,&quot;cmessage&quot;]</span><br><span class="line">        &#x2F;&#x2F;    对象形式:可以对传入数据进行类型限制 支持 String Number Boolean Array Object Date Function Symbol</span><br><span class="line">            props: &#123;</span><br><span class="line">                cmovies: Array,</span><br><span class="line">                cmessage: &#123;</span><br><span class="line">                    type: [String,Number],&#x2F;&#x2F;可以定义多个</span><br><span class="line">                    default: &#39;aaa&#39;, &#x2F;&#x2F;如果父组件中message为null或message未定义 或者没绑定父组件的任何值则给他一个默认值 如果类型是数组或者对象 默认值必须是一个函数</span><br><span class="line">                    required: true, &#x2F;&#x2F;这个参数是必须的</span><br><span class="line">                    validate(value)&#123;</span><br><span class="line">                        &#x2F;&#x2F;进行一些判断</span><br><span class="line">                        return value &#x3D;&#x3D; 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello world&#39;,</span><br><span class="line">                movies: [&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;三国演义&quot;],</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                cpn</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p><strong>props驼峰标识</strong></p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030182132676.png" alt="image-20201030182132676"></p><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a><strong>子传父</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn @itemclick&#x3D;&quot;cpnClick&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button v-for&#x3D;&quot;item in categories&quot; @click&#x3D;&quot;btnClick(item)&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const cpn &#x3D;  &#123;</span><br><span class="line">        template: &#39;#cpn&#39;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                categories: [</span><br><span class="line">                    &#123;id: &#39;1&#39;,name: &#39;热门推荐&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;2&#39;,name: &#39;电脑办公&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;3&#39;,name: &#39;家用电器&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;4&#39;,name: &#39;手机数码&#39;&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnClick(item)&#123;</span><br><span class="line">                &#x2F;&#x2F;发送一个事件并且传递参数</span><br><span class="line">                this.$emit(&#39;itemclick&#39;,item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            cpnClick(item)&#123;</span><br><span class="line">                console.log(&#39;cpnClick&#39;+item.name)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><ul><li>组件中的btnClick方法会emit一个itemClick 通过itemClick会把参数传入到父组件的cpnClick方法中</li></ul><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a><strong>双向绑定</strong></h4><p>现在通过子组件和父组件都能改变父组件中的data 但是为了避免混淆vue规定只能通过父组件改变data中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childnum1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childnum2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>在子组件中添加data 使其绑定一个中间值dnumber 修改的时候修改的是dnumber的值 而不是父组件中data的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            numm1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>增加新的功能 反向修改父组件中的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot; @num1change&#x3D;&quot;num1change&quot; @num2chage&#x3D;&quot;num2change&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;!--使这个input绑定childnum并双向绑定方法childnum1input --&gt;</span><br><span class="line">        &lt;!--@input 一般用于监听事件 只要输入的值变化了就会触发input--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;childnum1&quot; @input&#x3D;&quot;childnum1input&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;childnum2&quot; @input&#x3D;&quot;childnum2input&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          num1change(value)&#123;</span><br><span class="line">              this.num1 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          num2change(value)&#123;</span><br><span class="line">              this.num2 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    childnum1input(event) &#123;   </span><br><span class="line">                        &#x2F;&#x2F;event.target.value的值是childnum1 改变dnumber后把YX,递给父组件</span><br><span class="line">                        this.dnumber1 &#x3D; event.target.value;</span><br><span class="line">                        this.$emit(&#39;num1change&#39;,this.dnumber1)</span><br><span class="line">                        </span><br><span class="line">                    &#125;,</span><br><span class="line">                    childnum2input(event) &#123;</span><br><span class="line">                        this.dnumber2 &#x3D; event.target.value;</span><br><span class="line">                        this.$emit(&#39;num2change&#39;,this.dnumber2)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>增加新的功能 当在第一个input中输入内容的时候 第二个input的内容和数据 为第一个input的100</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201031085733023.png" alt="image-20201031085733023"></p><p>watch实现双向绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot; @num1change&#x3D;&quot;num1change&quot; @num2chage&#x3D;&quot;num2change&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;!--使这个input绑定childnum并双向绑定方法childnum1input --&gt;</span><br><span class="line">        &lt;!--@input 一般用于监听事件 只要输入的值变化了就会触发input--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          num1change(value)&#123;</span><br><span class="line">              this.num1 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          num2change(value)&#123;</span><br><span class="line">              this.num2 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                watch:&#123;</span><br><span class="line">                    dnumber1(newvalue)&#123;</span><br><span class="line">                        this.dnumber2 &#x3D; newvalue * 100;</span><br><span class="line">                        this.$emit(&#39;num1change&#39;,newvalue)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    dnumber2(newvalue)&#123;</span><br><span class="line">                        this.dnumber1 &#x3D; newvalue &#x2F; 100;</span><br><span class="line">                        this.$emit(&#39;num2change&#39;,newvalue)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><p>$children:需要根据自组件的下标获取 不方便 很少使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(this.$children)</span><br><span class="line">                this.$children[0].showMessage()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    showMessage()&#123;</span><br><span class="line">                        console.log(&#39;showMessage&#39;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>$refs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;aaa&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;bbb&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;ccc&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(this.$refs.aaa)</span><br><span class="line">                this.$refs.aaa.showMessage()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    showMessage()&#123;</span><br><span class="line">                        console.log(&#39;showMessage&#39;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>parent和root</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnclick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    btnclick()&#123;</span><br><span class="line">                        &#x2F;&#x2F;访问父组件</span><br><span class="line">                        console.log(this.$parent.message)</span><br><span class="line">                    &#x2F;&#x2F;访问根组件</span><br><span class="line">                        console.log(this.$root.message)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">        &lt;!--这种方式 如果有多个插槽 会替换所有插槽 --&gt;</span><br><span class="line">        &lt;h2&gt;呵呵呵&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;呵呵呵&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--        定义一个插槽 默认值为一个button 会把cpn标签中的所有内容都放在插槽中--&gt;</span><br><span class="line">        &lt;slot&gt;&lt;button&gt;按钮&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>给插槽添加一个name属性 可以通过name插入指定的插槽    不指定名字会插入到没有name属性的插槽中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;left&quot;&gt;呵呵呵&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;替换没有名字的插槽&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;!--        定义一个插槽 默认值为一个button 会把cpn标签中的所有内容都放在插槽中--&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;left&quot;&gt;&lt;button&gt;左边&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;mid&quot;&gt;&lt;button&gt;中间&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;right&quot;&gt;&lt;button&gt;右边&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot&gt;&lt;button&gt;没有名字&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>模板中的变量使用组件中的 视图中的变量使用vue实例中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--    isshow为true--&gt;</span><br><span class="line">    &lt;cpn v-show&#x3D;&quot;isshow&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;world&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--        isshow为false--&gt;</span><br><span class="line">        &lt;h2 v-show&#x3D;&quot;isshow&quot;&gt;hello&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">            isshow: true</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        isshow:false</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>父组件替换插槽的标签 但是内容由子组件来提供</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">&lt;!--        改变展示方式--&gt;</span><br><span class="line">        &lt;!--    获取子组件中的数据 2.5版本以上可以用div代替template--&gt;</span><br><span class="line">        &lt;template slot-scope&#x3D;&quot;slot&quot;&gt;</span><br><span class="line">            &lt;span v-for&#x3D;&quot;movie in slot.data&quot;&gt;&#123;&#123;movie&#125;&#125;-&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;</span><br><span class="line">            &lt;slot :data&#x3D;&quot;movies&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for&#x3D;&quot;movie in movies&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        movies: [&#39;三国演义&#39;,&#39;水浒传&#39;,&#39;西游记&#39;,&#39;红楼梦&#39;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p><strong>commonJS的导入和导出</strong></p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101090719158.png" alt="image-20201101090719158"></p><p><strong>ES6的导入和导出</strong></p><p>导出变量</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101091751012.png" alt="image-20201101091751012"></p><p>导出函数和类</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092123506.png" alt="image-20201101092123506"></p><p>上面的方式导入和导出的变量名必须保持一致</p><p>export default：导出的东西只能有一个</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092458727.png" alt="image-20201101092458727"></p><p>导入</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092634309.png" alt="image-20201101092634309"></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>主要功能是模块化和打包 支持各种模块化规范 可以处理模块之间的依赖 并且打包成一个文件</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>创建mathUtils.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1* num2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add,mul</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建一个main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;add,mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mathUtils.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;name,age,height&#125; <span class="keyword">from</span> <span class="string">&quot;./info.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line"><span class="built_in">console</span>.log(height)</span><br></pre></td></tr></table></figure><p>创建info.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> height = <span class="number">1.79</span></span><br></pre></td></tr></table></figure><p>通过webpack进行打包 ：webpack ./src/main.js  -o ./dist/bundle.js</p><p>创建一个index.html应用bundle.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js配置</strong></p><p>执行webpack的时候自动找到webpack.config.js 读取其中的入口和出口</p><p>出口的path需要绝对路径  当前文件的绝对路径可以通过require(‘path’)获取 前期是安装node相关的包 执行npm init即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),   <span class="comment">//要填入绝对路径 动态获取 __dirname是node中的属性 可以获取当前文件所在目录</span></span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>package.json配置</strong></p><p>当执行npm init后 会生成此文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack1&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在scripts定义脚本 通过npm run xxx执行 该命令先在本地查找 再进行全局查找</p><p>本地安装不要加 -g :npm install webpack –save-dev (–save-dev是开发时依赖 项目打包后不需要继续使用)</p><p>安装后自动生成一个node_modules文件夹 并在pacckage.json中添加devDependencies</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.6.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101190647078.png" alt="image-20201101190647078"></p><h4 id="处理css文件"><a href="#处理css文件" class="headerlink" title="处理css文件"></a>处理css文件</h4><p><strong>安装style-loader和css-loader添加css文件</strong></p><p>npm install css-loader –save-dev  安装css-loader同理</p><p>在webpack.config.js中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">       rules: [</span><br><span class="line">           &#123;</span><br><span class="line">               test: &#x2F;\.css$&#x2F;,</span><br><span class="line">               &#x2F;&#x2F;多个loader时从右向左架子啊</span><br><span class="line">               use: [</span><br><span class="line">                   &#39;style-loader&#39;,      &#x2F;&#x2F;负责将样式添加到dom中</span><br><span class="line">                   &#39;css-loader&#39;         &#x2F;&#x2F;只负责加载css文件</span><br><span class="line">               ]</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在main.js中引入css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/normal.css&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="图片文件的处理"><a href="#图片文件的处理" class="headerlink" title="图片文件的处理"></a>图片文件的处理</h4><p>安装ur-loader：npm install –save-dev url-loader</p><p>在webpck.config.js中添加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//如果图片大于limit需要安装limit 执行webpack后会把图片打包并重新命名（32位hash 防止重复）</span></span><br><span class="line">            <span class="comment">// 小于limit会将图片编译成base64字符串形式</span></span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包后图片被放在dist目录中 但是浏览器访问的时候还是直接查找打包后的图片 这样会404 在webpack.config.js中的output中添加一行配置 <code>publicPath: &#39;dist/&#39;</code> 这样相当于在图片前面加了一个dist/ 就可以访问成功了</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102091142454.png" alt="image-20201102091142454"></p><p>选项</p><ul><li>img：文件要打包到的文件夹 </li><li>name：获取文件原来的名</li><li>hash:8：hash只保留八位</li><li>ext：获取图片原来的扩展名</li></ul><p>把生成的图片放在dist的img目录下 并且格式为name.hash:8.ext</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">    name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES6转ES5"><a href="#ES6转ES5" class="headerlink" title="ES6转ES5"></a>ES6转ES5</h4><p>使用babel对应的loader</p><p>安装：npm install <a href="mailto:&#98;&#97;&#x62;&#x65;&#x6c;&#x2d;&#x6c;&#111;&#97;&#x64;&#x65;&#x72;&#64;&#x38;&#x2e;&#x30;&#x2e;&#x30;&#45;&#x62;&#101;&#116;&#97;&#46;&#48;">&#98;&#97;&#x62;&#x65;&#x6c;&#x2d;&#x6c;&#111;&#97;&#x64;&#x65;&#x72;&#64;&#x38;&#x2e;&#x30;&#x2e;&#x30;&#45;&#x62;&#101;&#116;&#97;&#46;&#48;</a> @babel/core @babel/preset-env webpack</p><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行npm run build</p><h3 id="使用vue的配置过程"><a href="#使用vue的配置过程" class="headerlink" title="使用vue的配置过程"></a>使用vue的配置过程</h3><p>安装vue：npm install vue –save</p><p>在js中导入vue：<code>import Vue from &#39;vue&#39;</code></p><p>vue运行的时候有两个版本</p><ul><li>runtime-only:代码中 不可以用任何的template</li><li>runtime-complier:代码中可以有template  因为有complier可以编译模块</li></ul><p>在webpack.config.js中进行配置使用runtime-complier</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">       alias: &#123;</span><br><span class="line">           <span class="string">&#x27;vue@&#x27;</span>: <span class="string">&#x27;vue/dist/vue.ems.js&#x27;</span> <span class="comment">//使vue指定具体文件夹</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在html正常使用vue 可以在vue中定义一个template 会替换掉&lt;div id=”app”&gt;中的内容</p><p>如果</p><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h3 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h3><p>vue-cli可以快速搭建 vue开发环境以及对应的webpack配置</p><p>安装vue-cli:npm uninstall -g @vue/cli </p><p>Vue CLI &gt;= 3 与旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：npm install -g @vue/cli-init</p><p>初始化项目：vue-cli2:vue init webpack xxx</p><p>node xxx.js可以直接执行js文件</p><p>build和config中进行了一些配置 npm run build 用来打包 npm run dev运行项目</p><p>static文件夹下的文件会原封不动的放入到dist中 其中的.gitKeep文件使即使改目录为空 也会上传到git服务器</p><p>vue程序运行过程</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102145346773.png" alt="image-20201102145346773"></p><p>创建项目的时候 vue build可选compiler和runtime 区别只体现在main.js中</p><ul><li><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102145518641.png" alt="image-20201102145518641"></p></li><li><p>compiler需要解析语法树并编译给render 代码更多 性能较低</p></li><li><p>所以初始化项目的时候一般选runtime-only</p></li><li><p>render的参数h是函数createElement  可以创建.vue文件</p><ul><li>普通用法<img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102150311038.png" alt="image-20201102150311038"></li><li>还可以传入.vue文件 文件中的template由vue-template-complier解析为render() </li></ul></li></ul><h3 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h3><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102152512117.png" alt="image-20201102152512117"></p><p>初始化项目：vue create vue_cli3</p><p>在终端输入vue ui就可以启动vue ui</p><p>导入需要配置的项目</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102155709761.png" alt="image-20201102155709761"></p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const cli &#x3D; (参数列表)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只有一行 大括号可以省略 并且自动返回</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>vue-cli</p><h2 id="url的hash"><a href="#url的hash" class="headerlink" title="url的hash"></a>url的hash</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102192709374.png" alt="image-20201102192709374"></p><h2 id="history的pushState"><a href="#history的pushState" class="headerlink" title="history的pushState"></a>history的pushState</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102192846900.png" alt="image-20201102192846900"></p><p>三个参数分别是：data，title，url 相当于把url压入栈中 当执行history.back的时候出栈 总是显示栈顶的url ，history.go(n)可以入栈n个 或者出栈n个url</p><p>相似的指令有replaceStatus 不能back</p><h2 id="router安装和配置方式"><a href="#router安装和配置方式" class="headerlink" title="router安装和配置方式"></a>router安装和配置方式</h2><p>安装：npm install vue-router –save</p><p>在src中创建router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//通过Vue.use(插件)安装插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//配置路径和组件之间的映射关系</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将router实例传入到Vue实例中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在main.js中导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果导入的是router目录 自动查找index.js文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)  <span class="comment">//相当于el: &#x27;#pp&#x27;</span></span><br></pre></td></tr></table></figure><p> 创建路由组件</p><p>About.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是关于&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是关于内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;About&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>Home.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是首页&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是首页内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>在index.js中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在App.vue中进行渲染 roter-link会被渲染成&lt;a&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>路由的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由默认使用的是url的hash</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103104538701.png" alt="image-20201103104538701"></p><p>如果想展示localhost:8080/about可以使用history 默认使用replaceStatus</p><p>在index.js中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//配置路径和组件之间的映射关系</span></span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>  <span class="comment">//使用history</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-link的属性"><a href="#router-link的属性" class="headerlink" title="router-link的属性"></a>router-link的属性</h2><p>tag属性可以指定router-link渲染成什么组件</p><p><code>    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;</code></p><p>使用history的replaceStatus模式使不能点击&lt;- 和-&gt; ：<code>   &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;首页&lt;/router-link&gt;</code></p><p>当点击router-link的时候 会为其加一个class：router-link-active<img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103105508310.png" alt="image-20201103105508310"></p><p>可以利用这个class改变样式</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103105543332.png" alt="image-20201103105543332"></p><p>可以使用active-class=” xxx”重命名这个class:<code>    &lt;router-link to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/router-link&gt;</code></p><p>也可以在VueRouter中统一修改</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="keyword">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    linkActiveClas<span class="variable">s:</span> <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="通过代码跳转路由"><a href="#通过代码跳转路由" class="headerlink" title="通过代码跳转路由"></a>通过代码跳转路由</h2><p>router会为每个.vue文件添加一个$router属性 这个属性就是VueRouter对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;首页&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;关于&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;相当于history.pushStatus</span><br><span class="line">      this.$router.push(&#39;&#x2F;home&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;相当于history.replaceStatus</span><br><span class="line">      this.$router.replace(&#39;&#x2F;about&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h2><p>创建一个User.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是用户&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;用户内容&lt;&#x2F;div&gt;</span><br><span class="line">     &#x2F;&#x2F;$this获得当前处于活跃状态的路由 参数名是在index.js中配置的参数名</span><br><span class="line">    &lt;div&gt;用户信息：&#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>在index.js配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//定义了一个参数id</span></span><br><span class="line">    <span class="attribute">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attribute">component</span>: User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+userId&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置一个属性userId 动态拼接在路由路径上</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userId: &#39;bob&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>主要作用是将路由对应的组件打包成一个个的js代码块</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103124819887.png" alt="image-20201103124819887"></p><p>​    打包后一个懒加载对应要给js文件</p><h2 id="路由的嵌套使用"><a href="#路由的嵌套使用" class="headerlink" title="路由的嵌套使用"></a>路由的嵌套使用</h2><p>为Home组件添加两个子路由</p><p> 在index.js中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">       component: Home,</span><br><span class="line">       children: [</span><br><span class="line">           &#123;</span><br><span class="line">             path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">             redirect: <span class="string">&#x27;/home/news&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home_news&#x27;</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home_message&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在Home.vue中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是首页&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是首页内容&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;home&#x2F;news&quot;&gt;新闻&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;home&#x2F;message&quot;&gt;消息&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>创建一个组件Profile</p><p>在index.js中进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Profile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue中为其创建router-link并传入参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path: &#39;&#x2F;profile&#39;,query: &#123;name: &#39;bob&#39;,age: 18&#125;&#125;&quot;&gt;档案&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>Profile.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;信息&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;this.$route.query.name&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;this.$route.query.age&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>动态传参和参数传递通过button实现跳转</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104073922502.png" alt="image-20201104073922502"></p><h2 id="导航首位"><a href="#导航首位" class="headerlink" title="导航首位"></a>导航首位</h2><p>如果实现跳转到不同页面时 title跟着变化</p><p>在index.js中为路由配置添加meta属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用beforeEach(前置钩子：在路由跳转之前执行)实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from是要离开的路由对象 to是要进入的路由对象 </span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">    <span class="built_in">console</span>.log(to)</span><br><span class="line">    next()  <span class="comment">//调用该方法 才能进入到下一个钩子</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是home中有两个子路由 不知道匹配哪一个 会undefined 使用：document.title = to.matched[0].meta.title 永远匹配第一个</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104082132846.png" alt="image-20201104082132846"></p><p>beforeEach就是一个全局守卫 还有afterEach 只有参数to和from</p><p>路由独享的守卫</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104083026727.png" alt="image-20201104083026727"></p><p>组件内的守卫</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104083222421.png" alt="image-20201104083222421"></p><h2 id="keepAlive"><a href="#keepAlive" class="headerlink" title="keepAlive"></a>keepAlive</h2><p>之前组件的状态没有被保留下来 当通过路由跳转的时候 会创建一个新的组件 希望保留状态可以使用keepAlive</p><p>把home路由下嵌套路由的重定向配置删除</p><p>在Vue.app中把roterLink放在keepAlive中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;keep-alive&gt;</span></span><br><span class="line">  <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></span><br><span class="line"><span class="section">&lt;/keep-alive&gt;</span></span><br></pre></td></tr></table></figure><p>在Home.vue中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      path: &#39;&#x2F;home&#x2F;news&#39; &#x2F;&#x2F;默认跳转到news</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    this.$router.push(this.path)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">    this.path &#x3D; this.$route.path &#x2F;&#x2F;记录离开时当前路径</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>activated和deactivated只有在有keepAlive的时候才会生效</p><p><strong>属性</strong></p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104100841241.png" alt="image-20201104100841241"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;Profile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>promise是异步编程的一种解决方案</p><p>定时器的异步事件</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104110609705.png" alt="image-20201104110609705"></p><p>resolve会执行the里的代码块 reject会执行catch里的代码块</p><p>then中可以传入两个参数then(data=&gt;{},error=&gt;{}) </p><h1 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a><strong>三种状态</strong></h1><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104153536990.png" alt="image-20201104153536990"></p><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104155201850.png" alt="image-20201104155201850"></p><p>如果想让catch处理可以是：return Promise.resolve(res+”xxx”)</p><h2 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104205609194.png" alt="image-20201104205609194"></p><p>当两个请求都完成的时候 会执行then中的代码 返回结果存在results中</p><h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104210407094.png" alt="image-20201104210407094"></p><p>管理什么状态？</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104211527323.png" alt="image-20201104211527323"></p><p>一般为vuex创建一个单独文件夹store 在其中创建于给index.js文件 并创建状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>state是全局的 在任何组件中都能取到</p><p>在main.js中进行导入后就可以使用了</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;template&gt;</span></span><br><span class="line">  <span class="variable">&lt;div&gt;</span>&#123;&#123;<span class="variable">$store</span>.<span class="keyword">state</span>.counter&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="状态管理图例"><a href="#状态管理图例" class="headerlink" title="状态管理图例"></a><strong>状态管理图例</strong></h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104231353077.png" alt="image-20201104231353077"></p><p>修改state一定要通过mutation修改 </p><p>actions省略 他是用来处理异步操作的 可以请求后端api    </p><p>devtools可以记录每次修改state的状态</p><p>mutations中定义方法 方法中默认传入一个参数state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment () &#123;</span><br><span class="line">    <span class="built_in">this</span>.state.counter++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在其他方法中通过commit使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;addition&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addition () &#123;</span><br><span class="line">      this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>state单一状态树：在整个项目中只创建一个store </p><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>getter中也有一个默认参数state</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  powerCounter () &#123;</span><br><span class="line">    return this.<span class="keyword">state</span>.counter * this.<span class="keyword">state</span>.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过$store.getters.powerCounter获取</p><p>如果需要为getter传入参数 可以使其返回一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  powerCounter () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.state.counter * <span class="built_in">this</span>.state.counter</span><br><span class="line">  &#125;,</span><br><span class="line">  powerCounterAndAdd () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getters.powerCounter + x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过$store.getters.powerCounterAndAdd(x)获取</p><h2 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h2><p>state是响应式的 state中数据改变的时候 vue组件会自动更新</p><p>响应式的新增的属性和删除属性(在方法中)</p><p>Vue.set(state.person,’address’,’jiusan’)</p><p>vue.delete(state.person,’addres’)</p><h2 id="mutation的类型常量"><a href="#mutation的类型常量" class="headerlink" title="mutation的类型常量"></a>mutation的类型常量</h2><p>创建一个js文件存储常量</p><p>mutatiaon-types.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> POWERCOUNT = <span class="string">&#x27;powerCounter&#x27;</span></span><br></pre></td></tr></table></figure><p>在index.js中导入并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; POWERCOUNT &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/mutations-types&#x27;</span></span><br><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">    [POWERCOUNT] () &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有导出是defalut的时候 import不用大括号包裹</p><p> 在App.vue中导入并使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; POWERCOUNT &#125; from &#39;@&#x2F;store&#x2F;mutations-types&#39;</span><br><span class="line">additionByAccount (count) &#123;</span><br><span class="line">this.$store.commit(&#39;incrementByAccount&#39;, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>处理异步操作必须用action不能用mutation</p><p>action中的方法有一个默认值 context</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: 100,</span><br><span class="line">    person: &#123;</span><br><span class="line">      age: 10,</span><br><span class="line">      name: <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updatePerson () &#123;</span><br><span class="line">      this.state.person.name = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    updatePerson (context) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;updatePerson&#x27;</span>)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在App.vue中进行使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;$store.state.person&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;updatePerson&quot;&gt;修改person&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">updatePerson () &#123;</span><br><span class="line">  this.$store.dispatch(&#39;aupdatePerson&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><p>防止store臃肿 可以进行抽离 将store分割成模块</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105104634173.png" alt="image-20201105104634173"></p><p>可以使用state.a进行引用 其中的getters和mutations和之前使用方式相同 如果在store中找不到相应的方法 就去模块中查找</p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>在项目中安装axios：npm install axios –save</p><p>在main.js中使用    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span> <span class="comment">//默认是get请求</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>请求方式</p><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105130459781.png" alt="image-20201105130459781"></p><p>发送并发请求:返回结果是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">   axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以把返回结果分开处理</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.all</span>([</span><br><span class="line">   axios(&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    <span class="attribute">params</span>: &#123;</span><br><span class="line">        <span class="attribute">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        <span class="attribute">page</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)])<span class="selector-class">.then</span>(axios.spread((res1,res2) =&gt; &#123;</span><br><span class="line">    console.log(res1)</span><br><span class="line">    console.log(res2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><strong>全局配置</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">axios.defaults.baseURL</span>=<span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line"><span class="attr">axios.defaults.timeout</span>= <span class="number">5000</span> //单位是毫秒</span><br></pre></td></tr></table></figure><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105133058548.png" alt="image-20201105133058548"></p><h2 id="axios实例和模块封装"><a href="#axios实例和模块封装" class="headerlink" title="axios实例和模块封装"></a><strong>axios实例和模块封装</strong></h2><p>如果像访问多个ip 把baseUrl设置为全局的话没有通用性 </p><p>可以创建实例 处理不同ip的请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">    timeout:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axiosInstance(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模块封装：创建一个文件夹network 在其中创建一个request.js</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios from <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">export function <span class="title">request</span><span class="params">(config)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> axiosInstance(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main.js中进行使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;@/network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/data&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios.create会返回一个promise 当需要用其他框架的时候 直接修改request.js文件使其也返回一个promise即可 模块中的代码不用修改</p><h2 id="axios拦截器的使用"><a href="#axios拦截器的使用" class="headerlink" title="axios拦截器的使用"></a>axios拦截器的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    axiosInstance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(config)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    axiosInstance.interceptors.response.usr(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.data)</span><br><span class="line">        </span><br><span class="line">    &#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> axiosInstance(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue是一套用于构建用户界面的渐进式框架</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="http://example.com/2020/10/19/javascript/"/>
    <id>http://example.com/2020/10/19/javascript/</id>
    <published>2020-10-19T08:53:17.000Z</published>
    <updated>2021-02-03T14:04:25.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>document.write() 向body中输出内容</p><p>console.log() 向控制台输出内容</p><p>严格区分大小写 每一条语句以分号结尾 如果不写 系统会自动添加 但是会消耗系统资源 有时还会加错分号</p><p><strong>JS编写位置</strong>:可以将js代码编写到标签的onclick href属性中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这种方式耦合度较高 不推荐使用</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点我干什么&#x27;);&quot;</span> &gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;点我&#x27;);&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在&lt;script&gt;中通过src属性 引入外部标签 一旦引入外部文件 就不能在<strong>这个</strong>&lt;script&gt;中编写其他代码了 即使编写也会被浏览器忽略 </p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>检查变量类型typeof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> str)</span><br></pre></td></tr></table></figure><p>js可以表示的数字的最大值：Number.MAX_VALUE 最小值：Number.MIN_VALUE</p><p>Infinity是字面量 是number类型</p><p>NaN也是字面量 表示不是一个数字 是number类型</p><p>进行浮点数运算可能不准确 0.1+0.2</p><p>null是object类型</p><p>undeined的类型就是undefined</p><p>其他类型转换为string ：</p><ul><li>调用toString方法 该方法不会影响到原变量 null和undefined没有该方法</li><li>调用函数String() null和undefined也可以转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> str = num.toString();</span><br><span class="line"><span class="comment">//  var str = String(num);</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">typeof</span> num);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">typeof</span> str);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其他类型转换为Number</p><ul><li>使用函数Number()：如果字符串中有非数字 转换结果为NaN 如果是空串转换结果为0 true转换为1 false转换为0 null转换为0 undefined转换为NaN</li><li>函数parseInt()和parseFloat():可以将字符串中开头部分的数字读取出来并转换 如果对非String使用会先将其转换为String然后再操作</li></ul><p>转换为boolean</p><ul><li>函数Boolean：数字除了0和NaN都是true  字符串除了空串 null undefined都是true</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>字符串之间的+是拼接字符串  任何值和字符串做+运算都先转换为字符串然后再拼接</p><p>其余的运算都是先转化为number 再运算 任何值和NaN做运算都得到NaN</p><p>可以对任意数据类型取两次反 将其转换为bool值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> bool = !!num;</span><br></pre></td></tr></table></figure><p>script中使用:unicode编码<code> \uxxxx</code></p><p>页面中使用:unicode<code>&amp;#xxxx</code> 要把xxxx转换为十进制</p><p>== 如果类型不同 转换为相同类型再比较</p><p>=== 先比较类型是否相同 相同再继续比较值 NaN不和任何值相等 包括他本身 可以通过函数isNaN()判断一个值是否为NaN</p><p>代码块： 使用{}对语句进行分组 代码块中的语句要么不执行要么全执行 代码块中的内容 对外部完全可见</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>操作对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">      person.name = <span class="string">&#x27;bob&#x27;</span>;</span><br><span class="line">      person.age = <span class="number">12</span>;</span><br><span class="line">      person.sex = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">      <span class="comment">//删除对象属性</span></span><br><span class="line">      <span class="keyword">delete</span> person.sex</span><br><span class="line"></span><br><span class="line">      <span class="built_in">document</span>.write(person.person.sex)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以使用person[name] = ‘bob 定义属性 取值：<code>var name = person[name]</code>;</p><p>可以通过in检查对象中是否有某个属性 <code>var bool = &quot;name&quot; in person;</code></p><p>基本数据存储在栈内存中 值与值之间是独立存在的  修改一个变量不会影响另一个变量 </p><p>对象存储在堆内存中 变量是对地址的引用 修改一个变量会影响另一个变量</p><p>使用对象字面量创建对象<code> var person = &#123;name:&quot;bob&quot;,age:22&#125;;</code></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span>  <span class="title">max</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Math</span>.max(a,b);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">document</span>.write(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">document</span>.write(max(<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>实参可以是任意类型解析器不会检查实参的数量 如果实参数量多余形参 多余的实参为undefined</p><p>没有return或者return后没有任何值 则返回undefined</p><p>函数的参数可以是任意类型 甚至可以是一个函数</p><p>立即执行函数 只执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果一个函数作为对象的属性保存 称这个函数为这个对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line">     person.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">document</span>.write(person.name);</span><br><span class="line">     &#125;;</span><br><span class="line">     person.method();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>遍历对象中的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(n+<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局作用域：页面打开时创建 页面关闭的时候销毁 创建的变量会作为window对象的属性保存</p><p>var声名的变量会在所有代码之前被声名 但是赋值会延迟执行  函数可以在创建之前被调用 但是通过var声名的函数 只是被声名 只能在创建之后调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//执行失败</span></span><br><span class="line">max(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//执行成功</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">max</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数作用域：如果函数中找不到要操作的变量 就从上一级作用域中查找 直至全局作用域 没找到会报错ReferenceError</p><p>函数作用域中也有var声名提前的特性 定义形参就相当于在函数作用域中声明了这个变量</p><p>解析器在调用函数的时候会向函数内部传递一个隐式参数this this指向的是一个对象 这个对象我们称为函数执行的上下文对象 根据函数的调用方式不同 this会指向不同的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;;</span><br><span class="line">      person.method = fun;</span><br><span class="line">      fun(); <span class="comment">//this:window</span></span><br><span class="line">      person.method(); <span class="comment">//this:object</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>以函数的方式调用this指向window以方法的方式调用 this指向对象</li></ul><p>构造函数：习惯上首字母大写 创建方式和普通参数没有区别 普通函数是直接调用 构造函数需要使用new关键字来使用 </p><p>构造函数的执行流程</p><pre><code>* 立即创建一个新的对象* 将新建的对象设置为构造函数中的this* 执行函数中的代码* 将新建的对象作为返回值返回</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;bob&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(person.age);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>instanceof可以检查一个对象是否是一个类的实例 Object是所有对象的实例</li></ul><p>原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 原型 prototype</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype</span></span><br><span class="line"><span class="comment"> * 这个属性对应着一个对象，这个对象就是我们所谓的原型对象</span></span><br><span class="line"><span class="comment"> * 如果函数作为普通函数调用prototype没有任何作用</span></span><br><span class="line"><span class="comment"> * 当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，</span></span><br><span class="line"><span class="comment"> * 指向该构造函数的原型对象，我们可以通过__proto__来访问该属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，</span></span><br><span class="line"><span class="comment"> * 我们可以将对象中共有的内容，统一设置到原型对象中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，</span></span><br><span class="line"><span class="comment"> * 如果没有则会去原型对象中寻找，如果找到则直接使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，</span></span><br><span class="line"><span class="comment"> * 这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向MyClass的原型中添加属性a</span></span><br><span class="line">MyClass.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向MyClass的原型中添加一个方法</span></span><br><span class="line">MyClass.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(MyClass.prototype);</span></span><br><span class="line"><span class="built_in">console</span>.log(mc2.__proto__ == MyClass.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向mc中添加a属性 会覆盖掉123</span></span><br><span class="line"><span class="comment">// mc.a = &quot;我是mc中的a&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(mc.a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mc.sayHello();</span></span><br><span class="line"><span class="comment">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span></span><br><span class="line"><span class="comment">//使用该方法只有当对象自身中含有属性时，才会返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 原型对象也是对象，所以它也有原型，</span></span><br><span class="line"><span class="comment"> * 当我们使用一个对象的属性或方法时，会现在自身中寻找，</span></span><br><span class="line"><span class="comment"> * 自身中如果有，则直接使用，</span></span><br><span class="line"><span class="comment"> * 如果没有则去原型对象中寻找，如果原型对象中有，则使用，</span></span><br><span class="line"><span class="comment"> * 如果没有则去原型的原型中寻找,直到找到Object对象的原型，</span></span><br><span class="line"><span class="comment"> * Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>toString()方法</p><p>修改Person原型的toString</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,age=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;,gender=&quot;</span>+<span class="built_in">this</span>.gender+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组中的元素可以是任意类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//创建一个长度为10的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br></pre></td></tr></table></figure><p>数组的方法</p><ul><li><p>concat():可以连接两个或多个数组 并将新的数组返回 <code>arr.concat(arr2,&quot;xx&quot;);</code></p></li><li><p>join():该方法可以将数组转换成一个字符串 可以指定一个字符串作为参数 作为元素的连接符 不指定默认为,</p></li><li><p>reserve():反转数组</p></li><li><p>sort():排序数组 默认按照unicode进行排序</p><ul><li><pre><code>//降序排列:默认为升序arr.sort(function (a,b)&#123;    return b-a;&#125;);<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">* push():该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* pop():该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* unshift():向数组开头添加一个或多个元素，并返回新的数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* shift():可以删除数组的第一个元素，并将被删除的元素作为返回值返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* slice():可以用来从数组提取指定元素 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  * ```javascript</span></span><br><span class="line">    参数：</span><br><span class="line"><span class="comment">     * 1.截取开始的位置的索引,包含开始索引</span></span><br><span class="line"><span class="comment">     * 2.截取结束的位置的索引,不包含结束索引</span></span><br><span class="line"><span class="comment">     * - 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</span></span><br><span class="line"><span class="comment">     * - 索引可以传递一个负值，如果传递一个负值，则从后往前计算</span></span><br><span class="line"><span class="comment">     * -1 倒数第一个</span></span><br><span class="line"><span class="comment">     * -2 倒数第二个</span></span><br><span class="line">    <span class="keyword">var</span> result = arr.slice(1,4);</span><br><span class="line">    result = arr.slice(1,-2);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>splice():可以用于删除数组中的指定元素 会影响到原数组，会将指定元素从原数组中删除并返回 </p><ul><li><pre><code class="javascript">- 参数：*     第一个，表示开始位置的索引*     第二个，表示删除的数量*     第三个及以后。。*        可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];var result = arr.splice(3,0,&quot;牛魔王&quot;,&quot;铁扇公主&quot;,&quot;红孩儿&quot;);<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">数组的<span class="keyword">forEach</span>()方法</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];</span><br><span class="line">//第一个参数：当前正在遍历的元素 第二个参数：就是当前正在遍历的元素的索引 第三个参数：遍历的数组</span><br><span class="line">arr.<span class="keyword">forEach</span>(<span class="keyword">function</span>(<span class="keyword">value</span> , <span class="keyword">index</span> , arr)&#123;</span><br><span class="line">   console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>函数对象的call()和apply()</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span> call()和apply()</span><br><span class="line"><span class="bullet"> *</span>     - 这两个方法都是函数对象的方法，需要通过函数对象来调用</span><br><span class="line"><span class="bullet"> *</span>     - 当对函数调用call()和apply()都会调用函数执行</span><br><span class="line"><span class="bullet"> *</span>     - 在调用call()和apply()可以将一个对象指定为第一个参数</span><br><span class="line"><span class="bullet"> *</span>        此时这个对象将会成为函数执行时的this</span><br><span class="line"><span class="bullet"> *</span>     - call()方法可以将实参在对象之后依次传递</span><br><span class="line"><span class="bullet"> *</span>     - apply()方法需要将实参封装到一个数组中统一传递</span><br><span class="line"> <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span>     - this的情况：</span><br><span class="line"><span class="bullet"> *</span>        1.以函数形式调用时，this永远都是window</span><br><span class="line"><span class="bullet"> *</span>        2.以方法的形式调用时，this是调用方法的对象</span><br><span class="line"><span class="bullet"> *</span>        3.以构造函数的形式调用时，this是新创建的那个对象</span><br><span class="line"><span class="bullet"> *</span>        4.使用call和apply调用时，this是指定的那个对象</span><br><span class="line"> <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">fun.call(obj,2,3);</span></span><br><span class="line"><span class="emphasis">fun.apply(obj,[2,3]);</span></span><br></pre></td></tr></table></figure><p>在调用函数时 浏览器除了this还会传递一个隐式的参数 arguments</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    - <span class="built_in">arguments</span>是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</span><br><span class="line"> *        - 在调用函数时，我们所传递的实参都会在<span class="built_in">arguments</span>中保存</span><br><span class="line"> *        - <span class="built_in">arguments</span>.length可以用来获取实参的长度</span><br><span class="line"> *        - 我们即使不定义形参，也可以通过<span class="built_in">arguments</span>来使用实参，</span><br><span class="line"> *           只不过比较麻烦</span><br><span class="line"> *           <span class="built_in">arguments</span>[<span class="number">0</span>] 表示第一个实参</span><br><span class="line"> *           <span class="built_in">arguments</span>[<span class="number">1</span>] 表示第二个实参 。。。</span><br><span class="line"> *    - 它里边有一个属性叫做callee，</span><br><span class="line"> *           这个属性对应一个函数对象，就是当前正在指向的函数的对象</span><br><span class="line"> *        </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//console.log(arguments instanceof Array);</span></span><br><span class="line">   <span class="comment">//console.log(Array.isArray(arguments));</span></span><br><span class="line">   <span class="comment">//console.log(arguments[1]);</span></span><br><span class="line">   <span class="comment">//console.log(arguments.length);</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/创建正则表达式的对象</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 语法：</span></span><br><span class="line"><span class="comment"> *     var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</span></span><br><span class="line"><span class="comment"> *     var reg = new RegExp(&quot;a&quot;); 这个正则表达式可以来检查一个字符串中是否含有a</span></span><br><span class="line"><span class="comment"> * 在构造函数中可以传递一个匹配模式作为第二个参数，</span></span><br><span class="line"><span class="comment"> *        可以是</span></span><br><span class="line"><span class="comment"> *           i 忽略大小写</span></span><br><span class="line"><span class="comment"> *           g 全局匹配模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = new RegExp(<span class="string">&quot;ab&quot;</span>,<span class="string">&quot;i&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 正则表达式的方法：</span></span><br><span class="line"><span class="comment"> *     test()</span></span><br><span class="line"><span class="comment"> *      - 使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，</span></span><br><span class="line"><span class="comment"> *        如果符合则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(<span class="string">&quot;Ac&quot;</span>));</span><br></pre></td></tr></table></figure><p>使用字面量创建正则表达式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个正则表达式检查一个字符串中是否有字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//reg = /a|b|c|d|e|f|g/;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * []里的内容也是或的关系</span></span><br><span class="line"><span class="comment"> * [ab] == a|b</span></span><br><span class="line"><span class="comment"> * [a-z] 任意小写字母</span></span><br><span class="line"><span class="comment"> * [A-Z] 任意大写字母</span></span><br><span class="line"><span class="comment"> * [A-z] 任意字母</span></span><br><span class="line"><span class="comment"> * [0-9] 任意数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/[A-z]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查一个字符串中是否含有 abc 或 adc 或 aec</span></span><br><span class="line">reg = <span class="regexp">/a[bde]c/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * [^ ] 除了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/[^ab]/</span>;</span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/[^0-9]/</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span></span><br><span class="line">   /*</span><br><span class="line">    * split()</span><br><span class="line">    *     - 可以将一个字符串拆分为一个数组</span><br><span class="line">    *     - 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</span><br><span class="line">    *     - 这个方法即使不指定全局匹配，也会全都插分</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 根据任意字母来将字符串拆分</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * search()</span><br><span class="line">    *     - 可以搜索字符串中是否含有指定内容</span><br><span class="line">    *     - 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</span><br><span class="line">    *     - 它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</span><br><span class="line">    *     - serach()只会查找第一个，即使设置全局匹配也没用</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   str = <span class="string">&quot;hello abc hello aec afc&quot;</span>;</span></span><br><span class="line">   /*</span><br><span class="line">    * 搜索字符串中是否含有abc 或 aec 或 afc</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   result = str.search(<span class="regexp">/a[bef]c/</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * match()</span><br><span class="line">    *     - 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</span><br><span class="line">    *     - 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</span><br><span class="line">    *        我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</span><br><span class="line">    *        可以为一个正则表达式设置多个匹配模式，且顺序无所谓</span><br><span class="line">    *     - match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   str = <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   result = str.match(<span class="regexp">/[a-z]/ig</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(result[<span class="number">2</span>]);</span></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * replace()</span><br><span class="line">    *     - 可以将字符串中指定内容替换为新的内容</span><br><span class="line">    *  - 参数：</span><br><span class="line">    *        1.被替换的内容，可以接受一个正则表达式作为参数</span><br><span class="line">    *        2.新的内容</span><br><span class="line">    *  - 默认只会替换第一个</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="comment">//result = str.replace(/[a-z]/gi , &quot;@_@&quot;);</span></span></span><br><span class="line"><span class="javascript">   result = str.replace(<span class="regexp">/[a-z]/gi</span> , <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式检查一个字符串中是否含有aaa</span><br><span class="line">    */</span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 量词</span><br><span class="line">    *     - 通过量词可以设置一个内容出现的次数</span><br><span class="line">    *     - 量词只对它前边的一个内容起作用</span><br><span class="line">    *     - &#123;n&#125; 正好出现n次</span><br><span class="line">    *     - &#123;m,n&#125; 出现m-n次</span><br><span class="line">    *     - &#123;m,&#125; m次以上</span><br><span class="line">    *     - + 至少一个，相当于&#123;1,&#125;</span><br><span class="line">    *     - * 0个或多个，相当于&#123;0,&#125;</span><br><span class="line">    *     - ? 0个或1个，相当于&#123;0,1&#125;</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//ababab</span></span></span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/(ab)&#123;3&#125;/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/b&#123;3&#125;/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab&#123;1,3&#125;c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab&#123;3,&#125;c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab+c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab*c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab?c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;abbc&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 检查一个字符串中是否以a开头</span><br><span class="line">    *     ^ 表示开头</span><br><span class="line">    *     $ 表示结尾</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/^a/</span>; <span class="comment">//匹配开头的a</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/a$/</span>; <span class="comment">//匹配结尾的a</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;abcabca&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/^a$/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;bbca&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</span><br><span class="line">    * </span><br><span class="line">    * 手机号的规则：</span><br><span class="line">    *     1 3 567890123 （11位）</span><br><span class="line">    *     </span><br><span class="line">    *     1. 以1开头</span><br><span class="line">    *  2. 第二位3-9任意数字</span><br><span class="line">    *     3. 三位以后任意数字9个</span><br><span class="line">    * </span><br><span class="line">    *  ^1   [3-9]  [0-9]&#123;9&#125;$  </span><br><span class="line">    * </span><br><span class="line">    */</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> phoneStr = <span class="string">&quot;13067890123&quot;</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(phoneReg.test(phoneStr));</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 检查一个字符串中是否含有 .</span><br><span class="line">    * . 表示任意字符</span><br><span class="line">    * 在正则表达式中使用\作为转义字符</span><br><span class="line">    * \. 来表示.</span><br><span class="line">    * \\  表示\</span><br><span class="line">    *</span><br><span class="line">    * 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，</span><br><span class="line">    *     如果要使用\则需要使用\\来代替</span><br><span class="line">    */</span><br><span class="line">   var reg = <span class="regexp">/\./</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\\/</span>;</span><br><span class="line"></span><br><span class="line">   reg = new RegExp(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">   reg = new RegExp(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * \w</span><br><span class="line">    *     - 任意字母、数字、_  [A-z0-<span class="number">9</span>_]</span><br><span class="line">    * \W</span><br><span class="line">    *     - 除了字母、数字、_  [^A-z0-<span class="number">9</span>_]</span><br><span class="line">    * \d</span><br><span class="line">    *     - 任意的数字 [<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">    * \D</span><br><span class="line">    *     - 除了数字 [^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">    * \s</span><br><span class="line">    *     - 空格</span><br><span class="line">    * \S</span><br><span class="line">    *     - 除了空格</span><br><span class="line">    * \b</span><br><span class="line">    *     - 单词边界</span><br><span class="line">    * \B</span><br><span class="line">    *     - 除了单词边界</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\w/</span>;</span><br><span class="line">   reg = <span class="regexp">/\W/</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\d/</span>;</span><br><span class="line">   reg = <span class="regexp">/\D/</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\s/</span>;</span><br><span class="line">   reg = <span class="regexp">/\S/</span>;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式检查一个字符串中是否含有单词child</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\bchild\b/</span>;</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>console.log(reg.test(<span class="string">&quot;hello child &quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>接收一个用户的输入</span><br><span class="line">   <span class="regexp">//</span>var str = prompt(<span class="string">&quot;请输入你的用户名:&quot;</span>);</span><br><span class="line"></span><br><span class="line">   var str = <span class="string">&quot;              he      llo                &quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>去除掉字符串中的前后的空格</span><br><span class="line">   <span class="regexp">//</span>去除空格就是使用<span class="string">&quot;&quot;</span>来替换空格</span><br><span class="line">   console.log(str);</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/\s/g</span> , <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>去除开头的空格</span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/^\s*/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="regexp">//</span>去除结尾的空格</span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/\s*$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="regexp">//</span> <span class="regexp">/^\s*|\s*$/g</span> 匹配开头和结尾的空格</span><br><span class="line">   str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   console.log(str);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   /*</span></span><br><span class="line"><span class="xml">    * 电子邮件</span></span><br><span class="line"><span class="xml">    *     hello  .nihao          @     abc  .com.cn</span></span><br><span class="line"><span class="xml">    * </span></span><br><span class="line"><span class="xml">    * 任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（2-5位）</span></span><br><span class="line"><span class="xml">    * </span></span><br><span class="line"><span class="xml">    * \w</span><span class="template-variable">&#123;3,&#125;</span><span class="xml">  (\.\w+)*  @  [A-z0-9]+  (\.[A-z]</span><span class="template-variable">&#123;2,5&#125;</span><span class="xml">)</span><span class="template-variable">&#123;1,2&#125;</span></span><br><span class="line"><span class="xml">    */</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   var emailReg = /^\w</span><span class="template-variable">&#123;3,&#125;</span><span class="xml">(\.\w+)*@[A-z0-9]+(\.[A-z]</span><span class="template-variable">&#123;2,5&#125;</span><span class="xml">)</span><span class="template-variable">&#123;1,2&#125;</span><span class="xml">$/;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   var email = &quot;abc.hello@163.com&quot;;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   console.log(emailReg.test(email));</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>文档：整个html网页</p><p>对象：网页的每个部分转换为对象</p><p>模型：表示对象之间的关系 </p><p>节点的属性</p><ul><li><img src="/2020/10/19/javascript/image-20201021092705861.png" alt="image-20201021092705861"></li></ul><p>文档的加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * onload事件会在整个页面加载完成之后才触发</span></span><br><span class="line"><span class="comment">    * 为window绑定一个onload事件</span></span><br><span class="line"><span class="comment">    *        该事件对应的响应函数将会在页面加载完成之后执行，</span></span><br><span class="line"><span class="comment">    *        这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//获取id为btn的按钮</span></span><br><span class="line">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">      <span class="comment">//为按钮绑定一个单击响应函数</span></span><br><span class="line">      btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>dom查询</p><p>获取元素节点的子节点：通过具体的元素节点调用</p><ul><li>getElementsByTagName():获取当前节点的指定标签名后代节点</li><li>childNodes:所有子节点</li><li>firstChild:当前节点的第一个节点</li><li>lastChild:当前节点的最后一个节点</li></ul><p>获取父节点和兄弟节点：通过具体的元素节点调用</p><ul><li><p>parentNode:表示当前节点的父节点</p></li><li><p>previousSibling:表示当前节点的前一个兄弟节点</p></li><li><p>nextSibling:表示当前节点的后一个兄弟节点</p></li></ul><p>dom查询的剩余方法</p><ul><li><p>获取body的引用：document.body</p></li><li><p>获取html根标签：document.documentElement</p></li><li><p>获取所有：document.all</p></li><li><pre><code>//.box1 div/* * document.querySelector() *     - 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象 *     - 虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替 *     - 使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个 */var div = document.querySelector(&quot;.box1 div&quot;);var box1 = document.querySelector(&quot;.box1&quot;)//console.log(div.innerHTML);//console.log(box1.innerHTML);/* * document.querySelectorAll() *     - 该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回 *     - 即使符合条件的元素只有一个，它也会返回数组 */box1 = document.querySelectorAll(&quot;.box1&quot;);box1 = document.querySelectorAll(&quot;#box2&quot;);console.log(box1);<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dom的增删改</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20201022103030099</span>](javascript/image<span class="number">-20201022103030099.</span>png)</span><br><span class="line"></span><br><span class="line">循环中的索引问题</span><br><span class="line"></span><br><span class="line">```<span class="javascript">javascript</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">/*</span></span></span><br><span class="line"><span class="javascript">    * 点击超链接以后，删除一个员工的信息</span></span><br><span class="line"><span class="javascript">    */</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//获取所有额超链接</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//为每个超链接都绑定一个单击响应函数</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; allA.length ; i++)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="javascript">       * <span class="keyword">for</span>循环会在页面加载完成之后立即执行，</span></span><br><span class="line"><span class="javascript">       *     而响应函数会在超链接被点击时才执行</span></span><br><span class="line"><span class="javascript">       * 当响应函数执行时，<span class="keyword">for</span>循环早已执行完毕</span></span><br><span class="line"><span class="javascript">       */</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;for循环正在执行&quot;</span>+i);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//this.onclick = function() 要使用this不能使用allA[i]</span></span></span><br><span class="line"><span class="javascript">      allA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;响应函数正在执行&quot;</span>+i);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         <span class="comment">//alert(allA[i]);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">&#125;;</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>操作内联样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改box1的宽度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 通过JS修改元素的样式：</span></span><br><span class="line"><span class="comment"> * 语法：元素.style.样式名 = 样式值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：如果CSS的样式名中含有-，</span></span><br><span class="line"><span class="comment"> * 这种名称在JS中是不合法的比如background-color</span></span><br><span class="line"><span class="comment"> * 需要将这种样式名修改为驼峰命名法，</span></span><br><span class="line"><span class="comment"> * 去掉-，然后将-后的字母大写</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 我们通过style属性设置的样式都是内联样式，</span></span><br><span class="line"><span class="comment"> * 而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 但是如果在样式中写了!important，则此时样式会有最高的优先级，</span></span><br><span class="line"><span class="comment"> * 即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效</span></span><br><span class="line"><span class="comment"> * 所以尽量不要为样式添加!important</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">box1.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">box1.style.height = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">box1.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>读取元素当前样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *getComputedStyle()这个方法来获取元素当前的样式</span></span><br><span class="line"><span class="comment"> *        这个方法是window的方法，可以直接使用</span></span><br><span class="line"><span class="comment"> * 需要两个参数</span></span><br><span class="line"><span class="comment"> *        第一个：要获取样式的元素</span></span><br><span class="line"><span class="comment"> *        第二个：可以传递一个伪元素，一般都传null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法会返回一个对象，对象中封装了当前元素对应的样式</span></span><br><span class="line"><span class="comment"> *     可以通过对象.样式名来读取样式</span></span><br><span class="line"><span class="comment"> *     如果获取的样式没有设置，则会获取到真实的值，而不是默认值</span></span><br><span class="line"><span class="comment"> *     比如：没有设置width，它不会获取到auto，而是一个长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 但是该方法不支持IE8及以下的浏览器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通过currentStyle和getComputedStyle()读取到的样式都是只读的，</span></span><br><span class="line"><span class="comment"> *     不能修改，如果要修改必须通过style属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*alert(getComputedStyle(box1,null).width);*/</span></span><br><span class="line"><span class="comment">//正常浏览器的方式</span></span><br><span class="line">alert(getComputedStyle(box1,<span class="literal">null</span>).backgroundColor);</span><br><span class="line"><span class="comment">//IE8的方式</span></span><br><span class="line">alert(box1.currentStyle.backgroundColor);</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 当鼠标在areaDiv中移动时，在showMsg中来显示鼠标的坐标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//获取两个div</span></span><br><span class="line">   <span class="keyword">var</span> areaDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;areaDiv&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> showMsg = <span class="built_in">document</span>.getElementById(<span class="string">&quot;showMsg&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * onmousemove</span></span><br><span class="line"><span class="comment">    *     - 该事件将会在鼠标在元素中移动时被触发</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 事件对象</span></span><br><span class="line"><span class="comment">    *     - 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数,</span></span><br><span class="line"><span class="comment">    *        在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标  键盘哪个按键被按下  鼠标滚轮滚动的方向。。。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   areaDiv.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 在IE8中，响应函数被处罚时，浏览器不会传递事件对象，</span></span><br><span class="line"><span class="comment">       *     在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">/*if(!event)&#123;</span></span><br><span class="line"><span class="comment">         event = window.event;</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解决事件对象的兼容性问题</span></span><br><span class="line">      event = event || <span class="built_in">window</span>.event;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * clientX可以获取鼠标指针的水平坐标</span></span><br><span class="line"><span class="comment">       * cilentY可以获取鼠标指针的垂直坐标</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">var</span> x = event.clientX;</span><br><span class="line">      <span class="keyword">var</span> y = event.clientY;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//alert(&quot;x = &quot;+x + &quot; , y = &quot;+y);</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//在showMsg中显示鼠标的坐标</span></span><br><span class="line">      showMsg.innerHTML = <span class="string">&quot;x = &quot;</span>+x + <span class="string">&quot; , y = &quot;</span>+y;</span><br><span class="line">      </span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>div跟随鼠标移动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         #box1&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: #ff0000;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 开启box1的绝对定位</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            position: absolute;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 使div可以跟随鼠标移动</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取box1</span></span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="comment">//绑定鼠标移动事件</span></span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//解决兼容问题</span></span><br><span class="line">               event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * chrome认为浏览器的滚动条是body的，可以通过body.scrollTop来获取</span></span><br><span class="line"><span class="comment">                * 火狐等浏览器认为浏览器的滚动条是html的，</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">               <span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">               <span class="comment">//var st = document.documentElement.scrollTop;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取到鼠标的坐标</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * clientX和clientY</span></span><br><span class="line"><span class="comment">                *     用于获取鼠标在当前的可见窗口的坐标</span></span><br><span class="line"><span class="comment">                * div的偏移量，是相对于整个页面的</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * pageX和pageY可以获取鼠标相对于当前页面的坐标</span></span><br><span class="line"><span class="comment">                *     但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">var</span> left = event.clientX;</span><br><span class="line">               <span class="keyword">var</span>　top = event.clientY;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//设置div的偏移量</span></span><br><span class="line">               box1.style.left = left + sl + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">               box1.style.top = top + st + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body style=<span class="string">&quot;height: 1000px;width: 2000px;&quot;</span>&gt;</span><br><span class="line">      &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>事件的冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">#box1&#123;</span><br><span class="line">width: <span class="number">200</span>px;</span><br><span class="line">height: <span class="number">200</span>px;</span><br><span class="line">background-color: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#s1&#123;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 事件的冒泡（Bubble）</span></span><br><span class="line"><span class="comment"> * - 所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件(都是onclick)也会被触发</span></span><br><span class="line"><span class="comment"> * - 在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为s1绑定一个单击响应函数</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">s1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line">alert(<span class="string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消冒泡</span></span><br><span class="line"><span class="comment">//可以将事件对象的cancelBubble设置为true，即可取消冒泡</span></span><br><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为box1绑定一个单击响应函数</span></span><br><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line">alert(<span class="string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为body绑定一个单击响应函数</span></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;我是body的单击响应函数&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;box1&quot;</span>&gt;</span><br><span class="line">我是box1</span><br><span class="line">&lt;span id=<span class="string">&quot;s1&quot;</span>&gt;我是span&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事件的委派</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的</span></span><br><span class="line"><span class="comment"> * 我们可以尝试将其绑定给元素的共同的祖先元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 事件的委派</span></span><br><span class="line"><span class="comment"> * - 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素</span></span><br><span class="line"><span class="comment"> * 从而通过祖先元素的响应函数来处理事件。</span></span><br><span class="line"><span class="comment"> *  - 事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为ul绑定一个单击响应函数</span></span><br><span class="line">u1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * target</span></span><br><span class="line"><span class="comment"> * - event中的target表示的触发事件的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//alert(event.target);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span></span><br><span class="line"><span class="keyword">if</span>(event.target.className == <span class="string">&quot;link&quot;</span>)&#123;</span><br><span class="line">alert(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;添加超链接&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul id=<span class="string">&quot;u1&quot;</span> style=<span class="string">&quot;background-color: #bfa;&quot;</span>&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;p&gt;我是p元素&lt;/p&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>事件的绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 对象.事件 = 函数 的形式绑定响应函数，</span></span><br><span class="line"><span class="comment"> *     它只能同时为一个元素的一个事件绑定一个响应函数，</span></span><br><span class="line"><span class="comment"> *     不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * addEventListener()</span></span><br><span class="line"><span class="comment"> *     - 通过这个方法也可以为元素绑定响应函数</span></span><br><span class="line"><span class="comment"> *  - 参数：</span></span><br><span class="line"><span class="comment"> *        1.事件的字符串，不要on</span></span><br><span class="line"><span class="comment"> *        2.回调函数，当事件触发时该函数会被调用</span></span><br><span class="line"><span class="comment"> *        3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，</span></span><br><span class="line"><span class="comment"> *     这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个方法不支持IE8及以下的浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * attachEvent()</span></span><br><span class="line"><span class="comment"> *     - 在IE8中可以使用attachEvent()来绑定事件</span></span><br><span class="line"><span class="comment"> *  - 参数：</span></span><br><span class="line"><span class="comment"> *        1.事件的字符串，要on</span></span><br><span class="line"><span class="comment"> *        2.回调函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  - 这个方法也可以同时为一个事件绑定多个处理函数，</span></span><br><span class="line"><span class="comment"> *        不同的是它是后绑定先执行，执行顺序和addEventListener()相反</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span> addEventListener()中的this，是绑定事件的对象</span><br><span class="line"><span class="bullet"> *</span> attachEvent()中的this，是window</span><br><span class="line"> <span class="emphasis">*/</span></span><br></pre></td></tr></table></figure><p>事件的传播</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*      </span>1.捕获阶段</span><br><span class="line"><span class="bullet">*        </span>- 在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件</span><br><span class="line"><span class="bullet">*     </span>2.目标阶段</span><br><span class="line"><span class="bullet">*        </span>- 事件捕获到目标元素，捕获结束开始在目标元素上触发事件</span><br><span class="line"><span class="bullet">*     </span>3.冒泡阶段</span><br><span class="line"><span class="bullet">*        </span>- 事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</span><br></pre></td></tr></table></figure><p>拖拽</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         </span><br><span class="line">         #box1&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         #box2&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            position: absolute;</span><br><span class="line">            </span><br><span class="line">            left: <span class="number">200</span>px;</span><br><span class="line">            top: <span class="number">200</span>px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 拖拽box1元素</span></span><br><span class="line"><span class="comment">             *  - 拖拽的流程</span></span><br><span class="line"><span class="comment">             *        1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line"><span class="comment">             *        2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="comment">             *        3.当鼠标松开时，被拖拽元素固定在当前位置  onmouseup</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取box1</span></span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="comment">//为box1绑定一个鼠标按下事件</span></span><br><span class="line">            <span class="comment">//当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line">            box1.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">               event = event || <span class="built_in">window</span>.event;</span><br><span class="line">               <span class="comment">//div的偏移量 鼠标.clentX - 元素.offsetLeft</span></span><br><span class="line">               <span class="comment">//div的偏移量 鼠标.clentY - 元素.offsetTop</span></span><br><span class="line">               <span class="keyword">var</span> ol = event.clientX - box1.offsetLeft;</span><br><span class="line">               <span class="keyword">var</span> ot = event.clientY - box1.offsetTop;</span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">               <span class="comment">//为document绑定一个onmousemove事件</span></span><br><span class="line">               <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                  event = event || <span class="built_in">window</span>.event;</span><br><span class="line">                  <span class="comment">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line">                  <span class="comment">//获取鼠标的坐标</span></span><br><span class="line">                  <span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line">                  <span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">//修改box1的位置</span></span><br><span class="line">                  box1.style.left = left+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">                  box1.style.top = top+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">                  </span><br><span class="line">               &#125;;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">//为document绑定一个鼠标松开事件</span></span><br><span class="line">               <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="comment">//当鼠标松开时，被拖拽元素固定在当前位置  onmouseup</span></span><br><span class="line">                  <span class="comment">//取消document的onmousemove事件</span></span><br><span class="line">                  <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">                  <span class="comment">//取消document的onmouseup事件</span></span><br><span class="line">                  <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div id=<span class="string">&quot;box2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>BOM</span><br><span class="line"><span class="bullet">*  </span>- 浏览器对象模型</span><br><span class="line"><span class="bullet">*  </span>- BOM可以使我们通过JS来操作浏览器</span><br><span class="line"><span class="bullet">*  </span>- 在BOM中为我们提供了一组对象，用来完成对浏览器的操作</span><br><span class="line"><span class="bullet">*  </span>- BOM对象</span><br><span class="line"><span class="bullet">*     </span>Window</span><br><span class="line"><span class="bullet">*        </span>- 代表的是整个浏览器的窗口，同时window也是网页中的全局对象</span><br><span class="line"><span class="bullet">*     </span>Navigator</span><br><span class="line"><span class="bullet">*        </span>- 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</span><br><span class="line"><span class="bullet">*     </span>Location</span><br><span class="line"><span class="bullet">*        </span>- 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</span><br><span class="line"><span class="bullet">*     </span>History</span><br><span class="line"><span class="bullet">*        </span>- 代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录</span><br><span class="line"><span class="bullet">*           </span>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页</span><br><span class="line"><span class="bullet">*           </span>而且该操作只在当次访问时有效</span><br><span class="line"><span class="bullet">*     </span>Screen</span><br><span class="line"><span class="bullet">*        </span>- 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</span><br><span class="line"><span class="bullet">* </span></span><br><span class="line"><span class="bullet">* </span></span><br><span class="line"><span class="bullet">*     </span>这些BOM对象在浏览器中都是作为window对象的属性保存的，</span><br><span class="line"><span class="bullet">*        </span>可以通过window对象来使用，也可以直接使用</span><br></pre></td></tr></table></figure><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* Navigator</span><br><span class="line">*  - 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</span><br><span class="line">*  - 由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</span><br><span class="line">*  - 一般我们只会使用userAgent来判断浏览器的信息，</span><br><span class="line">*     userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，</span><br><span class="line">*     不同的浏览器会有不同的userAgent</span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ua);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/firefox/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是火狐！！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/chrome/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是Chrome&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/msie/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE浏览器~~~&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE11，枪毙了你~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息</span></span><br><span class="line"><span class="comment">* 比如：ActiveXObject</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE，我已经抓住你了~~~&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你不是IE~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*alert(&quot;ActiveXObject&quot; in window);*/</span></span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = function()&#123;</span><br><span class="line">   /<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">    *</span> length</span><br><span class="line"><span class="bullet">    *</span>     - 属性，可以获取到当次访问的链接数量</span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //alert(history.length);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * back()</span></span><br><span class="line"><span class="code">    *     - 可以用来回退到上一个页面，作用和浏览器的回退按钮一样</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //history.back();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * forward()</span></span><br><span class="line"><span class="code">    *     - 可以跳转下一个页面，作用和浏览器的前进按钮一样</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //history.forward();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * go()</span></span><br><span class="line"><span class="code">    *     - 可以用来跳转到指定的页面</span></span><br><span class="line"><span class="code">    *     - 它需要一个整数作为参数</span></span><br><span class="line"><span class="code">    *        1:表示向前跳转一个页面 相当于forward()</span></span><br><span class="line"><span class="code">    *        2:表示向前跳转两个页面</span></span><br><span class="line"><span class="code">    *        -1:表示向后跳转一个页面</span></span><br><span class="line"><span class="code">    *        -2:表示向后跳转两个页面</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   history.go(-2);</span></span><br><span class="line"><span class="code">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）</span></span><br><span class="line">   <span class="comment">//alert(location);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 如果直接将location属性修改为一个完整的路径，或相对路径</span></span><br><span class="line"><span class="comment">    *     则我们页面会自动跳转到该路径，并且会生成相应的历史记录</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// location = &quot;http://www.baidu.com&quot;;</span></span><br><span class="line">   <span class="comment">//location = &quot;01.BOM.html&quot;;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * assign()</span></span><br><span class="line"><span class="comment">    *     - 用来跳转到其他的页面，作用和直接修改location一样</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// location.assign(&quot;http://www.baidu.com&quot;);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * reload()</span></span><br><span class="line"><span class="comment">    *     - 用于重新加载当前页面，作用和刷新按钮一样</span></span><br><span class="line"><span class="comment">    *     - 如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//location.reload(true);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * replace()</span></span><br><span class="line"><span class="comment">    *     - 可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</span></span><br><span class="line"><span class="comment">    *        不会生成历史记录，不能使用回退按钮回退</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   location.replace(<span class="string">&quot;01.BOM.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>定时调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取count</span></span><br><span class="line">   <span class="keyword">var</span> count = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * setInterval()</span></span><br><span class="line"><span class="comment">    *     - 定时调用</span></span><br><span class="line"><span class="comment">    *     - 可以将一个函数，每隔一段时间执行一次</span></span><br><span class="line"><span class="comment">    *     - 参数：</span></span><br><span class="line"><span class="comment">    *        1.回调函数，该函数会每隔一段时间被调用一次</span></span><br><span class="line"><span class="comment">    *        2.每次调用间隔的时间，单位是毫秒</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *     - 返回值：</span></span><br><span class="line"><span class="comment">    *        返回一个Number类型的数据</span></span><br><span class="line"><span class="comment">    *        这个数字用来作为定时器的唯一标识</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      count.innerHTML = num++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(num == <span class="number">11</span>)&#123;</span><br><span class="line">         <span class="comment">//关闭定时器</span></span><br><span class="line">         <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//console.log(timer);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//clearInterval()可以用来关闭一个定时器</span></span><br><span class="line">   <span class="comment">//方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器</span></span><br><span class="line">   <span class="comment">//clearInterval(timer);</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>切换图片联系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 使图片可以自动切换</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取img标签</span></span><br><span class="line">            <span class="keyword">var</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个数组来保存图片的路径</span></span><br><span class="line">            <span class="keyword">var</span> imgArr = [<span class="string">&quot;img/1.jpg&quot;</span>,<span class="string">&quot;img/2.jpg&quot;</span>,<span class="string">&quot;img/3.jpg&quot;</span>,<span class="string">&quot;img/4.jpg&quot;</span>,<span class="string">&quot;img/5.jpg&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个变量，用来保存当前图片的索引</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个变量，用来保存定时器的标识</span></span><br><span class="line">            <span class="keyword">var</span> timer;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为btn01绑定一个单击响应函数</span></span><br><span class="line">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 目前，我们每点击一次按钮，就会开启一个定时器，</span></span><br><span class="line"><span class="comment">                *     点击多次就会开启多个定时器，这就导致图片的切换速度过快，</span></span><br><span class="line"><span class="comment">                *     并且我们只能关闭最后一次开启的定时器</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//在开启定时器之前，需要将当前元素上的其他定时器关闭</span></span><br><span class="line">               <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 开启一个定时器，来自动切换图片</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="comment">//使索引自增</span></span><br><span class="line">                  index++;</span><br><span class="line">                  <span class="comment">//判断索引是否超过最大索引</span></span><br><span class="line">                  <span class="comment">/*if(index &gt;= imgArr.length)&#123;</span></span><br><span class="line"><span class="comment">                     //则将index设置为0</span></span><br><span class="line"><span class="comment">                     index = 0;</span></span><br><span class="line"><span class="comment">                  &#125;*/</span></span><br><span class="line">                  index %= imgArr.length;</span><br><span class="line">                  <span class="comment">//修改img1的src属性</span></span><br><span class="line">                  img1.src = imgArr[index];</span><br><span class="line"></span><br><span class="line">               &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为btn02绑定一个单击响应函数</span></span><br><span class="line">            <span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn02&quot;</span>);</span><br><span class="line">            btn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="comment">//点击按钮以后，停止图片的自动切换，关闭定时器</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * clearInterval()可以接收任意参数，</span></span><br><span class="line"><span class="comment">                *     如果参数是一个有效的定时器的标识，则停止对应的定时器</span></span><br><span class="line"><span class="comment">                *     如果参数不是一个有效的标识，则什么也不做</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;img id=<span class="string">&quot;img1&quot;</span> src=<span class="string">&quot;img/1.jpg&quot;</span>/&gt;</span><br><span class="line">      &lt;br /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">      &lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;开始&lt;/button&gt;</span><br><span class="line">      &lt;button id=<span class="string">&quot;btn02&quot;</span>&gt;停止&lt;/button&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>延时调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 延时调用，</span></span><br><span class="line"><span class="comment">    *     延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num++);</span><br><span class="line">   &#125;,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用clearTimeout()来关闭一个延时调用</span></span><br><span class="line">   <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*     JSON分类：</span></span><br><span class="line"><span class="comment"> *           1.对象 &#123;&#125;</span></span><br><span class="line"><span class="comment"> *           2.数组 []</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *        JSON中允许的值：</span></span><br><span class="line"><span class="comment"> *           1.字符串</span></span><br><span class="line"><span class="comment"> *           2.数值</span></span><br><span class="line"><span class="comment"> *           3.布尔值</span></span><br><span class="line"><span class="comment"> *           4.null</span></span><br><span class="line"><span class="comment"> *           5.对象</span></span><br><span class="line"><span class="comment"> *           6.数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * json --&gt; js对象</span></span><br><span class="line"><span class="comment"> *      JSON.parse()</span></span><br><span class="line"><span class="comment"> *        - 可以将以JSON字符串转换为js对象</span></span><br><span class="line"><span class="comment"> *        - 它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">JSON</span>.parse(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span> , <span class="attr">age</span>:<span class="number">28</span> , <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JS对象 ---&gt; JSON</span></span><br><span class="line"><span class="comment"> *     JSON.stringify()</span></span><br><span class="line"><span class="comment"> *        - 可以将一个JS对象转换为JSON字符串</span></span><br><span class="line"><span class="comment"> *        - 需要一个js对象作为参数，会返回一个JSON字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj3);</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">!--</span><br><span class="line"><span class="number">1.</span> 如何产生闭包?</span><br><span class="line">  * 当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包</span><br><span class="line"><span class="number">2.</span> 闭包到底是什么?</span><br><span class="line">  * 使用chrome调试查看</span><br><span class="line">  * 理解一: 闭包是嵌套的内部函数(绝大部分人)</span><br><span class="line">  * 理解二: 包含被引用变量(函数)的对象(极少数人)</span><br><span class="line">  * 注意: 闭包存在于嵌套的内部函数中</span><br><span class="line"><span class="number">3.</span> 产生闭包的条件?</span><br><span class="line">  * 函数嵌套</span><br><span class="line">  * 内部函数引用了外部函数的数据(变量/函数)</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//执行函数定义就会产生闭包 不用调用</span></span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn1()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>常见的闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span> 将函数作为另一个函数的返回值</span><br><span class="line"><span class="number">2.</span> 将函数作为实参传递给另一个函数调用</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 1. 将函数作为另一个函数的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      a++</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> f = fn1()</span><br><span class="line">  f() <span class="comment">// 3</span></span><br><span class="line">  f() <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 将函数作为实参传递给另一个函数调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsgDelay</span>(<span class="params">msg, time</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;</span><br><span class="line">  showMsgDelay(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>闭包的作用</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 使用函数内部的变量在函数执行完后, 仍然存活在内存中<span class="comment">(延长了局部变量的生命周期)</span></span><br><span class="line"><span class="number">2.</span> 让函数外部可以操作<span class="comment">(读写)</span>到函数内部的数据<span class="comment">(变量/函数)</span></span><br></pre></td></tr></table></figure><p>闭包的生命周期</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</span><br><span class="line"><span class="number">2.</span> 死亡: 在嵌套的内部函数成为垃圾对象时</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">js是一种具有函数优先的轻量级，解释型或即时编译型的编程语言</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>leyou</title>
    <link href="http://example.com/2020/10/19/leyou/"/>
    <id>http://example.com/2020/10/19/leyou/</id>
    <published>2020-10-19T06:20:56.000Z</published>
    <updated>2020-12-05T02:14:29.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="注册中心leyou-registy"><a href="#注册中心leyou-registy" class="headerlink" title="注册中心leyou-registy"></a>注册中心leyou-registy</h2><p>eureka</p><ul><li><p>服务下线：当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。</p></li><li><p>失效剔除：有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔n秒对所有失效的服务（超过90秒未响应）进行剔除。可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒</p></li><li><p>自我保护：当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。</p><p>但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式</p></li></ul><p>客户端开启eureka使用@EnableDiscoveryClient 服务端开启eureka使用@EnableEurekaServer</p><h2 id="网关leyou-getway"><a href="#网关leyou-getway" class="headerlink" title="网关leyou-getway"></a>网关leyou-getway</h2><p>eureka</p><ul><li>当服务消费者启动时，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true(默认)，则会拉取Eureka Server服务的列表只读备份，然后缓存在本地</li></ul><p>item-service是微服务的应用名 /item/**是映射路径</p><p><img src="/2020/10/19/leyou/image-20201019154656989.png" alt="image-20201019154656989"></p><h2 id="商品微服务leyou-items"><a href="#商品微服务leyou-items" class="headerlink" title="商品微服务leyou-items"></a>商品微服务leyou-items</h2><p>创建商品的微服务模块leyou-item-service和接口模块leyou-item-interface</p><p>在leyou-item-service中导入了<a href="https://blog.csdn.net/qq360452913/article/details/86585468?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight">actuator</a>:是监控系统健康情况的工具</p><p><img src="/2020/10/19/leyou/image-20201019162157112.png" alt="image-20201019162157112"></p><h3 id="品牌新增"><a href="#品牌新增" class="headerlink" title="品牌新增"></a>品牌新增</h3><h4 id="QS工具"><a href="#QS工具" class="headerlink" title="QS工具"></a>QS工具</h4><p>QS是一个第三方库，我们可以用<code>npm install qs --save</code>来安装。不过我们在项目中已经集成了，大家无需安装：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1530696509189-1604835487386.png" alt="1530696509189"></p><p>这个工具的名字：QS，即Query String，请求参数字符串。</p><p>什么是请求参数字符串？例如： name=jack&amp;age=21</p><p>QS工具可以便捷的实现 JS的Object与QueryString的转换。</p><p>在我们的项目中，将QS注入到了Vue的原型对象中，我们可以通过<code>this.$qs</code>来获取这个工具：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1539821449329-1604835487386.png" alt="1539821449329"></p><p>我们将<code>this.$qs</code>对象打印到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$qs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现其中有3个方法：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1532850873556-1604835487386.png" alt="1532850873556"></p><p>这里我们要使用的方法是stringify，它可以把Object转为QueryString。</p><p>测试一下，使用浏览器工具，把qs对象保存为一个临时变量temp1，然后调用stringify方法：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\qs-2-1604835487388.gif" alt="1526182230872"></p><p>成功将person对象变成了 name=zhangsan&amp;age=30的字符串了</p><h4 id="deBug"><a href="#deBug" class="headerlink" title="deBug"></a>deBug</h4><p>为表中的主键添加注解@Id 不然mapper不能确定哪个字段为主键 在调用brandMapper.deleteByPrimaryKey(id)的时候错把name当成了主键</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201108204844641.png" alt="image-20201108204844641"></p><h3 id="品牌编辑"><a href="#品牌编辑" class="headerlink" title="品牌编辑"></a>品牌编辑</h3><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201110204230166.png" alt="image-20201110204230166"></p><p>前端可能是put或者post请求 后端方法的注解要用@RequestMapping</p><p>编辑的时候发现虽然brand插入了表中但是没有插入到brand和category的中间表中 原因是无法获取到新插入brand自增id</p><p>为brand的主键增加一个注解</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201111081741545.png" alt="image-20201111081741545"></p><p>这样brand中就有了自增id</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201111081831355.png" alt="image-20201111081831355"></p><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>项目：FileUpload</p><h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><p>图片上传的表单的enctype取值为Multipart/form-data会把表单分为几个部分提交 而不是value1=key&amp;value2=key的形式</p><p>需要文件上传的jar包：common-fileupload和common-io</p><p>在index.jsp中设置表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--multipart使表单分为几部分上传--%&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> action=<span class="string">&quot;/FileUpload_war_exploded/user/fileUpLoad&quot;</span>&gt;</span><br><span class="line">        选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upLoad&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在springMVC.xml中定义视图解析器 </p><p>在web.xml中加载springMVC.xml</p><p>在controller中定义方法实现文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">FileUpLoad</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">111</span>);</span><br><span class="line">    <span class="comment">//使用fileUpload组件进行文件上传</span></span><br><span class="line">    <span class="comment">//上传的位置 如果不存在就创建:D:\IDEAWorkPlace\FileUpload\target\FileUpload\\uploads</span></span><br><span class="line">    String realPath = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="number">333</span>);</span><br><span class="line">    <span class="comment">//解析request对象 获取文件上传项</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">//解析request</span></span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    <span class="keyword">for</span>(FileItem item : items)&#123;</span><br><span class="line">        <span class="comment">//判断是否是文件项</span></span><br><span class="line">        <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">            <span class="comment">//普通表单项</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String fileName = item.getName();</span><br><span class="line">            <span class="comment">//把文件名称设置为唯一值</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">            <span class="comment">//完成文件上传</span></span><br><span class="line">            item.write(<span class="keyword">new</span> File(realPath,fileName));</span><br><span class="line">            <span class="comment">//删除临时文件：当上传的文件大于10kb 会产生临时文件 小于10kb 在内存中生成缓存</span></span><br><span class="line">            item.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="springMVC实现文件上传"><a href="#springMVC实现文件上传" class="headerlink" title="springMVC实现文件上传"></a>springMVC实现文件上传</h4><p>在SpringMVC.xml中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsFileUploadSupport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>input的name和接收文件的mulitPartFile的名字必须相同</p><p>编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;springMVCFileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">SpringMVCFileUpLoad</span><span class="params">(HttpServletRequest request, MultipartFile upLoad)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//使用fileupload组件进行文件上传</span></span><br><span class="line">    <span class="comment">//上传的位置 如果不存在就创建</span></span><br><span class="line">    String realPath = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    String fileName = upLoad.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    upLoad.transferTo(<span class="keyword">new</span> File(realPath,fileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跨服务器上传"><a href="#跨服务器上传" class="headerlink" title="跨服务器上传"></a>跨服务器上传</h4><p>导入jar包：jersey-client,jersey-core</p><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;overServerFileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">OverServerFileUpLoad</span><span class="params">(MultipartFile upLoad)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//定义上传服务器路径</span></span><br><span class="line">    String path = <span class="string">&quot;http://localhost:9090/fileUpload_war/uploads/&quot;</span>;</span><br><span class="line">    String fileName = upLoad.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    <span class="comment">//创建客户端连接对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">//和图片服务器建立连接</span></span><br><span class="line">    WebResource resource =  client.resource(path+fileName);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    resource.put(upLoad.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="FastDFS实现文件上传"><a href="#FastDFS实现文件上传" class="headerlink" title="FastDFS实现文件上传"></a>FastDFS实现文件上传</h4><h5 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h5><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p><p>通俗来讲：</p><ul><li>传统文件系统管理的文件就存储在本机。</li><li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li></ul><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205318630.png?lastModify=1604900743" alt="1526205318630"></p><p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p><ul><li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li><li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li><li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li><li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li><li>Storage Cluster ：存储集群，有多个Group组成。</li></ul><h5 id="上传和下载流程"><a href="#上传和下载流程" class="headerlink" title="上传和下载流程"></a>上传和下载流程</h5><p><strong>上传</strong></p><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205664373.png?lastModify=1604900857" alt="1526205664373"></p><ol><li>Client通过Tracker server查找可用的Storage server。</li><li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li><li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li></ol><p><strong>下载</strong></p><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205705687.png?lastModify=1604900878" alt="1526205705687"></p><ol><li>Client通过Tracker server查找要下载文件所在的的Storage server。</li><li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li><li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li><li>下载文件成功。</li></ol><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>安装FastDFS和nginx：FastDFS.md</p><p>启动tracker服务:/etc/init.d/fdfs_trackerd start</p><p>启动storage服务:/etc/init.d/fdfs_storaged start</p><p>启动nginx:nginx</p><p><strong>为什么需要安装nginx</strong></p><p>FastDFS通过Tracker服务器,将文件放在Storage服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。</p><p>假设Tracker服务器将文件上传到了192.168.4.125，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.4.126，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.4.126上取文件,就会出现文件无法访问的错误。</p><p>而fastdfs-nginx-module可以重定向文件连接到文件上传时的源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误</p><h5 id="应用到项目中"><a href="#应用到项目中" class="headerlink" title="应用到项目中"></a>应用到项目中</h5><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml中追加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">1501</span> <span class="comment"># 超时时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">601</span> <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="comment"># tracker地址：你的虚拟机服务器地址+端口（默认是22122）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1228</span><span class="string">:22122</span></span><br></pre></td></tr></table></figure><p>创建一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(FdfsClientConfig.class)</span></span><br><span class="line"><span class="comment">// 解决jmx重复注册bean的问题</span></span><br><span class="line"><span class="meta">@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;image&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span>MultipartFile file)</span></span>&#123;</span><br><span class="line">        String url = uploadService.uploadImage(file);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(url))</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().build();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白名单:文件后缀必须是白名单中的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; CONTENT_TYPE = Arrays.asList(<span class="string">&quot;image/gif&quot;</span>,<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UploadService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//检验文件类型</span></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line">        <span class="keyword">if</span>(!CONTENT_TYPE.contains(contentType))&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;文件类型不合法:&quot;</span>+originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//校验文件内容ImageIO</span></span><br><span class="line">        BufferedImage read = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read = ImageIO.read(file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(read == <span class="keyword">null</span>)&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;文件内容不合法:&quot;</span>+originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存到服务器</span></span><br><span class="line"></span><br><span class="line">        String s = StringUtils.substringAfterLast(originalFilename, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        StorePath storePath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            storePath = <span class="keyword">this</span>.storageClient.uploadFile(file.getInputStream(), file.getSize(), s, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回url</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://image.leyou.com/&quot;</span>+storePath.getFullPath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="商品规格管理"><a href="#商品规格管理" class="headerlink" title="商品规格管理"></a>商品规格管理</h3><p>表关系</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201110134708213.png" alt="image-20201110134708213"></p><p>使分类表与参数表关联方便查询参数</p><p>如果使通用字段从spu获取值 否则从sku获取值</p><p>@GeneratedValue 注解详解:<a href="https://blog.csdn.net/sswqzx/article/details/84337921">博客</a></p><p><a href="https://blog.csdn.net/rongxiang111/article/details/86476028">@transient</a>:想要添加表中不存在字段，就要使用@Transient这个注解了</p><p>SpecParam</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;`numeric`&quot;)</span> <span class="comment">//表示这个字段不是关键字 而是一个列名 numeric是一个关键字</span></span><br><span class="line"><span class="keyword">private</span> Boolean numeric;</span><br></pre></td></tr></table></figure><h3 id="SpecGroup"><a href="#SpecGroup" class="headerlink" title="SpecGroup"></a>SpecGroup</h3><h4 id="编辑和新增"><a href="#编辑和新增" class="headerlink" title="编辑和新增"></a>编辑和新增</h4><p>因为SpecGroup类中的属性有list集合 所以前端传入参数的时候要按需传入需要的参数 否则会出现类型转换(string to list)异常400 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">save()&#123;</span><br><span class="line">           const param &#x3D; &#123;&#125;</span><br><span class="line">           param.name &#x3D; this.group.name</span><br><span class="line">           param.id &#x3D; this.group.id</span><br><span class="line">           param.cid &#x3D; this.cid</span><br><span class="line">           this.$http(&#123;</span><br><span class="line">           method: this.isEdit ? &#39;put&#39; : &#39;post&#39;,</span><br><span class="line">           url: &#39;&#x2F;item&#x2F;spec&#x2F;save&#39;,</span><br><span class="line">           data: this.$qs.stringify(param)</span><br><span class="line">         &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">           &#x2F;&#x2F; 关闭窗口</span><br><span class="line">           this.show &#x3D; false;</span><br><span class="line">           this.$message.success(&quot;保存成功！&quot;);</span><br><span class="line">           this.loadData();</span><br><span class="line">         &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">             this.$message.error(&quot;保存失败！&quot;);</span><br><span class="line">           &#125;);</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveSpecGroup</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="meta">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="meta">@RequestParam(&quot;cid&quot;)</span> Long cid)</span></span>&#123;</span><br><span class="line">    SpecGroup specGroup = <span class="keyword">new</span> SpecGroup();</span><br><span class="line">    specGroup.setCid(cid);</span><br><span class="line">    specGroup.setId(id);</span><br><span class="line">    specGroup.setName(name);</span><br><span class="line">    specificationService.saveSpecGroup(specGroup);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPU和SKU"><a href="#SPU和SKU" class="headerlink" title="SPU和SKU"></a>SPU和SKU</h3><h4 id="spu"><a href="#spu" class="headerlink" title="spu"></a>spu</h4><p>数据库中spu的表有两个spu和spudetail 后者存放一些通用信息 减轻查询的负担</p><p>spu_detail中的字段generic_spec和special_spec的值的id对应spec中的id</p><h4 id="sku"><a href="#sku" class="headerlink" title="sku"></a>sku</h4><p>sku的indexes中存放着下标组合对应着spuDetail表中special_spec的数组</p><p>own_spec存放下标组合对应的值 方便进行渲染</p><p>spec中的通用字段去spuDetail的generic_spec中获取值 特殊字段去spk的own_spec中获取值</p><h3 id="商品查询"><a href="#商品查询" class="headerlink" title="商品查询"></a>商品查询</h3><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201112123056356.png" alt="image-20201112123056356"></p><p>展示页面需要商品分类和品牌 对应着cname和bname</p><p>防止对表对应的实体类修改 需要对其扩展spu类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SpuBo</span> <span class="keyword">extends</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> cname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> bname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SpuDetail</span> spuDetail;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Sku</span>&gt; skus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 查询分类名称的时候参数是一个集合 可以让CategoryMapper继承SelectByIdListMapper&lt;Category,Long&gt; 改接口是根据id集合查询对象集合 第一个泛型是对象类型 第二个泛型是主键类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryNameByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">    List&lt;Category&gt; categories = categoryMapper.selectByIdList(ids);</span><br><span class="line">    <span class="keyword">return</span> categories.stream().map(category -&gt; category.getName()).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增商品"><a href="#新增商品" class="headerlink" title="新增商品"></a>新增商品</h3><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>goods.categories被监听 当选择商品分类时 会根据分类id查询品牌列表</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201113105837276.png" alt="image-20201113105837276"></p><h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><h5 id="什么是富文本编辑器"><a href="#什么是富文本编辑器" class="headerlink" title="什么是富文本编辑器"></a>什么是富文本编辑器</h5><p>百度百科：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526290914491.png" alt="1526290914491"></p><p>通俗来说：富文本，就是比较丰富的文本编辑器。普通的框只能输入文字，而富文本还能给文字加颜色样式等。</p><p>富文本编辑器有很多，例如：KindEditor、Ueditor。但并不原生支持vue</p><p>但是我们今天要说的，是一款支持Vue的富文本编辑器：<code>vue-quill-editor</code></p><h5 id="Vue-Quill-Editor"><a href="#Vue-Quill-Editor" class="headerlink" title="Vue-Quill-Editor"></a>Vue-Quill-Editor</h5><p>GitHub的主页：<a href="https://github.com/surmon-china/vue-quill-editor">https://github.com/surmon-china/vue-quill-editor</a></p><p>Vue-Quill-Editor是一个基于Quill的富文本编辑器：<a href="https://quilljs.com/">Quill的官网</a></p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526291232678.png" alt="1526291232678"></p><h5 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h5><p>使用非常简单：已经在项目中集成。以下步骤不需操作，仅供参考</p><p>第一步：安装，使用npm命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-quill-editor <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>第二步：加载，在js中引入：</p><p>全局引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">&#x27;vue-quill-editor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;; <span class="comment">/* &#123; default global options &#125; */</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor, options); <span class="comment">// options可选</span></span><br></pre></td></tr></table></figure><p>局部引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;quillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-quill-editor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们这里采用局部引用：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528465859061.png" alt="1528465859061"></p><p>第三步：页面使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quill-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;goods.spuDetail.description&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;editorOption&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="自定义的富文本编辑器"><a href="#自定义的富文本编辑器" class="headerlink" title="自定义的富文本编辑器"></a>自定义的富文本编辑器</h5><p>不过这个组件有个小问题，就是图片上传的无法直接上传到后台，因此我们对其进行了封装，支持了图片的上传。</p><p> <img src="/2020/10/19/leyou/log\source_posts\leyou\1526296083605.png" alt="1526296083605.png"></p><p>使用也非常简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-stepper-content</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;goods.spuDetail.description&quot;</span> <span class="attr">upload-url</span>=<span class="string">&quot;/upload/image&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-stepper-content</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>upload-url：是图片上传的路径</li><li>v-model：双向绑定，将富文本编辑器的内容绑定到goods.spuDetail.description</li></ul><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528469209005.png" alt="1528469209005"></p><p>如果出错：无法获取服务端连接资源:can’t create connection to/192.168.182.128:22122</p><p>在虚拟机中关闭防火墙并执行：iptables -L ，iptables -F</p><h4 id="规格参数"><a href="#规格参数" class="headerlink" title="规格参数"></a>规格参数</h4><p>goods.categories被监听 当选择商品分类时 会根据分类id查询规格参数</p><h4 id="商品新增"><a href="#商品新增" class="headerlink" title="商品新增"></a>商品新增</h4><p>前端页面中GoodsForm.vue中这段代码不需要将价格格式化 因为后端的price字段是long类型 格式化就会传入string类型 会产生转换错误</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201113144254082.png" alt="image-20201113144254082"></p><h4 id="商品修改"><a href="#商品修改" class="headerlink" title="商品修改"></a>商品修改</h4><p>一下报错是因为xxxbyExample没有传入Example实例：</p><p>There is no getter for property named ‘oredCriteria’ in ‘class com.domain.</p><h2 id="leyou-commons"><a href="#leyou-commons" class="headerlink" title="leyou-commons"></a>leyou-commons</h2><p>放入公共的代码</p><h2 id="leyou-search"><a href="#leyou-search" class="headerlink" title="leyou-search"></a>leyou-search</h2><p>需要调用leyou-item-interface 使用feign(微服务之间进行调用)  </p><h3 id="远程调用controller接口"><a href="#远程调用controller接口" class="headerlink" title="远程调用controller接口"></a>远程调用controller接口</h3><p>把Good中需要的属性相应的获取方法 封装在接口中 </p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201115153913617.png" alt="image-20201115153913617"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Brand <span class="title">queryBrandById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在leyou-search中使用feign进行调用</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201115153948811.png" alt="image-20201115153948811"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;item-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spu转换为good</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">BuildGoods</span><span class="params">(Spu spu)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//根据分类id获取分类名称</span></span><br><span class="line">        List&lt;String&gt; names = categoryClient.queryNamesByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">        <span class="comment">//查询品牌</span></span><br><span class="line">        Brand brand = brandClient.queryBrandById(spu.getBrandId());</span><br><span class="line">        <span class="comment">//根据spuId查询所有sku</span></span><br><span class="line">        List&lt;Sku&gt; skus = goodsClient.querySkusBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//sku价格集合</span></span><br><span class="line">        List&lt;Long&gt; prices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//sku集合 ：sku中集合有很多没用的参数 把有用的参数抽取出来</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; skuMapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        skus.forEach(sku -&gt; &#123;</span><br><span class="line">            prices.add(sku.getPrice());</span><br><span class="line">            <span class="comment">//存放有用的  参数</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,sku.getId());</span><br><span class="line">            map.put(<span class="string">&quot;title&quot;</span>,sku.getTitle());</span><br><span class="line">            map.put(<span class="string">&quot;price&quot;</span>,sku.getPrice());</span><br><span class="line">            <span class="comment">//数据库中的图片可能是多张 只获取第一张</span></span><br><span class="line">            map.put(<span class="string">&quot;image&quot;</span>,StringUtils.isBlank(sku.getImages())?<span class="string">&quot;&quot;</span>:StringUtils.split(sku.getImages(),<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">            skuMapList.add(map);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//根据cid3和search==ture获取规格参数 并进行封装</span></span><br><span class="line">        List&lt;SpecParam&gt; params = specificationClient.queryParams(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//参数值在spuDetail中</span></span><br><span class="line">        <span class="comment">//根据spuId查询spuDetail</span></span><br><span class="line">        SpuDetail spuDetail = goodsClient.querySpuDetailBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//反序列化通用参数:第一个参数是反序列化的对象 第二个参数是序列化的结果类型 用TypeReference接受</span></span><br><span class="line">        Map&lt;String, Object&gt; genericSpecMap = MAPPER.readValue(spuDetail.getGenericSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="comment">//反序列化非通用参数</span></span><br><span class="line">        Map&lt;String, List&lt;Object&gt;&gt; specialSpecMap = MAPPER.readValue(spuDetail.getSpecialSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;String, List&lt;Object&gt;&gt;&gt;()&#123;&#125;);</span><br><span class="line">        Map&lt;String,Object&gt; specs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.forEach(param-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(param.getGeneric())&#123;</span><br><span class="line">                String value = genericSpecMap.get(param.getId().toString()).toString();</span><br><span class="line">                <span class="comment">//如果是搜索区间</span></span><br><span class="line">                <span class="keyword">if</span>(param.getNumeric())&#123;</span><br><span class="line">                    value = chooseSegment(value,param);</span><br><span class="line">                &#125;</span><br><span class="line">                specs.put(param.getName(),value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;Object&gt; value = specialSpecMap.get(param.getId().toString());</span><br><span class="line">                specs.put(param.getName(),value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置goods</span></span><br><span class="line">        Goods goods= <span class="keyword">new</span> Goods();</span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        goods.setCid1(spu.getCid1());</span><br><span class="line">        goods.setCid2(spu.getCid2());</span><br><span class="line">        goods.setCid3(spu.getCid3());</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setCreateTime(spu.getCreateTime());</span><br><span class="line">        goods.setSubTitle(spu.getSubTitle());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * tile 分类名称和品牌名称 空格是为了在分词的时候进行分隔</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        goods.setAll(spu.getTitle()+<span class="string">&quot; &quot;</span>+ StringUtils.join(names,<span class="string">&quot; &quot;</span>)+<span class="string">&quot; &quot;</span>+brand.getName());</span><br><span class="line">        <span class="comment">//获取所有spu下sku的价格</span></span><br><span class="line">        goods.setPrice(prices);</span><br><span class="line">        <span class="comment">//获取spu下所有sku 并转换成json字符串</span></span><br><span class="line">        goods.setSkus(MAPPER.writeValueAsString(skuMapList));</span><br><span class="line">        <span class="comment">//获取spu下所有查询的规格参数 格式&#123;name:value&#125;</span></span><br><span class="line">        goods.setSpecs(specs);</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">        String result = <span class="string">&quot;其它&quot;</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">                end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">&quot;以上&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">&quot;以下&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign 发现有body就会强制把GET转换成POST 导入jar包 不然会出错</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">okhttp:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bug：如果把SpecParm的根据cid和根据gid查询合并成一个方法 并用specParamClient调用该方法调用的时候cid会传入null？</p><h3 id="导入图片信息"><a href="#导入图片信息" class="headerlink" title="导入图片信息"></a>导入图片信息</h3><p>现在商品表中虽然有数据，但是所有的图片信息都是无法访问的，我们需要把图片导入到虚拟机：</p><p>首先，把课前资料提供的数据上传到虚拟机下：<code>/leyou/static</code>目录：在leyou下创建static目录</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528445149890.png" alt="1528445149890"></p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528479229165.png" alt="1528479229165"></p><p>然后，使用命令解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip images.zip</span><br></pre></td></tr></table></figure><p>修改Nginx配置，使nginx反向代理这些图片地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/nginx/config/nginx.conf</span><br></pre></td></tr></table></figure><p>修改成如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 将其它图片代理指向本地的/leyou/static目录</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /leyou/static/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要忘记重新加载nginx配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><h3 id="分类和品牌聚合"><a href="#分类和品牌聚合" class="headerlink" title="分类和品牌聚合"></a>分类和品牌聚合</h3><p><strong>修改search方法</strong></p><p>创建一个类SearchResult存放商品聚合后的结果集</p><p>修改SearchController中的search方法添加es的聚合查询 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">&quot;cid3&quot;</span>));</span><br></pre></td></tr></table></figure><p>这句相当于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/goods/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;categories&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;cid3&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据过滤</strong></p><p>用代码实现下面的操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/goods/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;all&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;specs.CPU核数.keyword&quot;</span>: <span class="string">&quot;十核&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leyou-goods-web"><a href="#leyou-goods-web" class="headerlink" title="leyou-goods-web"></a>leyou-goods-web</h2><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a><strong>页面跳转</strong></h3><p>配置一个controller</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">&quot;item/&#123;id&#125;.html&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span>  String toItemPage(<span class="meta">@PathVariable(<span class="meta-string">&quot;id&quot;</span>)</span> <span class="built_in">Long</span> id, Model model)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">111</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在nginx.conf中进行配置</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204401819.png" alt="image-20201122204401819"></p><p>当点击照片的时候跳转路径</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204508895.png" alt="image-20201122204508895"></p><p>当点击照片的时候被反向代理到8084端口 然后跳转到item.html 同时请求静态资源</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204743132.png" alt="image-20201122204743132"></p><p>这个静态资源被反向代理到9002端口 从portal项目中获取 </p><h3 id="封装模型数据"><a href="#封装模型数据" class="headerlink" title="封装模型数据"></a>封装模型数据</h3><p>跳转后的页面中 我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p><ul><li>spu信息</li><li>spu的详情</li><li>spu下的所有sku</li><li>品牌</li><li>商品三级分类</li><li>商品规格参数、规格参数组</li></ul><p>在相应的controller中添加没有的方法</p><p>并在GoodsService中进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodsService goodsService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;item/&#123;id&#125;.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">toItemPage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, Model model)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = goodsService.loadDate(id);</span><br><span class="line">        model.addAllAttributes(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动时会报错</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122222918887.png" alt="image-20201122222918887"></p><p> 这是由于我在同一个项目中用了相同的两个@FeignClient(“item-service”)导致报错。</p><p>解决方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">      name: sxbs-mall-consumer</span><br><span class="line">    # 多个接口上的@FeignClient(“相同服务名”)会报错，overriding is disabled。</span><br><span class="line">    # 设置 为true ,即 允许 同名</span><br><span class="line">    main:</span><br><span class="line">      allow-bean-definition-overriding: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="thymeleaf实现页面静态化"><a href="#thymeleaf实现页面静态化" class="headerlink" title="thymeleaf实现页面静态化"></a>thymeleaf实现页面静态化</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>先说下Thymeleaf中的几个概念：</p><ul><li>Context：运行上下文</li><li>TemplateResolver：模板解析器</li><li>TemplateEngine：模板引擎</li></ul><blockquote><p>Context</p></blockquote><p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p><p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p><blockquote><p>TemplateResolver</p></blockquote><p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p><p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p><blockquote><p>TemplateEngine</p></blockquote><p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引擎进行处理的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templateEngine.process(<span class="string">&quot;模板名&quot;</span>, context, writer);</span><br></pre></td></tr></table></figure><p>三个参数：</p><ul><li>模板名称</li><li>上下文：里面包含模型数据</li><li>writer：输出目的地的流</li></ul><p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p><p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>创建一个service处理html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsHtmlService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化运行上下文</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        <span class="comment">//设置数据模型</span></span><br><span class="line">        context.setVariables(goodsService.loadDate(spuId));</span><br><span class="line">        <span class="comment">//把静态文件生成到本地</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\nginx-1.19.2\\html\\item\\&quot;</span>+spuId+<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            printWriter = <span class="keyword">new</span> PrintWriter(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(printWriter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.templateEngine.process(<span class="string">&quot;item&quot;</span>,context,printWriter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GoodsService中进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;item/&#123;id&#125;.html&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">toItemPage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, Model model)</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = goodsService.loadDate(id);</span><br><span class="line">    model.addAllAttributes(map);</span><br><span class="line">    goodsHtmlService.createHtml(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;item &#123;</span><br><span class="line">    # 先找本地 默认在nginx中寻找对应的文件名 html</span><br><span class="line">    root html;</span><br><span class="line">    if (!-f $request_filename) &#123; #请求的文件不存在，就反向代理</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8084;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合rabitMQ到项目中"><a href="#整合rabitMQ到项目中" class="headerlink" title="整合rabitMQ到项目中"></a>整合rabitMQ到项目中</h2><p>为了防止并发 发送的消息越精简越好</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201130225708860.png" alt="image-20201130225708860"></p><p>在item-service中增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.52</span><span class="number">.131</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bob</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">Bbj0611..</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">exchange:</span> <span class="string">LEYOU.ITEM.EXCHANGE</span></span><br></pre></td></tr></table></figure><p>在GoodsServiceImpl中增加发送消息的方法</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201130233851073.png" alt="image-20201130233851073"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String type, Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;item.&quot;</span>+type,id);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AmqpException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在leyou-goods-web和search服务中增加依赖 配置 监听的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsHtmlService goodsHtmlService;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;LEYOU.ITEM.SAVE_QUEUE&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;LEYOU_ITEM_EXCHANGE&quot;,ignoreDeclarationExceptions = &quot;true&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;item.insert&quot;,&quot;item.update&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.goodsHtmlService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;LEYOU.ITEM.DELETE_QUEUE&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;LEYOU_ITEM_EXCHANGE&quot;,ignoreDeclarationExceptions = &quot;true&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;item.delete&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.goodsHtmlService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="cookie写入问题"><a href="#cookie写入问题" class="headerlink" title="cookie写入问题"></a>cookie写入问题</h3><p>我们去Debug跟踪CookieUtils，看看到底是怎么回事：</p><p>我们发现内部有一个方法，用来获取Domain：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303181817.png" alt="1533303181817"></p><p>它获取domain是通过服务器的host来计算的，然而我们的地址竟然是：127.0.0.1:8087，因此后续的运算，最终得到的domain就变成了：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303213902.png" alt="1533303213902"></p><p>问题找到了：我们请求时的serverName明明是：api.leyou.com，现在却被变成了：127.0.0.1，因此计算domain是错误的，从而导致cookie设置失败！</p><p>那么问题来了：为什么我们这里的请求serverName变成了：127.0.0.1:8087呢？</p><p>这里的server name其实就是请求的时的主机名：Host，之所以改变，有两个原因：</p><ul><li>我们使用了nginx反向代理，当监听到api.leyou.com的时候，会自动将请求转发至127.0.0.1:10010，即Zuul。</li><li>而后请求到达我们的网关Zuul，Zuul就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了 127.0.0.1:8087 ，即我们的授权中心。</li></ul><p>我们首先去更改nginx配置，让它不要修改我们的host：<code>proxy_set_header Host $host;</code></p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303544219.png" alt="1533303544219"></p><p>把nginx进行reload：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure><p>这样就解决了nginx这里的问题。但是Zuul还会有一次转发，所以要去修改网关的配置（leyou-gateway工程）：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303659673.png" alt="1533303659673"></p><p>重启后，我们再次测试。</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533716093162.png" alt="1533716093162"></p><p>最后计算得到的domain：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533716136698.png" alt="1533716136698"></p><p>我们再次登录，发现依然没有cookie！！</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\01348FC2.gif" alt="img"> </p><p>怎么回事呢？</p><p>我们通过RestClient访问下看看：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1534225751381.png" alt="1534225751381"></p><p>发现，响应头中还是没有<code>set-cookie</code>。</p><p>这是怎么回事？？</p><p>Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533732985089.png" alt="1533732985089"></p><p>会发现，这里会通过一个属性为<code>SensitiveHeaders</code>的属性，来获取敏感头列表，然后添加到<code>IgnoredHeaders</code>中，这些头信息就会被忽略。</p><p>而这个<code>SensitiveHeaders</code>的默认值就包含了<code>set-cookie</code>：</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533733081367.png" alt="1533733081367"></p><p>解决方案有两种：</p><p>全局设置：</p><ul><li><code>zuul.sensitive-headers=</code> </li></ul><p>指定路由设置：</p><ul><li><code>zuul.routes.&lt;routeName&gt;.sensitive-headers=</code></li><li><code>zuul.routes.&lt;routeName&gt;.custom-sensitive-headers=true</code></li></ul><p>思路都是把敏感头设置为null</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533733356133.png" alt="1533733356133"></p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>build中存放了webpack的配置文件 config中存放了webpack运行所需要的环境参数</p><p>dist是打包目录</p><p>该项目是单页面应用 只有一个index.html 其他内容都是组件</p><p>src下的asset存放静态资源 modules存放全局组件</p><p>目录结构</p><p><img src="/2020/10/19/leyou/image-20201020100244930.png" alt="image-20201020100244930"></p><p>调用关系</p><ul><li>index.html：html模板文件。定义了空的<code>div</code>，其id为<code>app</code>。</li><li>main.js：<strong>实例化vue对象</strong>，并且通过id选择器绑定到index.html的div中，因此<strong>main.js的内容都将在index.html的div中显示</strong>。main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），所以，main.js也是<strong>webpack打包的入口</strong>。</li><li>index.js：定义请求路径和组件的映射关系。相当于之前的<code>&lt;vue-router&gt;</code></li><li>App.vue中也没有内容，而是定义了vue-router的锚点：<code>&lt;router-view&gt;</code>,我们之前讲过，vue-router路由后的组件将会在锚点展示。</li><li>最终结论：<strong>一切路由后的内容都将通过App.vue在index.html中显示。</strong></li><li>访问流程：用户在浏览器输入路径，例如：<a href="http://localhost:9001/#/item/brand">http://localhost:9001/#/item/brand</a> –&gt; index.js(/item/brand路径对应pages/item/Brand.vue组件) –&gt; 该组件显示在App.vue的锚点位置 –&gt; main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）</li></ul><h2 id="使用域名访问后台页面"><a href="#使用域名访问后台页面" class="headerlink" title="使用域名访问后台页面"></a>使用域名访问后台页面</h2><p>在SwitchHosts中进行配置</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201105202038416.png" alt="image-20201105202038416"></p><p>在leyou-manage-web前端项目中配置的访问路径是localhost 不允许通过其他域名进行访问</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201105202129847.png" alt="image-20201105202129847"></p><p>在webpack.dev.conf.js中的devServer配置使域名检查失效</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disableHostCheck:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>但是现在要访问后台页面，还得自己加上端口：<code>http://manage.leyou.com:9001</code>。</p><p>这就不够优雅了。我们希望的是直接域名访问：<code>http://manage.taotao.com</code>。这种情况下端口默认是80，如何才能把请求转移到9001端口呢？</p><p>这里就要用到反向代理工具：Nginx</p><h2 id="使用nginx作为web服务器作为反向代理"><a href="#使用nginx作为web服务器作为反向代理" class="headerlink" title="使用nginx作为web服务器作为反向代理"></a>使用nginx作为web服务器作为反向代理</h2><p><strong>Web服务器分2类</strong></p><ul><li>web应用服务器，如：<ul><li>tomcat </li><li>resin</li><li>jetty</li></ul></li><li>web服务器，如：<ul><li>Apache 服务器 </li><li>Nginx</li><li>IIS  </li></ul></li></ul><p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。<br>并发：web服务器的并发能力远高于web应用服务器。</p><p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：反向代理,负载均衡,动态路由,请求过滤</p><p>什么是反向代理？</p><ul><li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li><li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li></ul><p>nginx可以当做反向代理服务器来使用：</p><ul><li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li><li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li></ul><p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526016663674.png" alt="1526016663674"></p><p><strong>反向代理配置</strong></p><p> <img src="/2020/10/19/leyou/log\source_posts\leyou\1526188831504.png" alt="1"></p><p>nginx中的每个server就是一个反向代理配置，可以有多个server</p><p>启动nginx：start nginx 重新加载：nginx -s reload 停止：nginx -s stop</p><p><strong>流程</strong></p><ol><li><p>浏览器准备发起请求，访问<a href="http://mamage.leyou.com,但需要进行域名解析/">http://mamage.leyou.com，但需要进行域名解析</a></p></li><li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p></li><li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href="http://127.0.0.1/">http://127.0.0.1:80</a></p><p>本机的nginx一直监听80端口，因此捕获这个请求</p></li><li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p></li><li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p></li><li><p>nginx将得到的结果返回到浏览器</p></li></ol><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><table><thead><tr><th>跨域原因说明</th><th>示例</th></tr></thead><tbody><tr><td>域名不同</td><td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td></tr><tr><td>域名相同，端口不同</td><td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td></tr><tr><td>二级域名不同</td><td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td></tr></tbody></table><p>http和https也属于跨域  </p><h2 id="cors解决跨域"><a href="#cors解决跨域" class="headerlink" title="cors解决跨域"></a>cors解决跨域</h2><h3 id="5-3-1-什么是cors"><a href="#5-3-1-什么是cors" class="headerlink" title="5.3.1.什么是cors"></a>5.3.1.什么是cors</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源</a>使用的限制。</p><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><ul><li><p>浏览器端：</p><p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</p></li><li><p>服务端：</p><p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否允许其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。</p></li></ul><h3 id="5-3-2-原理有点复杂"><a href="#5-3-2-原理有点复杂" class="headerlink" title="5.3.2.原理有点复杂"></a>5.3.2.原理有点复杂</h3><p>浏览器会将ajax请求分为两类，其处理方案略有差异：简单请求、特殊请求。</p><h4 id="5-3-2-1-简单请求"><a href="#5-3-2-1-简单请求" class="headerlink" title="5.3.2.1.简单请求"></a>5.3.2.1.简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。：</p><p>（1) 请求方法是以下三种方法之一： </p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul><p>当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：<code>Origin</code>.</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1530460311064.png" alt="1530460311064"></p><p>Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。</p><p>如果服务器允许跨域，需要在返回的响应头中携带下面信息：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><ul><li>Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*（代表任意域名）</li><li>Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true</li></ul><blockquote><p>有关cookie：</p></blockquote><p>要想操作cookie，需要满足3个条件：</p><ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li><li>浏览器发起ajax需要指定withCredentials 为true</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li></ul><h4 id="5-3-2-2-特殊请求"><a href="#5-3-2-2-特殊请求" class="headerlink" title="5.3.2.2.特殊请求"></a>5.3.2.2.特殊请求</h4><p>不符合简单请求的条件，会被浏览器判定为特殊请求,，例如请求方式为PUT。</p><blockquote><p>预检请求</p></blockquote><p>特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p><p>一个“预检”请求的样板：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.leyou.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure><p>与简单请求相比，除了Origin以外，多了两个头：</p><ul><li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li><li>Access-Control-Request-Headers：会额外用到的头信息</li></ul><blockquote><p>预检请求的响应</p></blockquote><p>服务的收到预检请求，如果许可跨域，会发出响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure><p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p><ul><li>Access-Control-Allow-Methods：允许访问的方式</li><li>Access-Control-Allow-Headers：允许携带的头</li><li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，<strong>过期之前的ajax请求就无需再次进行预检了</strong></li></ul><p>如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。</p><h3 id="5-3-3-实现非常简单"><a href="#5-3-3-实现非常简单" class="headerlink" title="5.3.3.实现非常简单"></a>5.3.3.实现非常简单</h3><p>虽然原理比较复杂，但是前面说过：</p><ul><li>浏览器端都有浏览器自动完成，我们无需操心</li><li>服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。</li></ul><p>事实上，SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter ,内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。</p><p>在<code>leyou-gateway</code>中编写一个配置类，注册CorsFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;http://manage.leyou.com&quot;</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前台系统"><a href="#前台系统" class="headerlink" title="前台系统"></a>前台系统</h1><p>项目：leyou-portal-master</p><p>没有webpack，我们就无法使用webpack-dev-server运行这个项目，实现热部署。所以，这里我们使用另外一种热部署方式：live-server</p><p>使用npm安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g live-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>运行:后面可以接一些参数</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">live-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>使用端口9002启动并在switchhosts和nginx中进行配置 使其通过<a href="http://www.leyou.com进行访问/">www.leyou.com进行访问</a></p><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>ly的getUrlParam可以获取到请求路径中的参数 loacation.search可以对参数进行编码 之后再转换为json对象</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116120558405.png" alt="image-20201116120558405"></p><p><strong>解决跨域</strong></p><p>在getway微服务中配置</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116121900049.png" alt="image-20201116121900049"></p><p>在LeyouCorsConfiguration中增加允许的域</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116121929930.png" alt="image-20201116121929930"></p><p>返回给前端的数据如下 只需要三个字段 可以把其他不需要的值过滤掉</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117091645008.png" alt="image-20201117091645008"></p><p>在application.yml中进行配置</p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117091840572.png" alt="image-20201117091840572"></p><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117092012690.png" alt="image-20201117092012690"></p>]]></content>
    
    
    <summary type="html">记录乐优商城的项目构建过程中的疑难点</summary>
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="leyou" scheme="http://example.com/tags/leyou/"/>
    
  </entry>
  
</feed>
