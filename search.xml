<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HashMap源码分析</title>
    <url>/2020/11/16/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_42034205/article/details/90384772">为什么与hashcode &gt;&gt;&gt; 16异或？</a></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = <span class="built_in">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/JustBeauty/article/details/81116144">ParameterizedType详解</a></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(<span class="built_in">Object</span> x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x instanceof <span class="built_in">Comparable</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; c; <span class="built_in">Type</span>[] ts, <span class="keyword">as</span>; <span class="built_in">Type</span> t; ParameterizedType p;</span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == <span class="built_in">String</span>.<span class="keyword">class</span>) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) instanceof ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                     <span class="built_in">Comparable</span>.<span class="keyword">class</span>) &amp;&amp;</span><br><span class="line">                    (<span class="keyword">as</span> = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    <span class="keyword">as</span>.length == <span class="number">1</span> &amp;&amp; <span class="keyword">as</span>[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/loading4/p/6239441.html">返回大于输入参数且最近的2的整数次幂的数</a></p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">static final <span class="built_in">int</span> tableSizeFor(<span class="built_in">int</span> cap) &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span> = cap - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">n</span> |= <span class="built_in">n</span> &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    return (<span class="built_in">n</span> &lt; <span class="number">0</span>) ? <span class="number">1</span> <span class="symbol">:</span> (<span class="built_in">n</span> &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY <span class="symbol">:</span> <span class="built_in">n</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于为什么最后要+1：<a href="https://www.jianshu.com/p/e33d3fa32091">https://www.jianshu.com/p/e33d3fa32091</a></p>
<p>以cap = 5为例</p>
<p><img src="/2020/11/16/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image.png"></p>
<p>参考：</p>
<p>​    <a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a></p>
<p>​    <a href="https://blog.csdn.net/qq_40574571/article/details/97612100">https://blog.csdn.net/qq_40574571/article/details/97612100</a></p>
]]></content>
      <categories>
        <category>jdk</category>
      </categories>
      <tags>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle</title>
    <url>/2020/10/02/Gradle/</url>
    <content><![CDATA[<h1 id="gradle配置"><a href="#gradle配置" class="headerlink" title="gradle配置"></a>gradle配置</h1><p>安装：下载解压后 配置环境变量 GRADLE_HOME</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005104411138.png" alt="image-20201005104411138"></p>
<pre><code>* Gradle user home 是gradle仓库路径可以指定maven仓库
* Use Gradle from 是gradle安装目录</code></pre>
<p>仓库配置</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005112650898.png" alt="image-20201005112650898"></p>
<p>配置环境变量 使默认使用自己的maven仓库</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005112017438.png" alt="image-20201005112017438"></p>
<h1 id="groovy语法"><a href="#groovy语法" class="headerlink" title="groovy语法"></a>groovy语法</h1><p>参考博客：<a href="https://www.jianshu.com/p/e8dec95c4326">https://www.jianshu.com/p/e8dec95c4326</a></p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005105301348.png" alt="image-20201005105301348"></p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005110619584.png" alt="image-20201005110619584"></p>
<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="创建web工程"><a href="#创建web工程" class="headerlink" title="创建web工程"></a>创建web工程</h1><p>创建一个webapp文件夹 然后在build.gradle中配置</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005121958700.png" alt="image-20201005121958700"></p>
<p>导入依赖</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005122718130.png" alt="image-20201005122718130"></p>
<h1 id="工程的拆分和聚合"><a href="#工程的拆分和聚合" class="headerlink" title="工程的拆分和聚合"></a>工程的拆分和聚合</h1><p>需要把设置放到allprojects中 子模块才能使用 </p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005123707528.png" alt="image-20201005123707528"></p>
<p>子模块只配置自己额为需要的就可以了</p>
<p><img src="/2020/10/02/Gradle/Users\baobingjiang\AppData\Roaming\Typora\typora-user-images\image-20201005123900977.png" alt="image-20201005123900977"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins</title>
    <url>/2020/10/07/Jenkins/</url>
    <content><![CDATA[<h1 id="持续集成及Jenkins介绍"><a href="#持续集成及Jenkins介绍" class="headerlink" title="持续集成及Jenkins介绍"></a>持续集成及Jenkins介绍</h1><h2 id="软件开发生命周期"><a href="#软件开发生命周期" class="headerlink" title="软件开发生命周期"></a><strong>软件开发生命周期</strong></h2><p><img src="/2020/10/07/Jenkins/image-20201007082212395.png" alt="image-20201007082212395"></p>
<pre><code>* 需求分析是第一阶段</code></pre>
<h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a><strong>瀑布模型</strong></h2><p>​    瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁 衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有 其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开 发， 但是已经不适合现在的开发了。</p>
<p><img src="/2020/10/07/Jenkins/image-20201007083426392.png"></p>
<h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a><strong>敏捷开发</strong></h2><p>敏捷开发的核心是迭代开发和增量开发</p>
<p>​    迭代开发：对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大 开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开 发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p>
<p>​    增量开发：软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代</p>
<p>​    敏捷开发的迭代：虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按 照软件工程的方法论，进行正规的流程管理。</p>
<p><img src="/2020/10/07/Jenkins/image-20201007083610059.png"></p>
<p>​    敏捷开发的好处</p>
<pre><code>* 敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照 传统的&quot;瀑布开发模式&quot;，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完 成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后 才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后 面每个月都会有现金流，资金压力就大大减轻了。
* 敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比 较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后 面9栋楼？</code></pre>
<p><img src="/2020/10/07/Jenkins/image-20201007082643153.png" alt="image-20201007082643153"></p>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a><strong>持续集成</strong></h2><p>​    持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。 持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干 之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。 通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归 功于持续集成。</p>
<p>​    持续集成的流程</p>
<p>​    <img src="/2020/10/07/Jenkins/image-20201007084410402.png" alt="image-20201007084410402"></p>
<p>持续集成的组成要素</p>
<ul>
<li>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成 的， 无需人工干预。</li>
<li>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般 使用SVN或Git</li>
<li>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器</li>
</ul>
<p><img src="/2020/10/07/Jenkins/image-20201007083014385.png" alt="image-20201007083014385"></p>
<h1 id="Jenkins安装和持续集成环境配置"><a href="#Jenkins安装和持续集成环境配置" class="headerlink" title="Jenkins安装和持续集成环境配置"></a>Jenkins安装和持续集成环境配置</h1><h2 id="持续集成流程说明"><a href="#持续集成流程说明" class="headerlink" title="持续集成流程说明"></a>持续集成流程说明</h2><p><img src="/2020/10/07/Jenkins/image-20201007085649486.png" alt="image-20201007085649486"></p>
<ul>
<li>首先，开发人员每天进行代码提交，提交到Git仓库</li>
<li>然后，Jenkins作为持续集成工具，使用Git工具到Git仓库拉取代码到集成服务器，再配合JDK， Maven等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新 再执行一次整个流程。</li>
<li>最后，Jenkins把生成的jar或war包分发到测试服务器或者生产服务器，测试人员或用户就可以访问 应用。</li>
</ul>
<h2 id="Gitlab代码托管服务器安装"><a href="#Gitlab代码托管服务器安装" class="headerlink" title="Gitlab代码托管服务器安装"></a>Gitlab代码托管服务器安装</h2><h3 id="gitlab介绍"><a href="#gitlab介绍" class="headerlink" title="gitlab介绍"></a>gitlab介绍</h3><p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的 web服务。</p>
<p>GitLab和GitHub一样属于第三方基于Git开发的作品，免费且开源（基于MIT协议），与Github类似， 可以注册用户，任意提交你的代码，添加SSHKey等等。不同的是，GitLab是可以部署到自己的服务器 上，数据库等一切信息都掌握在自己手上，适合团队内部协作开发，你总不可能把团队内部的智慧总放 在别人的服务器上吧？简单来说可把GitLab看作个人版的GitHub。</p>
<h3 id="gitlab安装"><a href="#gitlab安装" class="headerlink" title="gitlab安装"></a>gitlab安装</h3>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>RuoYi</title>
    <url>/2020/11/09/RuoYi/</url>
    <content><![CDATA[<h1 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h1><h2 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h2><h3 id="initBinder"><a href="#initBinder" class="headerlink" title="initBinder"></a>initBinder</h3><p>@InitBinder:<a href="https://blog.csdn.net/qq_38016931/article/details/82080940">博客1</a>       <a href="https://www.cnblogs.com/lvbinbin2yujie/p/10459303.html">博客2</a></p>
<h3 id="startPage"><a href="#startPage" class="headerlink" title="startPage"></a>startPage</h3><h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><h3 id="toEnum"><a href="#toEnum" class="headerlink" title="toEnum"></a>toEnum</h3><p>isAssignableFrom:<a href="https://blog.csdn.net/qq_36666651/article/details/81215221">博客</a></p>
<h3 id="toStr"><a href="#toStr" class="headerlink" title="toStr"></a>toStr</h3><p>ChatSet:<a href="https://blog.csdn.net/qq_36691683/article/details/81608244?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242">博客</a></p>
<h2 id="ServletUtils"><a href="#ServletUtils" class="headerlink" title="ServletUtils"></a>ServletUtils</h2><h3 id="getRequestAttributes"><a href="#getRequestAttributes" class="headerlink" title="getRequestAttributes"></a>getRequestAttributes</h3><p>RequestContextHolder:<a href="https://blog.csdn.net/asdfsadfasdfsa/article/details/79158459">博客1</a>,<a href="https://www.jianshu.com/p/3a3dc1c9bf4c">博客2</a></p>
<h3 id="isAjaxRequest"><a href="#isAjaxRequest" class="headerlink" title="isAjaxRequest"></a>isAjaxRequest</h3><p>X-Requested-With:<a href="https://blog.csdn.net/jokeMqc/article/details/78739677">博客</a></p>
<p>规定uri中有xml和json是异步请求</p>
<p><img src="/2020/11/09/RuoYi/ruoyi%5Cimage-20201110091906045.png" alt="image-20201110091906045"></p>
<h2 id="StrFormatter"><a href="#StrFormatter" class="headerlink" title="StrFormatter"></a>StrFormatter</h2><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>只是大概了解了一下 以后仔细研究这个类的原理</p>
<h2 id="IpUitls"><a href="#IpUitls" class="headerlink" title="IpUitls"></a>IpUitls</h2><h3 id="getIpAddr"><a href="#getIpAddr" class="headerlink" title="getIpAddr"></a>getIpAddr</h3><p>代理http请求获取客户端IP:<a href="https://blog.csdn.net/fengwind1/article/details/51992528">https://blog.csdn.net/fengwind1/article/details/51992528</a></p>
<h2 id="ExcelUitls"><a href="#ExcelUitls" class="headerlink" title="ExcelUitls"></a>ExcelUitls</h2><h3 id="getCellValue"><a href="#getCellValue" class="headerlink" title="getCellValue"></a>getCellValue</h3><p>判断是否为小数 </p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if ((<span class="name">Double</span>) val % <span class="number">1</span> &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>使用DecimalFormat可以将数字进行格式化 <a href="https://www.cnblogs.com/Small-sunshine/p/11648652.html">参考博客</a></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">DecimalFormat(<span class="string">&quot;0&quot;</span>)</span>.format(<span class="keyword">val</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h1>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus</title>
    <url>/2020/09/29/MyBatisPlus/</url>
    <content><![CDATA[<p>官方文档：<a href="https://baomidou.com/guide/">https://baomidou.com/guide/</a>!</p>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>根据 ‘快速开始’ 创建一个项目：mybatisplus导入jar包 编写配置文件配置数据库和日志 </p>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p>分布式系统唯一id生成:<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p>
<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p>
<h2 id="TableId"><a href="#TableId" class="headerlink" title="@TableId@"></a>@TableId@</h2><p>IdType的五种类型：默认使用ID_WORKER</p>
<p><img src="/2020/09/29/MyBatisPlus/picture1.png"></p>
<h1 id="自动填充处理"><a href="#自动填充处理" class="headerlink" title="自动填充处理"></a>自动填充处理</h1><p>为数据库增加两个字段：createTime , updateTime</p>
<p>要想每次改动数据的时候在不改动数据库的情况下更新updateTime 要使用自动填充处理</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929140911315.png" alt="image-20200929140911315"></p>
<p>编写处理器</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929140945423.png" alt="image-20200929140945423"></p>
<h1 id="乐观锁处理"><a href="#乐观锁处理" class="headerlink" title="乐观锁处理"></a>乐观锁处理</h1><p>乐观锁和悲观锁</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929141826733.png" alt="image-20200929141826733"></p>
<p>乐观锁实现方式</p>
<p>​    <img src="/2020/09/29/MyBatisPlus/image-20200929141852871.png" alt="image-20200929141852871"></p>
<p>为表增加一个verison字段  为实体类上的version字段增加一个注解@version 并创建一个配置类注册组件</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929142342863.png" alt="image-20200929142342863"></p>
<p>单线程下乐观锁会成功 但是多线程就会失败：下图中kuangshen222先更新 version改变 kuangshen111就会更新失败</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929142617924.png" alt="image-20200929142617924"></p>
<p>​    </p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>批量查询</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929143320577.png" alt="image-20200929143320577"></p>
<p>条件查询map</p>
<p>​    <img src="/2020/09/29/MyBatisPlus/image-20200929143614581.png" alt="image-20200929143614581"></p>
<p>分页查询</p>
<p>​    在配置类中添加分页插件</p>
<p>​    <img src="/2020/09/29/MyBatisPlus/image-20200929145011277.png" alt="image-20200929145011277"></p>
<p>​    <img src="/2020/09/29/MyBatisPlus/image-20200929144205836.png" alt="image-20200929144205836"></p>
<h1 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h1><p>表中增加一个字段 isDeleted 实体类中为该字段添加一个注解@TableLogic</p>
<p>在配置类中添加逻辑删除组件</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929145034277.png" alt="image-20200929145034277"></p>
<p>在application.properties中进行配置</p>
<p>​    <img src="/2020/09/29/MyBatisPlus/image-20200929145103453.png" alt="image-20200929145103453"></p>
<p>执行deleteById测试 发现本质是执行了更新操作 把isDeleted字段从0改为1</p>
<p>查询的时候会自动过滤被逻辑删除的字段</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929145430051.png" alt="image-20200929145430051"></p>
<h1 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h1><p>作用：性能分析拦截器 用于输出每条sql语句及其执行时间</p>
<p>在配置类中添加插件</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929153756376.png" alt="image-20200929153756376"></p>
<h1 id="条件查询器Wrapper"><a href="#条件查询器Wrapper" class="headerlink" title="条件查询器Wrapper"></a>条件查询器Wrapper</h1><p>参考文档：<a href="https://baomidou.com/guide/wrapper.html#abstractwrapper">https://baomidou.com/guide/wrapper.html#abstractwrapper</a></p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929154932994.png" alt="image-20200929154932994"></p>
<p>查询名字中不含e并且邮箱以t开头</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929155548407.png" alt="image-20200929155548407"></p>
<p>子查询</p>
<p><img src="/2020/09/29/MyBatisPlus/image-20200929155722390.png" alt="image-20200929155722390"></p>
<h1 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h1><p><a href="https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">https://baomidou.com/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B</a></p>
<p>​    </p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo</title>
    <url>/2020/10/03/dubbo/</url>
    <content><![CDATA[<p>分布式系统是若干个独立计算机的集合  dubbo可以管理分布式系统使其有条不紊的运行</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>概念</p>
<p><img src="/2020/10/03/dubbo/picture.png" alt="image-20201003085554523"></p>
<p>原理</p>
<p>​    <img src="/2020/10/03/dubbo/image-20201003085614338.png" alt="image-20201003085614338"></p>
<p>​    <img src="/2020/10/03/dubbo/image-20201003085644500.png" alt="image-20201003085644500"></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="注册中心zookeeper"><a href="#注册中心zookeeper" class="headerlink" title="注册中心zookeeper"></a>注册中心zookeeper</h2><p>下载zookeeper 解压</p>
<p>bin目录下zkCli.cmd是客户端 zkServer.cmd是服务端 点击启动</p>
<p><img src="/2020/10/03/dubbo/image-20201003101002534.png" alt="image-20201003101002534"></p>
<h2 id="管理控制台"><a href="#管理控制台" class="headerlink" title="管理控制台"></a>管理控制台</h2><p>dubbo-admin-0.0.1-SNAPSHOT.jar</p>
<p>在github上下载dubbo-admin压缩包 解压之后是一个maven项目 修改类路径下的application.properties</p>
<p>​    <img src="/2020/10/03/dubbo/image-20201003102539890.png" alt="image-20201003102539890"></p>
<p>在项目路径下 的cmd窗口输入 mvn clean package 清理并打包</p>
<p>运行dubbo-admin-0.0.1-SNAPSHOT包 并访问7001端口（zookeeper服务必须开启） 账号名和密码都是root</p>
<h2 id="创建生产者和消费者工程"><a href="#创建生产者和消费者工程" class="headerlink" title="创建生产者和消费者工程"></a>创建生产者和消费者工程</h2><p>project:dubbo</p>
<p>通用类和接口放在interface模块下 具体实现放在provider和consumer下 </p>
<p><img src="/2020/10/03/dubbo/image-20201003113328742.png" alt="image-20201003113328742"></p>
<p><img src="/2020/10/03/dubbo/image-20201003113350737.png" alt="image-20201003113350737"></p>
<p><img src="/2020/10/03/dubbo/image-20201003113208831.png" alt="image-20201003113208831"></p>
<p>OrderService和UserService不在同一个项目下 需要远程调用 用dubbo改造项目</p>
<h2 id="provicde配置"><a href="#provicde配置" class="headerlink" title="provicde配置"></a>provicde配置</h2><p>导入jar包</p>
<p><img src="/2020/10/03/dubbo/image-20201003125107091.png" alt="image-20201003125107091"></p>
<p>用spring配置声名暴露服务</p>
<p><img src="/2020/10/03/dubbo/image-20201003132621672.png" alt="image-20201003132621672"></p>
<h2 id="consumer配置"><a href="#consumer配置" class="headerlink" title="consumer配置"></a>consumer配置</h2><p>导入jar包</p>
<p>让服务消费者去注册中心订阅服务提供者的服务地址</p>
<p><img src="/2020/10/03/dubbo/image-20201003134807033.png" alt="image-20201003134807033"></p>
<p>注入</p>
<p><img src="/2020/10/03/dubbo/image-20201003134817116.png" alt="image-20201003134817116"></p>
<h1 id="监控中心"><a href="#监控中心" class="headerlink" title="监控中心"></a>监控中心</h1><p>dubbo-monitor-simple-2.0.0</p>
<p>配置文件</p>
<p><img src="/2020/10/03/dubbo/image-20201003144855619.png" alt="image-20201003144855619"></p>
<p>单机bin目录下的start.bat启动 访问8080端口</p>
<p>在消费方 服务方的spring配置文件中配置</p>
<p><img src="/2020/10/03/dubbo/image-20201003144528060.png" alt="image-20201003144528060"></p>
<p><img src="/2020/10/03/dubbo/image-20201003145015126.png" alt="image-20201003145015126"></p>
<h1 id="整合springboot"><a href="#整合springboot" class="headerlink" title="整合springboot"></a>整合springboot</h1><h2 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h2><p>创建boot-provider(普通)和一个boot-consumer(web) 把实现类从上一个项目复制过去 在consumer中创建一个controller</p>
<p><img src="/2020/10/03/dubbo/image-20201003160554779.png" alt="image-20201003160554779"></p>
<p>在provider中添加依赖</p>
<p><img src="/2020/10/03/dubbo/image-20201003160612955.png" alt="image-20201003160612955"></p>
<p>配置</p>
<p><img src="/2020/10/03/dubbo/image-20201003161355501.png" alt="image-20201003161355501"></p>
<p>使用dubbo的@service注解可以暴露服务</p>
<p><img src="/2020/10/03/dubbo/image-20201003161421552.png" alt="image-20201003161421552"></p>
<p>如果启动后出现这个错误  重启zookeeper服务</p>
<p><img src="https://img-blog.csdn.net/20180505100759686?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1OTI2NDkyNjQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><p>配置</p>
<p><img src="/2020/10/03/dubbo/image-20201003162151252.png" alt="image-20201003162151252"></p>
<p>使用@Reference</p>
<p><img src="/2020/10/03/dubbo/image-20201003162133422.png" alt="image-20201003162133422"></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>官方文档：<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/preflight-check.html">http://dubbo.apache.org/zh-cn/docs/user/demos/preflight-check.html</a></p>
<h2 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h2><p><img src="/2020/10/03/dubbo/image-20201003214740431.png" alt="image-20201003214740431"></p>
<h2 id="超时-amp-配置覆盖关系"><a href="#超时-amp-配置覆盖关系" class="headerlink" title="超时&amp;配置覆盖关系"></a>超时&amp;配置覆盖关系</h2><p>超时配置是timeout 默认是1000ms</p>
<p>不同粒度配置的覆盖关系</p>
<p><img src="/2020/10/03/dubbo/image-20201003215858136.png" alt="image-20201003215858136"></p>
<h2 id="重试次数"><a href="#重试次数" class="headerlink" title="重试次数"></a>重试次数</h2><p>retries 不包含第一次调用 仅在集群的值是故障回复/故障转移时才有效</p>
<p><img src="/2020/10/03/dubbo/image-20201005074539130.png" alt="image-20201005074539130"></p>
<p><img src="/2020/10/03/dubbo/image-20201005074704258.png" alt="image-20201005074704258"></p>
<h2 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h2><p><img src="/2020/10/03/dubbo/image-20201005075137450.png" alt="image-20201005075137450"></p>
<p>​        * 随机指定版本</p>
<h2 id="本地存根"><a href="#本地存根" class="headerlink" title="本地存根"></a>本地存根</h2><p><img src="/2020/10/03/dubbo/image-20201005080404592.png" alt="image-20201005080404592"></p>
<p><img src="/2020/10/03/dubbo/image-20201005080448146.png" alt="image-20201005080448146"></p>
<p><img src="/2020/10/03/dubbo/image-20201005080500196.png" alt="image-20201005080500196"></p>
<h2 id="与springboot整合的其他方式"><a href="#与springboot整合的其他方式" class="headerlink" title="与springboot整合的其他方式"></a>与springboot整合的其他方式</h2><p>1.之前的方式不能精确到方法配置 可以保留配置文件 在启动类上增加注解<code>@ImportResource(location=&quot;classpath:provider.xml&quot;)</code> </p>
<p>​    这种方式就不需要@Service和 @Reference</p>
<p>2.将每一个组件手动创建到容器中</p>
<p><img src="/2020/10/03/dubbo/image-20201005081447160.png" alt="image-20201005081447160"></p>
<h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><h2 id="zookeeper宕机"><a href="#zookeeper宕机" class="headerlink" title="zookeeper宕机"></a>zookeeper宕机</h2><p>zookeeper注册中心宕机 consumer还可以消费dubbo暴露的服务</p>
<p><img src="/2020/10/03/dubbo/image-20201005082351738.png" alt="image-20201005082351738"></p>
<h2 id="dubbo直连"><a href="#dubbo直连" class="headerlink" title="dubbo直连"></a>dubbo直连</h2><p>没有注册中心依然可以调取服务</p>
<p><img src="/2020/10/03/dubbo/image-20201005082615417.png" alt="image-20201005082615417"></p>
<h2 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h2><p>Random LoadBalance（基于权重的随机）:默认方式</p>
<p><img src="/2020/10/03/dubbo/image-20201005082847044.png" alt="image-20201005082847044"></p>
<p>RoundRobin LoadBalance(基于权重的轮询)</p>
<p><img src="/2020/10/03/dubbo/image-20201005082906629.png" alt="image-20201005082906629"></p>
<p>LeastActive LoadBalance：选择耗时最少的provider</p>
<p><img src="/2020/10/03/dubbo/image-20201005083232665.png" alt="image-20201005083232665"></p>
<p>ConsistenHash LoadBalance</p>
<p><img src="/2020/10/03/dubbo/image-20201005083339198.png" alt="image-20201005083339198"></p>
<p>配置</p>
<p><img src="/2020/10/03/dubbo/image-20201005083836390.png" alt="image-20201005083836390"></p>
<p><img src="/2020/10/03/dubbo/image-20201005083845336.png" alt="image-20201005083845336"></p>
<h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>什么是服务降级？</p>
<p><img src="/2020/10/03/dubbo/image-20201005093234276.png" alt="image-20201005093234276"></p>
<p>降级规则</p>
<p><img src="/2020/10/03/dubbo/image-20201005093326087.png" alt="image-20201005093326087"></p>
<p>zookeeper的消费者配置的屏蔽和容错设置分别对应上面的两个降级规则</p>
<p><img src="/2020/10/03/dubbo/image-20201005093336789.png" alt="image-20201005093336789"></p>
<h2 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h2><p>集群容错模式</p>
<p><img src="/2020/10/03/dubbo/image-20201005093731718.png" alt="image-20201005093731718"></p>
<p>设置：默认是failfast</p>
<p><img src="/2020/10/03/dubbo/image-20201005093817312.png" alt="image-20201005093817312"></p>
<h3 id="整合hystrix"><a href="#整合hystrix" class="headerlink" title="整合hystrix"></a>整合hystrix</h3><p><img src="/2020/10/03/dubbo/image-20201005094012294.png" alt="image-20201005094012294"></p>
<p>导入jar包 在主启动类上开启Hystrix<br>`<dependency><br>    <groupId>org.springframework.cloud</groupId><br>    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId><br>    <version>2.2.2.RELEASE</version></dependency></p>
<p>在provider方法上增加@HystrixCommand </p>
<p><img src="/2020/10/03/dubbo/image-20201005100352842.png" alt="image-20201005100352842"></p>
<p>在consumer上增加@HystrixCommand(fallbackMethod = “hello”)</p>
<p><img src="/2020/10/03/dubbo/image-20201005100816469.png" alt="image-20201005100816469"></p>
<p>出错后会调用hello方法</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客无法显示图片解决方法</title>
    <url>/2020/09/29/hexo%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>安装hexo-asset-image <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<p>安装后 用hexo创建文章就会多出一个同名文件夹 把图片放在这个文件夹中 使用 <code>![](同名文件夹/logo.jpg) </code>就可以插入图片 </p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>idea-debug</title>
    <url>/2020/10/06/idea-debug/</url>
    <content><![CDATA[<p>项目：debug_demo</p>
<h4 id="01-Debug简介和意义"><a href="#01-Debug简介和意义" class="headerlink" title="01_Debug简介和意义"></a>01_Debug简介和意义</h4><ul>
<li><p>什么是程序DeBug？</p>
<ul>
<li><p>Debug，是程序开发人员必会的一项调试程序的技能。</p>
</li>
<li><p>企业中程序开发和程序调试的比例为1:1.5，可以说如果你不会调试程序，你就没有办法从事编程工作。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>Debug能帮助我们做什么？<ol>
<li>追踪代码的运行流程。</li>
<li>程序运行异常定位。</li>
<li>线上问题追踪。</li>
</ol>
</li>
</ul>
<ul>
<li><p>Debug对于程序学习者的意义</p>
<ol>
<li>通过调试能够更好的查看程序的执行流程。</li>
<li>复杂的程序逻辑，通过老师的口述讲解，很难理解清楚，这个时候借助调试能够很好的帮助同学们理解程序。</li>
<li>定位问题，提高自我解决问题的能力。</li>
</ol>
</li>
</ul>
<h4 id="02-IDEA中的Debug步骤"><a href="#02-IDEA中的Debug步骤" class="headerlink" title="02_IDEA中的Debug步骤"></a>02_IDEA中的Debug步骤</h4><ul>
<li><p>设置断点（F9）</p>
</li>
<li><p>调试程序（8个按钮）</p>
<p><img src="/2020/10/06/idea-debug/2019-09-28_162216.jpg"></p>
<table>
<thead>
<tr>
<th>按钮</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_163744.jpg"></td>
<td>(Alt + F10)：如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164022.jpg"></td>
<td>(F8)：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_162345.jpg?lastModify=1569659273?lastModify=1569659273" alt="img"></td>
<td>(F7)：步入。如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164200.jpg"></td>
<td>(Alt + Shift + F7)：强       制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164215.jpg"></td>
<td>(Shift + F8)：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164428.jpg"></td>
<td>回退断点。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164418.jpg"></td>
<td>(Alt + F9)：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</td>
</tr>
<tr>
<td><img src="/2020/10/06/idea-debug/2019-09-28_164437.jpg"></td>
<td>(Alt + F8)：计算表达式。</td>
</tr>
</tbody></table>
</li>
<li><p>观察变量</p>
<ul>
<li>查看变量有三种方式：<ul>
<li>程序区查看变量</li>
<li>Debugger的Variables中查看变量</li>
<li>鼠标悬停到变量名上会弹出当前变量的值</li>
</ul>
</li>
</ul>
<p><img src="/2020/10/06/idea-debug/2019-09-28_165050.jpg"></p>
</li>
<li><p>查看输出</p>
</li>
</ul>
<h4 id="03-跳转到当前代码执行的行"><a href="#03-跳转到当前代码执行的行" class="headerlink" title="03_跳转到当前代码执行的行"></a>03_跳转到当前代码执行的行</h4><ul>
<li><p>跳转到当前代码执行的行（Alt + F10）<img src="/2020/10/06/idea-debug/debug/images/2019-09-28_163744.jpg"></p>
</li>
<li><p>作用</p>
<ul>
<li>使程序窗口切换到当前正在运行的程序处。</li>
</ul>
</li>
</ul>
<h4 id="04-步过调试的使用"><a href="#04-步过调试的使用" class="headerlink" title="04_步过调试的使用"></a>04_步过调试的使用</h4><ul>
<li>步过调试<ul>
<li>步过调试按钮（F8）<img src="/2020/10/06/idea-debug/2019-09-28_164022.jpg"></li>
</ul>
</li>
<li>作用<ul>
<li>步过，一行一行地往下走，如果这一行上有方法不会进入方法。</li>
<li>常用于调试过程中不想进入调用的方法体的情况。</li>
</ul>
</li>
</ul>
<h4 id="05-步入调试的使用"><a href="#05-步入调试的使用" class="headerlink" title="05_步入调试的使用"></a>05_步入调试的使用</h4><ul>
<li><p>步入调试</p>
<ul>
<li>步过调试按钮（F7）<img src="/2020/10/06/idea-debug/2019-09-28_162345.jpg"></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>步入，一行一行地往下走，如果这一行上有方法，则进入方法内部。</p>
</li>
<li><p>一般用于进入自定义方法内，不会进入官方类库的方法。</p>
</li>
</ul>
</li>
</ul>
<h4 id="06-强制步入调试的使用"><a href="#06-强制步入调试的使用" class="headerlink" title="06_强制步入调试的使用"></a>06_强制步入调试的使用</h4><ul>
<li><p>强制步入调试</p>
<ul>
<li>强制步入调试按钮（Alt + Shift + F7）<img src="/2020/10/06/idea-debug/debug/images/2019-09-28_164200.jpg"></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>进入官方类库方法</p>
</li>
<li><p>帮助我们学习和查看JDK源码</p>
</li>
</ul>
</li>
</ul>
<h4 id="07-步出调试的使用"><a href="#07-步出调试的使用" class="headerlink" title="07_步出调试的使用"></a>07_步出调试的使用</h4><ul>
<li><p>步出调试</p>
<ul>
<li>步出调试按钮（Shift + F8）<img src="/2020/10/06/idea-debug/2019-09-28_164215.jpg"></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>从方法内退出到方法调用处。</li>
<li>调试的时候，有时候会跳入到自己不想查看的方法体，这个时候使用步出。</li>
</ul>
</li>
</ul>
<h4 id="08-回退断点调试的使用"><a href="#08-回退断点调试的使用" class="headerlink" title="08_回退断点调试的使用"></a>08_回退断点调试的使用</h4><ul>
<li><p>回退断点</p>
<ul>
<li>回退断点按钮 <img src="/2020/10/06/idea-debug/2019-09-28_164428.jpg"></li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li><p>回退到当前方法的调用处。</p>
</li>
<li><p>当想重新查看该方法体的执行过程时，不用重新启动Debug，可以使用回退断点方式。</p>
</li>
</ul>
</li>
</ul>
<h4 id="09-运行到光标处"><a href="#09-运行到光标处" class="headerlink" title="09_运行到光标处"></a>09_运行到光标处</h4><ul>
<li>运行到光标处<ul>
<li>运行光标处按钮 （F9）<img src="/2020/10/06/idea-debug/2019-09-28_164418.jpg"></li>
<li>作用<ul>
<li>使程序运行到光标处，而无需设置断点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="10-计算表达式"><a href="#10-计算表达式" class="headerlink" title="10_计算表达式"></a>10_计算表达式</h4><ul>
<li><p>计算表达式</p>
<ul>
<li><p>计算表达式按钮（Alt + F8）<img src="/2020/10/06/idea-debug/2019-09-28_164437.jpg"></p>
<p><img src="/2020/10/06/idea-debug/2019-10-03_182159.jpg"></p>
</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>设置变量，在计算表达式的框里，可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了。 </li>
</ul>
</li>
</ul>
<h4 id="11-条件断点"><a href="#11-条件断点" class="headerlink" title="11_条件断点"></a>11_条件断点</h4><ul>
<li><p>条件断点</p>
<ul>
<li><p>右键单击断点处，可以设置进入断点的条件</p>
<p><img src="/2020/10/06/idea-debug/2019-10-03_182101.jpg"></p>
</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>通过设置断点条件，在满足条件时，才停在断点处，否则直接运行。</li>
</ul>
</li>
</ul>
<h4 id="12-多线程调试"><a href="#12-多线程调试" class="headerlink" title="12_多线程调试"></a>12_多线程调试</h4><ul>
<li><p>步骤</p>
<ul>
<li><p>多线程调试，需要调整断点挂起级别为Thread</p>
<p><img src="/2020/10/06/idea-debug/2019-10-05_164127.jpg"></p>
</li>
<li><p>Frame中选择线程进行调试</p>
</li>
</ul>
</li>
</ul>
<h4 id="13-其他调试功能"><a href="#13-其他调试功能" class="headerlink" title="13_其他调试功能"></a>13_其他调试功能</h4><p><img src="/2020/10/06/idea-debug/image-20201006203423905.png" alt="image-20201006203423905"></p>
]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro</title>
    <url>/2020/10/06/shiro/</url>
    <content><![CDATA[<p>项目springboot_shiro</p>
<h1 id="shiro结构"><a href="#shiro结构" class="headerlink" title="shiro结构"></a>shiro结构</h1><p>我们从外部来看 Shiro ，即从应用程序角度的来观察如何使用 Shiro 完成工作。如下图</p>
<p><img src="https://img-blog.csdnimg.cn/20181213154817949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzE3ODc0,size_16,color_FFFFFF,t_70" alt="img"></p>
<p><strong>Subject</strong>：主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p>
<p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p>
<p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p>
<p>也就是说对于我们而言，最简单的一个 Shiro 应用：</p>
<ol>
<li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li>
<li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li>
</ol>
<p>接下来我们来从 Shiro 内部来看下 Shiro 的架构，如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20181213154830844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzE3ODc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的 “用户”；</p>
<p><strong>SecurityManager</strong>：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</p>
<p><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p>
<p><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p>
<p><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的 Realm；</p>
<p><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所有呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</p>
<p><strong>SessionDAO</strong>：DAO 大家都用过，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</p>
<p><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</p>
<p><strong>Cryptography</strong>：密码模块，Shiro 提高了一些常见的加密组件用于如密码加密 / 解密的。</p>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>项目结构</p>
<p><img src="/2020/10/06/shiro/image-20201006161853536.png" alt="image-20201006161853536"></p>
<p>导入jar包</p>
<p><img src="/2020/10/06/shiro/image-20201006153321421.png" alt="image-20201006153321421"></p>
<p>自定义一个Realm类 </p>
<p>​    <img src="/2020/10/06/shiro/image-20201006162155299.png" alt="image-20201006162155299"></p>
<p>Realm：域，Shiro 从从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。如我们之前的 ini 配置方式将使用 org.apache.shiro.realm.text.IniRealm。</p>
<p>创建shiro配置类 并关联realm</p>
<p>​    <img src="/2020/10/06/shiro/image-20201006162504250.png" alt="image-20201006162504250"></p>
<p>​    <img src="/2020/10/06/shiro/image-20201006162530557.png" alt="image-20201006162530557"></p>
<p>在shiroConfig中创建ShiroFilterFactoryBean 进行拦截管理</p>
<p>​    <img src="/2020/10/06/shiro/image-20201006162753478.png" alt="image-20201006162753478"></p>
<p><img src="/2020/10/06/shiro/image-20201006162808378.png" alt="image-20201006162808378"></p>
<p>编写用户登录功能</p>
<p>​    <img src="/2020/10/06/shiro/image-20201006163818864.png" alt="image-20201006163818864"></p>
<h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><p>创建一个数据库shiro  创建一个表USER</p>
<p>在application.properties中配置</p>
<p><img src="/2020/10/06/shiro/image-20201006175948173.png"></p>
<p>创建实体类user  创建mapper和对应的xml 创建UserService</p>
<p>在UserRealm中增加认证逻辑</p>
<p><img src="/2020/10/06/shiro/image-20201006180209044.png" alt="image-20201006180209044"></p>
<h1 id="实现用户授权"><a href="#实现用户授权" class="headerlink" title="实现用户授权"></a>实现用户授权</h1><p>ShiroConfig</p>
<p><img src="/2020/10/06/shiro/image-20201006181522290.png" alt="image-20201006181522290"></p>
<p>UesrRealm</p>
<p><img src="/2020/10/06/shiro/image-20201006181737847.png" alt="image-20201006181737847"></p>
<p>管理数据库进行动态授权：为user增加一个字段perm</p>
<p><img src="/2020/10/06/shiro/image-20201006182210324.png" alt="image-20201006182210324"></p>
<p>修改授权逻辑</p>
<p><img src="/2020/10/06/shiro/image-20201006182244423.png" alt="image-20201006182244423"></p>
<h1 id="Thymeleaf整合shiro权限标签"><a href="#Thymeleaf整合shiro权限标签" class="headerlink" title="Thymeleaf整合shiro权限标签"></a>Thymeleaf整合shiro权限标签</h1><p>使不同权限的用户 看到的内容不同</p>
<p>导入jar包</p>
<p><img src="/2020/10/06/shiro/image-20201006183216157.png" alt="image-20201006183216157"></p>
<p>在shiroConfig中配置ShiroDialect，用于thymeleaf和shiro标签配合使用</p>
<p><img src="/2020/10/06/shiro/image-20201006183234292.png" alt="image-20201006183234292"></p>
<p>修改test.html</p>
<p><img src="/2020/10/06/shiro/image-20201006183309081.png" alt="image-20201006183309081"></p>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticSearch笔记</title>
    <url>/2020/11/14/elasticSearch%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h1><p>首先在docker中部署好es和kibana</p>
<p>在es中添加ik分词器插件:elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.1/e">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.1/e</a></p>
<p>重启es：docker restart id</p>
<h1 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">PUT <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/customer/</span>_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p><strong>搜索所有字段并排序</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>limit</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123; &quot;account_number&quot;: &quot;asc&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 10,</span><br><span class="line">  &quot;size&quot;: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索指定字段： searches the <code>address</code> field to find customers whose addresses contain <code>mill</code> or <code>lane</code></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;address&quot;: &quot;mill lane&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>搜索整个字段而不是词条</strong>：Only matches addresses that contain the phrase <code>mill lane</code></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_phrase&quot;: &#123; &quot;address&quot;: &quot;mill lane&quot; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用bool条件查询</strong>：should,must,must not</p>
<p>For example, the following request searches the <code>bank</code> index for accounts that belong to customers who are 40 years old, but excludes anyone who lives in Idaho (ID)</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;age&quot;: &quot;40&quot; &#125; &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;state&quot;: &quot;ID&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>bool查询中也可以使用filter进行筛选</strong></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;range&quot;: &#123;</span><br><span class="line">          &quot;balance&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;: 20000,</span><br><span class="line">            &quot;lte&quot;: 30000</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>基本使用</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123; #指定结果名称</span><br><span class="line">      &quot;terms&quot;: &#123; #指定聚合方法</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子聚合</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;average_balance&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在聚合中排序</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;group_by_state&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;state.keyword&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;average_balance&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;average_balance&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;balance&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Data-ElasticSearch"><a href="#Spring-Data-ElasticSearch" class="headerlink" title="Spring Data ElasticSearch"></a>Spring Data ElasticSearch</h1><p>导入jar包并修改版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springboot 的版本2.x会报错</p>
<p>创建配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;192.168.52.131&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="狂神"><a href="#狂神" class="headerlink" title="狂神"></a>狂神</h2><h3 id="关于索引的API操作"><a href="#关于索引的API操作" class="headerlink" title="关于索引的API操作"></a>关于索引的API操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">creatIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//索引的创建</span></span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    AcknowledgedResponse delete = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于文档的API操作"><a href="#关于文档的API操作" class="headerlink" title="关于文档的API操作"></a>关于文档的API操作</h3><p>创建一个pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;item&quot;,shards = 1, replicas = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">// 分类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brand; <span class="comment">// 品牌</span></span><br><span class="line">	<span class="comment">//index默认为ture 如果不想索引该值可以设置为false</span></span><br><span class="line">    <span class="meta">@Field(index = false,type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Double price; <span class="comment">// 价格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> addDocument() throws IOException &#123;</span><br><span class="line">    Good good = <span class="built_in">new</span> Good(<span class="number">1</span>L,&quot;测试商品&quot;,&quot;手机&quot;,&quot;apple&quot;,<span class="number">1000.0</span>);</span><br><span class="line">    IndexRequest request = <span class="built_in">new</span> IndexRequest(&quot;good&quot;);</span><br><span class="line">    request.id(&quot;1&quot;);</span><br><span class="line">    request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    //将我们的数据利用fastjson转换成<span class="type">json</span>并放入请求</span><br><span class="line">    request.source(<span class="type">JSON</span>.toJSONString(good), XContentType.JSON);</span><br><span class="line">    IndexResponse response = restHighLevelClient.<span class="keyword">index</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.toString());</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest request = <span class="built_in">new</span> GetRequest(&quot;good&quot;,&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="keyword">exists</span> = restHighLevelClient.<span class="keyword">exists</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">exists</span>)&#123;</span><br><span class="line">        GetResponse response = restHighLevelClient.<span class="keyword">get</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.getSourceAsString());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">exists</span>);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> deleteDocument() throws IOException &#123;</span><br><span class="line">    DeleteRequest request = <span class="built_in">new</span> DeleteRequest(&quot;good&quot;,&quot;1&quot;);</span><br><span class="line">    DeleteResponse response= restHighLevelClient.<span class="keyword">delete</span>(request, RequestOptions.<span class="keyword">DEFAULT</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(response.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="批量处理数据"><a href="#批量处理数据" class="headerlink" title="批量处理数据"></a>批量处理数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">    ArrayList&lt;Good&gt; goods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">1L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">2L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">3L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">4L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    goods.add(<span class="keyword">new</span> Good(<span class="number">5L</span>,<span class="string">&quot;测试商品&quot;</span>,<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;goods.size();i++)&#123;</span><br><span class="line">        request.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;good&quot;</span>).id(<span class="string">&quot;&quot;</span>+(i+<span class="number">1</span>)).source(JSON.toJSONString(goods.get(i)),XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    BulkResponse response = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.hasFailures());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;测试商品&quot;</span>);</span><br><span class="line"><span class="comment">//        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">for</span>(SearchHit documentFields:searchResponse.getHits().getHits())&#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="黑马"><a href="#黑马" class="headerlink" title="黑马"></a>黑马</h2><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="新增和更新"><a href="#新增和更新" class="headerlink" title="新增和更新"></a>新增和更新</h4><p>Spring Data 的强大之处，就在于你不用写任何DAO处理，自动根据方法名或类的信息进行CRUD操作。只要你定义一个接口，然后继承Repository提供的一些子接口，就能具备各种基本的CRUD功能。</p>
<p>我们只需要定义接口，然后继承它就OK了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Good</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增和批量新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Good good = <span class="keyword">new</span> Good(<span class="number">10L</span>, <span class="string">&quot;小米手机7&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3499.00</span>);</span><br><span class="line">    goodRepository.save(good);</span><br><span class="line">    List&lt;Good&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(good);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Good&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Good(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Good(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot; 手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    goodRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Good&gt; optional = goodRepository.findById(<span class="number">1l</span>);</span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 查询全部，并按照价格降序排序</span></span><br><span class="line">    Iterable&lt;Good&gt; items = goodRepository.findAll(Sort.by(Sort.Direction.DESC, <span class="string">&quot;price&quot;</span>));</span><br><span class="line">    items.forEach(good -&gt; System.out.println(good));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h4><p>Spring Data 的另一个强大功能，是根据方法名称自动实现功能。</p>
<p>比如：你的方法名叫做：findByTitle，那么它就知道你是根据title查询，然后自动帮你完成，无需写实现类。</p>
<p>当然，方法名称要符合一定的约定：</p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>Sample</th>
<th>Elasticsearch Query String</th>
</tr>
</thead>
<tbody><tr>
<td><code>And</code></td>
<td><code>findByNameAndPrice</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Or</code></td>
<td><code>findByNameOrPrice</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Is</code></td>
<td><code>findByName</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Not</code></td>
<td><code>findByNameNot</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Between</code></td>
<td><code>findByPriceBetween</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>LessThanEqual</code></td>
<td><code>findByPriceLessThan</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>GreaterThanEqual</code></td>
<td><code>findByPriceGreaterThan</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Before</code></td>
<td><code>findByPriceBefore</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>After</code></td>
<td><code>findByPriceAfter</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Like</code></td>
<td><code>findByNameLike</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>StartingWith</code></td>
<td><code>findByNameStartingWith</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>EndingWith</code></td>
<td><code>findByNameEndingWith</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Contains/Containing</code></td>
<td><code>findByNameContaining</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>In</code></td>
<td><code>findByNameIn(Collection&lt;String&gt;names)</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>NotIn</code></td>
<td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>Near</code></td>
<td><code>findByStoreNear</code></td>
<td><code>Not Supported Yet !</code></td>
</tr>
<tr>
<td><code>True</code></td>
<td><code>findByAvailableTrue</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>False</code></td>
<td><code>findByAvailableFalse</code></td>
<td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : false&#125;&#125;&#125;&#125;</code></td>
</tr>
<tr>
<td><code>OrderBy</code></td>
<td><code>findByAvailableTrueOrderByNameDesc</code></td>
<td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td>
</tr>
</tbody></table>
<p>例如，我们来按照价格区间查询，定义这样的一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Item</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据价格区间查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> price2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Item&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> price1, <span class="keyword">double</span> price2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后添加一些测试数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">indexList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">1L</span>, <span class="string">&quot;小米手机7&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3299.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">4L</span>, <span class="string">&quot;小米Mix2S&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">4299.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Item(<span class="number">5L</span>, <span class="string">&quot;荣耀V10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">2799.00</span>, <span class="string">&quot;http://image.leyou.com/13123.jpg&quot;</span>));</span><br><span class="line">    <span class="comment">// 接收对象集合，实现批量新增</span></span><br><span class="line">    itemRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>不需要写实现类，然后我们直接去运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryByPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Item&gt; list = <span class="keyword">this</span>.itemRepository.findByPriceBetween(<span class="number">2000.00</span>, <span class="number">3500.00</span>);</span><br><span class="line">    <span class="keyword">for</span> (Item item : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;item = &quot;</span> + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2020/11/14/elasticSearch%E7%AC%94%E8%AE%B0/log\source_posts\elasticSearch笔记\1531993518230.png" alt="1531993518230"></p>
<p>虽然基本查询和自定义方法已经很强大了，但是如果是复杂查询（模糊、通配符、词条查询等）就显得力不从心了。此时，我们只能使用原生查询。</p>
<h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="基本查询-1"><a href="#基本查询-1" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 词条查询</span></span><br><span class="line">    MatchQueryBuilder queryBuilder = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    Iterable&lt;Good&gt; items = goodRepository.search(queryBuilder);</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>QueryBuilders提供了大量的静态方法，用于生成各种不同类型的查询对象，例如：词条、模糊、通配符等QueryBuilder对象。</p>
<h4 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>));</span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Good&gt; items = goodRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NativeSearchQueryBuilder：Spring提供的一个查询条件构建器，帮助构建json格式的请求体</p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;手机&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化分页参数</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page, size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    <span class="comment">// 打印总页数</span></span><br><span class="line">    System.out.println(items.getTotalPages());</span><br><span class="line">    <span class="comment">// 每页大小</span></span><br><span class="line">    System.out.println(items.getSize());</span><br><span class="line">    <span class="comment">// 当前页</span></span><br><span class="line">    System.out.println(items.getNumber());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 构建查询条件</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 添加基本的分词查询</span></span><br><span class="line">    queryBuilder.withQuery(QueryBuilders.termQuery(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;手机&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    queryBuilder.withSort(SortBuilders.fieldSort(<span class="string">&quot;price&quot;</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行搜索，获取结果</span></span><br><span class="line">    Page&lt;Item&gt; items = <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 打印总条数</span></span><br><span class="line">    System.out.println(items.getTotalElements());</span><br><span class="line">    items.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="聚合-1"><a href="#聚合-1" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;&quot;</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">&quot;brands&quot;</span>).field(<span class="string">&quot;brand&quot;</span>));</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">&quot;brands&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString());</span><br><span class="line">        <span class="comment">// 3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嵌套聚合求平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubAgg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">// 不查询任何结果</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;&quot;</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">// 1、添加一个新的聚合，聚合类型为terms，聚合名称为brands，聚合字段为brand</span></span><br><span class="line">    queryBuilder.addAggregation(</span><br><span class="line">        AggregationBuilders.terms(<span class="string">&quot;brands&quot;</span>).field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">        .subAggregation(AggregationBuilders.avg(<span class="string">&quot;priceAvg&quot;</span>).field(<span class="string">&quot;price&quot;</span>)) <span class="comment">// 在品牌聚合桶内进行嵌套聚合，求平均值</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 2、查询,需要把结果强转为AggregatedPage类型</span></span><br><span class="line">    AggregatedPage&lt;Item&gt; aggPage = (AggregatedPage&lt;Item&gt;) <span class="keyword">this</span>.itemRepository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">// 3、解析</span></span><br><span class="line">    <span class="comment">// 3.1、从结果中取出名为brands的那个聚合，</span></span><br><span class="line">    <span class="comment">// 因为是利用String类型字段来进行的term聚合，所以结果要强转为StringTerm类型</span></span><br><span class="line">    StringTerms agg = (StringTerms) aggPage.getAggregation(<span class="string">&quot;brands&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.2、获取桶</span></span><br><span class="line">    List&lt;StringTerms.Bucket&gt; buckets = agg.getBuckets();</span><br><span class="line">    <span class="comment">// 3.3、遍历</span></span><br><span class="line">    <span class="keyword">for</span> (StringTerms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 3.4、获取桶中的key，即品牌名称  3.5、获取桶中的文档数量</span></span><br><span class="line">        System.out.println(bucket.getKeyAsString() + <span class="string">&quot;，共&quot;</span> + bucket.getDocCount() + <span class="string">&quot;台&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.6.获取子聚合结果：</span></span><br><span class="line">        InternalAvg avg = (InternalAvg) bucket.getAggregations().asMap().get(<span class="string">&quot;priceAvg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均售价：&quot;</span> + avg.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2020/10/15/python/</url>
    <content><![CDATA[<h1 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h1><p>Python解释器作⽤：运⾏⽂件</p>
<p>Python解释器种类</p>
<ul>
<li>CPython，C语⾔开发的解释器[官⽅]，应⽤⼴泛的解释器。</li>
<li>IPython，基于CPython的⼀种交互式解释器。</li>
<li>其他解释器<ul>
<li>PyPy，基于Python语⾔开发的解释器</li>
<li>Jython，运⾏在Java平台的解释器，直接把Python代码编译成Java字节码执⾏。</li>
<li>IronPython，运⾏在微软.Net平台上的Python解释器，可以直接把Python代码编译 成.Net的字节码。</li>
</ul>
</li>
</ul>
<h1 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h1><p>用于开发python的idea</p>
<p><img src="/2020/10/15/python/image-20201017081925205.png" alt="image-20201017081925205"></p>
<p>python文件的后缀名为.py</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>单行注释</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释内容</span></span><br></pre></td></tr></table></figure>

<p>多行注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line"> 第⼀⾏注释</span><br><span class="line"> 第⼆⾏注释</span><br><span class="line"> 第三⾏注释</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"> 注释1</span><br><span class="line"> 注释2</span><br><span class="line"> 注释3</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>标识符</p>
<p><img src="/2020/10/15/python/image-20201017084416324.png" alt="image-20201017084416324"></p>
<p>定义变量 ： 变量名 = 值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#结尾不用分号</span></span><br><span class="line">myName = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">print(myName)</span><br></pre></td></tr></table></figure>

<p>数据类型</p>
<p><img src="/2020/10/15/python/image-20201017085032072.png" alt="image-20201017085032072"></p>
<p>可以使用type()检测数据类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myName = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">print(type(myName))</span><br></pre></td></tr></table></figure>

<h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><p><img src="/2020/10/15/python/image-20201017085215273.png" alt="image-20201017085215273"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myName = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;我的名字是%s&#x27;</span> % myName)</span><br></pre></td></tr></table></figure>

<p>转义字符： \n换行 \t 制表符</p>
<p>python中print()自带换行符 </p>
<h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>语法 : <code>input(提示信息)</code></p>
<p>输入的特点</p>
<ul>
<li>当程序执⾏到 input ，等待⽤户输⼊，输⼊完成之后才继续向下执⾏。</li>
<li>在Python中， input 接收⽤户输⼊后，⼀般存储到变量，⽅便使⽤。</li>
<li>在Python中， input 会把接收到的任意⽤户输⼊的数据都当做字符串处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">passWord = input(<span class="string">&quot;请输入密码&quot;</span>)</span><br><span class="line">print(<span class="string">&#x27;您输入的密码是%s&#x27;</span> % passWord)</span><br><span class="line">print(type(passWord))</span><br></pre></td></tr></table></figure>

<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>数据类型转换的函数</p>
<p><img src="/2020/10/15/python/image-20201017090403401.png" alt="image-20201017090403401"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = input(<span class="string">&quot;请输入&quot;</span>)</span><br><span class="line">print(type(int(x)))</span><br></pre></td></tr></table></figure>

<p>元组tuple:(x1,x2,x3) 序列list:(x1,x2,x3)</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算数运算符</p>
<p><img src="/2020/10/15/python/image-20201017091851957.png" alt="image-20201017091851957"></p>
<ul>
<li>混合运算符优先级顺序： () ⾼于 ** ⾼于 * / // % ⾼于 + -</li>
</ul>
<p>多个变量赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1, float1, str1 = <span class="number">10</span>, <span class="number">0.5</span>, <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<p>复合赋值运算符</p>
<p><img src="/2020/10/15/python/image-20201017092209169.png" alt="image-20201017092209169"></p>
<p>比较运算符</p>
<p><img src="/2020/10/15/python/image-20201017092236556.png" alt="image-20201017092236556"></p>
<p>逻辑运算符</p>
<p><img src="/2020/10/15/python/image-20201017092254611.png" alt="image-20201017092254611"></p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = int(input(<span class="string">&quot;请输入数字&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">70</span>:</span><br><span class="line">        print(<span class="string">&#x27;快要入土80&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&quot;毛头小子&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;其他&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>三目运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>break 和 continue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span> : <span class="keyword">break</span>;</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;任务结束&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line"> print(i)</span><br></pre></td></tr></table></figure>

<h2 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h2><p> else 循环可以和else配合使⽤，else下⽅缩进的代码指的是当循环正常结束之后要执⾏的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line"> print(<span class="string">&#x27;老师，我错了&#x27;</span>)</span><br><span class="line"> i += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;老师原谅我了...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>相似的还有for…else</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">name = <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="comment"># 三引号形式的字符串⽀持换⾏</span></span><br><span class="line">name = <span class="string">&quot;&quot;&quot;tom&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#创建字符串 i&#x27;m tom</span></span><br><span class="line">name = <span class="string">&quot;i&#x27;m tom&quot;</span></span><br><span class="line">name = <span class="string">&#x27;i\&#x27;m tom&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a><strong>下标</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">print(str1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a><strong>切片</strong></h2><p>切⽚是指对操作的对象截取其中⼀部分的操作。字符串、列表、元组都⽀持切⽚操作。</p>
<p>语法 <code>序列[开始位置下标:结束位置下标:步⻓]</code></p>
<ul>
<li>不包含结束位置下标对应的数据， 正负整数均可；</li>
<li>步⻓是选取间隔，正负整数均可，默认步⻓为1</li>
</ul>
<p><img src="/2020/10/15/python/image-20201017094414821.png" alt="image-20201017094414821"></p>
<h2 id="常用操作方法"><a href="#常用操作方法" class="headerlink" title="常用操作方法"></a><strong>常用操作方法</strong></h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>find()：检测某个⼦串是否包含在这个字符串中，如果在返回这个⼦串开始的位置下标，否则则返 回-1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法:字符串序列.find(⼦串, 开始位置下标, 结束位置下标)</span><br><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line">print(mystr.find(<span class="string">&#x27;and&#x27;</span>)) <span class="comment"># 12</span></span><br><span class="line">print(mystr.find(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>)) <span class="comment"># 23</span></span><br><span class="line">print(mystr.find(<span class="string">&#x27;ands&#x27;</span>)) <span class="comment"># -1</span></span><br><span class="line">注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</span><br></pre></td></tr></table></figure>

<p>index()：检测某个⼦串是否包含在这个字符串中，如果在返回这个⼦串开始的位置下标，否则则 报异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.index(⼦串, 开始位置下标, 结束位置下标)</span><br><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line">print(mystr.index(<span class="string">&#x27;and&#x27;</span>)) <span class="comment"># 12</span></span><br><span class="line">print(mystr.index(<span class="string">&#x27;and&#x27;</span>, <span class="number">15</span>, <span class="number">30</span>)) <span class="comment"># 23</span></span><br><span class="line">print(mystr.index(<span class="string">&#x27;ands&#x27;</span>)) <span class="comment"># 报错</span></span><br><span class="line">注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</span><br></pre></td></tr></table></figure>

<p>rfind()： 和find()功能相同，但查找⽅向为右侧开始。</p>
<p>rindex()：和index()功能相同，但查找⽅向为右侧开始</p>
<p>count()：返回某个⼦串在字符串中出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.count(⼦串, 开始位置下标, 结束位置下标)</span><br><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line">print(mystr.count(<span class="string">&#x27;and&#x27;</span>)) <span class="comment"># 3</span></span><br><span class="line">print(mystr.count(<span class="string">&#x27;ands&#x27;</span>)) <span class="comment"># 0</span></span><br><span class="line">print(mystr.count(<span class="string">&#x27;and&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>)) <span class="comment"># 1</span></span><br><span class="line">注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>replace()：替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.replace(旧⼦串, 新⼦串, 替换次数)</span><br><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：hello world he itcast he itheima he Python</span></span><br><span class="line">print(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：hello world he itcast he itheima he Python</span></span><br><span class="line">print(mystr.replace(<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;he&#x27;</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 结果：hello world and itcast and itheima and Python</span></span><br><span class="line">print(mystr)</span><br><span class="line">数据按照是否能直接修改分为可变类型和不可变类型两种。字符串类型的数据修改的时候</span><br><span class="line">不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型</span><br></pre></td></tr></table></figure>

<p>split()：按照指定字符分割字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.split(分割字符, num)</span><br><span class="line">num表示的是分割字符出现的次数，即将来返回数据个数为num+<span class="number">1</span>个。</span><br><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima &#x27;, &#x27; Python&#x27;]</span></span><br><span class="line">print(mystr.split(<span class="string">&#x27;and&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima and Python&#x27;]</span></span><br><span class="line">print(mystr.split(<span class="string">&#x27;and&#x27;</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;itcast&#x27;, &#x27;and&#x27;, &#x27;itheima&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line">print(mystr.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and itcast and itheima and Python&#x27;]</span></span><br><span class="line">print(mystr.split(<span class="string">&#x27; &#x27;</span>, <span class="number">2</span>))</span><br><span class="line">如果分割字符是原有字符串中的⼦串，分割后则丢失该⼦串。</span><br></pre></td></tr></table></figure>

<p>join()：⽤⼀个字符或⼦串合并字符串，即是将多个字符串合并为⼀个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符或⼦串.join(多字符串组成的序列)</span><br><span class="line">list1 = [<span class="string">&#x27;chuan&#x27;</span>, <span class="string">&#x27;zhi&#x27;</span>, <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;ke&#x27;</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"><span class="comment"># 结果：chuan_zhi_bo_ke</span></span><br><span class="line">print(<span class="string">&#x27;_&#x27;</span>.join(list1))</span><br><span class="line"><span class="comment"># 结果：aa...b...cc...ddd</span></span><br><span class="line">print(<span class="string">&#x27;...&#x27;</span>.join(t1))</span><br></pre></td></tr></table></figure>

<p>capitalize()：将字符串第⼀个字符转换成⼤写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：Hello world and itcast and itheima and python</span></span><br><span class="line">print(mystr.capitalize())</span><br></pre></td></tr></table></figure>

<p>title()：将字符串每个单词⾸字⺟转换成⼤写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：Hello World And Itcast And Itheima And Python</span></span><br><span class="line">print(mystr.title())</span><br></pre></td></tr></table></figure>

<p>lower()：将字符串中⼤写转⼩写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：hello world and itcast and itheima and python</span></span><br><span class="line">print(mystr.lower())</span><br></pre></td></tr></table></figure>

<p>upper()：将字符串中⼩写转⼤写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">&quot;hello world and itcast and itheima and Python&quot;</span></span><br><span class="line"><span class="comment"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span></span><br><span class="line">print(mystr.upper())</span><br></pre></td></tr></table></figure>

<p>lstrip()：删除字符串左侧空⽩字符。</p>
<p><img src="/2020/10/15/python/image-20201017145109999.png" alt="image-20201017145109999"></p>
<p>rstrip()：删除字符串右侧空⽩字符。</p>
<p><img src="/2020/10/15/python/image-20201017145118081.png" alt="image-20201017145118081"></p>
<p>strip()：删除字符串两侧空⽩字符。</p>
<p><img src="/2020/10/15/python/image-20201017145129970.png" alt="image-20201017145129970"></p>
<p>ljust()：返回⼀个原字符串左对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串序列.ljust(⻓度, 填充字符)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/15/python/image-20201017145428055.png" alt="image-20201017145428055"></p>
<p>rjust()：返回⼀个原字符串右对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串，语法和 ljust()相同。</p>
<p>center()：返回⼀个原字符串居中对⻬,并使⽤指定字符(默认空格)填充⾄对应⻓度 的新字符串，语 法和ljust()相同。</p>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>startswith()：检查字符串是否是以指定⼦串开头，是则返回 True，否则返回 False。如果设置开 始和结束位置下标，则在指定范围内检查。</p>
<p>endswith()：：检查字符串是否是以指定⼦串结尾，是则返回 True，否则返回 False。如果设置开 始和结束位置下标，则在指定范围内检查。</p>
<p>isalpha()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟则返回 True, 否则返回 False。</p>
<p>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</p>
<p>isalnum()：如果字符串⾄少有⼀个字符并且所有字符都是字⺟或数字则返 回 True,否则返回 False。</p>
<p>isspace()：如果字符串中只包含空⽩，则返回 True，否则返回 False。</p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p><strong>下标</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line">print(name_list[<span class="number">0</span>])</span><br><span class="line">print(name_list[<span class="number">1</span>])</span><br><span class="line">print(name_list[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p><strong>函数</strong></p>
<p>index()：返回指定数据所在位置的下标 。<code>列表序列.index(数据, 开始位置下标, 结束位置下标)</code></p>
<p>count()：统计指定数据在当前列表中出现的次数</p>
<p>len()：访问列表⻓度，即列表中数据的个数。</p>
<p><strong>判断是否存在</strong></p>
<p>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</p>
<p>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line">print(<span class="string">&#x27;Lily&#x27;</span> <span class="keyword">in</span> name_list)</span><br><span class="line"><span class="comment"># 结果：True</span></span><br><span class="line">print(<span class="string">&#x27;Lilys&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> name_list)</span><br></pre></td></tr></table></figure>

<p><strong>增加</strong></p>
<p>append()：列表结尾追加数据。</p>
<ul>
<li>列表追加数据的时候，直接在原列表⾥⾯追加了指定数据，即修改了原列表，故列表为可变类型 数据。</li>
</ul>
<p>extend()：列表结尾追加数据，如果数据是⼀个序列，则将这个序列的数据逐⼀添加到列表</p>
<p>insert()：指定位置新增数据。 <code>列表序列.insert(位置下标, 数据)</code></p>
<p><strong>删除</strong></p>
<p>del</p>
<ul>
<li><p>删除列表 <code>del name_list</code></p>
</li>
<li><p>删除指定数据 <code>del name_list[0]</code></p>
</li>
</ul>
<p>pop()：删除指定下标的数据(默认为最后⼀个)，并返回该数据。</p>
<p>remove()：移除列表中某个数据的第⼀个匹配项 <code>列表序列.remove(数据)</code></p>
<p>clear:清空列表<br><strong>修改</strong></p>
<p>修改指定下标数据     <code>name_list[0] = &#39;aaa&#39;</code></p>
<p>逆置：reverse()</p>
<p>排序：sort()</p>
<ul>
<li><code>列表序列.sort( key=None, reverse=False)</code></li>
<li>reverse表示排序规则，reverse = True 降序， reverse = False 升序（默认）</li>
</ul>
<p><strong>复制</strong></p>
<p>copy </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_list = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>, <span class="string">&#x27;Rose&#x27;</span>]</span><br><span class="line">name_li2 = name_list.copy()</span><br><span class="line"><span class="comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span></span><br><span class="line">print(name_li2)</span><br></pre></td></tr></table></figure>

<p><strong>循环</strong></p>
<p>while</p>
<p><img src="/2020/10/15/python/image-20201018104322871.png" alt="image-20201018104322871"></p>
<p>for</p>
<p><img src="/2020/10/15/python/image-20201018104330693.png" alt="image-20201018104330693"></p>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p><strong>⼀个元组可以存储多个数据，元组内的数据是不能修改的。</strong></p>
<p><strong>定义元组</strong></p>
<p>元组特点：定义元组使⽤⼩括号，且逗号隔开各个数据，数据可以是不同的数据类型。</p>
<ul>
<li>注意：如果定义的元组只有⼀个数据，那么这个数据后⾯也好添加逗号，否则数据类型为唯⼀的 这个数据的数据类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2 = (<span class="number">10</span>,)</span><br><span class="line">print(type(t2)) <span class="comment"># tuple</span></span><br><span class="line">t3 = (<span class="number">20</span>)</span><br><span class="line">print(type(t3)) <span class="comment"># int</span></span><br><span class="line">t4 = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">print(type(t4)) <span class="comment"># str</span></span><br></pre></td></tr></table></figure>

<p><strong>元组常见操作</strong></p>
<p>按下标查找数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">print(tuple1[<span class="number">0</span>]) <span class="comment"># aa</span></span><br></pre></td></tr></table></figure>

<p>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index ⽅法相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">print(tuple1.index(<span class="string">&#x27;aa&#x27;</span>)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<p>count()：统计某个数据在当前元组出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">print(tuple1.count(<span class="string">&#x27;bb&#x27;</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p>len()：统计元组中数据的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">print(len(tuple1)) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<p>元组内的直接数据如果修改则⽴即报错,但是如果元组⾥⾯有列表，修改列表⾥⾯的数据则是⽀持的，故⾃觉很重要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuple2 = (<span class="number">10</span>, <span class="number">20</span>, [<span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;cc&#x27;</span>], <span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">print(tuple2[<span class="number">2</span>]) <span class="comment"># 访问到列表</span></span><br><span class="line"><span class="comment"># 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span></span><br><span class="line">tuple2[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line">print(tuple2)</span><br></pre></td></tr></table></figure>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>创建集合使⽤ {} 或 set() ， 但是如果要创建空集合只能使⽤ set() ，因为 {} ⽤来创建空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">print(s1)</span><br><span class="line">s2 = &#123;<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>&#125;</span><br><span class="line">print(s2)</span><br><span class="line">s3 = set(<span class="string">&#x27;abcdefg&#x27;</span>)</span><br><span class="line">print(s3)</span><br><span class="line">s4 = set()</span><br><span class="line">print(type(s4)) <span class="comment"># set</span></span><br><span class="line">s5 = &#123;&#125;</span><br><span class="line">print(type(s5)) <span class="comment"># dict</span></span><br></pre></td></tr></table></figure>

<ul>
<li>集合可以去掉重复数据；</li>
<li>集合数据是⽆序的，故不⽀持下标</li>
</ul>
<p><strong>增加数据</strong></p>
<p>add</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.add(<span class="number">100</span>)</span><br><span class="line">s1.add(<span class="number">10</span>)</span><br><span class="line">print(s1) <span class="comment"># &#123;100, 10, 20&#125;</span></span><br></pre></td></tr></table></figure>

<p>update(), 追加的数据是序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment"># s1.update(100) # 报错</span></span><br><span class="line">s1.update([<span class="number">100</span>, <span class="number">200</span>])</span><br><span class="line">s1.update(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure>

<p><strong>删除数据</strong></p>
<p>remove()，删除集合中的指定数据，如果数据不存在则报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;</span><br><span class="line">s1.remove(<span class="number">10</span>)</span><br><span class="line">print(s1)</span><br><span class="line">s1.remove(<span class="number">10</span>) <span class="comment"># 报错</span></span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure>

<p>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</p>
<p>pop()，随机删除集合中的某个数据，并返回这个数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">del_num = s1.pop()</span><br><span class="line">print(del_num)</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure>

<p><strong>查找数据</strong></p>
<p>in：判断数据在集合序列     not in：判断数据不在集合序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> s1)</span><br><span class="line">print(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> s1)</span><br></pre></td></tr></table></figure>

<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典⾥⾯的数据是以键值对形式出现，字典数据和数据顺序没有关系，即字典不⽀持下标， 后期⽆论数据如何变化，只需要按照对应的键的名字查找数据即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有数据字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line">dict3 = dict()</span><br></pre></td></tr></table></figure>

<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>增</strong></p>
<p>如果key存在则修改这个key对应的值；如果key不存在则新增此键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line"><span class="comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span></span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>

<p><strong>删</strong></p>
<p> del：删除字典或删除字典中指定键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>clear()：清空字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">dict1.clear()</span><br><span class="line">print(dict1) <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>查</strong></p>
<p>根据key查找</p>
<p>get方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">print(dict1.get(<span class="string">&#x27;name&#x27;</span>)) <span class="comment"># Tom</span></span><br></pre></td></tr></table></figure>

<p>keys</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">print(dict1.keys()) <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure>

<p>values</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">print(dict1.values()) <span class="comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span></span><br></pre></td></tr></table></figure>

<p>items</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">print(dict1.items()) <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;,&#x27;男&#x27;)])</span></span><br></pre></td></tr></table></figure>

<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p> 遍历字典的key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1.keys():</span><br><span class="line"> print(key)</span><br></pre></td></tr></table></figure>

<p>遍历字典的value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict1.values():</span><br><span class="line"> print(value)</span><br></pre></td></tr></table></figure>

<p>遍历元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict1.items():</span><br><span class="line"> print(item)</span><br></pre></td></tr></table></figure>

<p>遍历键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():</span><br><span class="line"> print(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="公共操作"><a href="#公共操作" class="headerlink" title="公共操作"></a>公共操作</h1><h2 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h2><p><strong>+</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">str3 = str1 + str2</span><br><span class="line">print(str3) <span class="comment"># aabb</span></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3) <span class="comment"># [1, 2, 10, 20]</span></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t3 = t1 + t2</span><br><span class="line">print(t3) <span class="comment"># (10, 20, 100, 200)</span></span><br></pre></td></tr></table></figure>

<p><strong>*</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span> * <span class="number">10</span>) <span class="comment"># ----------</span></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">print(list1 * <span class="number">4</span>) <span class="comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;world&#x27;</span>,)</span><br><span class="line">print(t1 * <span class="number">4</span>) <span class="comment"># (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span></span><br></pre></td></tr></table></figure>

<p><strong>in 或 not in</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>) <span class="comment"># True</span></span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abcd&#x27;</span>) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list1) <span class="comment"># True</span></span><br><span class="line">print(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> t1) <span class="comment"># False</span></span><br><span class="line">print(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> t1) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h2><p><img src="/2020/10/15/python/image-20201019191942901.png" alt="image-20201019191942901"></p>
<p><strong>len</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">print(len(str1)) <span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">print(len(list1)) <span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 3. 元组</span></span><br><span class="line">t1 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line">print(len(t1)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 4. 集合</span></span><br><span class="line">s1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">print(len(s1)) <span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 5. 字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Rose&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">print(len(dict1)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p><strong>del</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">del</span> str1</span><br><span class="line">print(str1)</span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"><span class="keyword">del</span>(list1[<span class="number">0</span>])</span><br><span class="line">print(list1) <span class="comment"># [20, 30, 40]</span></span><br></pre></td></tr></table></figure>

<p><strong>max</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 字符串</span></span><br><span class="line">str1 = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">print(max(str1)) <span class="comment"># g</span></span><br><span class="line"><span class="comment"># 2. 列表</span></span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">print(max(list1)) <span class="comment"># 40</span></span><br></pre></td></tr></table></figure>

<p><strong>min</strong></p>
<p><strong>range</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line"> print(i)</span><br><span class="line"><span class="comment"># 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line"> print(i)</span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> print(i)</span><br></pre></td></tr></table></figure>

<p> <strong>enumerate</strong></p>
<p><img src="/2020/10/15/python/image-20201019192254243.png" alt="image-20201019192254243"></p>
<h2 id="容器类型转换"><a href="#容器类型转换" class="headerlink" title="容器类型转换"></a>容器类型转换</h2><p><strong>tuple()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将某个序列转换为元组</span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line">print(tuple(list1))</span><br><span class="line">print(tuple(s1))</span><br></pre></td></tr></table></figure>

<p> <strong>list()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将某个序列转换为元组</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">s1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line">print(list(t1))</span><br><span class="line">print(list(s1))</span><br></pre></td></tr></table></figure>

<p><strong>set()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将某个序列转换为集合</span><br><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>]</span><br><span class="line">t1 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">print(set(list1))</span><br><span class="line">print(set(t1))</span><br></pre></td></tr></table></figure>

<h1 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h1><p>作⽤：⽤⼀个表达式创建⼀个有规律的列表或控制⼀个有规律列表。</p>
<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>用一个表达式创建⼀个有规律的列表或控制⼀个有规律列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="comment">#创建偶数列表</span></span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line">list1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment">#创建[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></span><br><span class="line">list1 = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><p>快速合并列表为字典或提取字典中⽬标数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建⼀个字典：字典key是1-5数字，value是这个数字的2次⽅。</span></span><br><span class="line">dict1 = &#123;i: i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>)&#125;</span><br><span class="line"><span class="comment">#将两个列表合并为⼀个字典</span></span><br><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;man&#x27;</span>]</span><br><span class="line">dict1 = &#123;list1[i]: list2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list1))&#125;</span><br><span class="line"><span class="comment">#提取字典中⽬标数据</span></span><br><span class="line">counts = &#123;<span class="string">&#x27;MBP&#x27;</span>: <span class="number">268</span>, <span class="string">&#x27;HP&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;DELL&#x27;</span>: <span class="number">201</span>, <span class="string">&#x27;Lenovo&#x27;</span>: <span class="number">199</span>, <span class="string">&#x27;acer&#x27;</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="comment">#需求：提取上述电脑数量⼤于等于200的字典数据</span></span><br><span class="line">count1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> counts.items() <span class="keyword">if</span> value &gt;= <span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h2><p>需求：创建⼀个集合，数据为下⽅列表的2次⽅。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">set1 = &#123;i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1&#125;</span><br><span class="line">print(set1) <span class="comment"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数必须先定义后使用</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span></span><span class="symbol">:</span></span><br><span class="line"> 代码<span class="number">1</span></span><br><span class="line"> 代码<span class="number">2</span></span><br><span class="line"> ......</span><br><span class="line"><span class="comment">#调用函数</span></span><br><span class="line">函数名(参数)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a,b)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">x = sum(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="函数的说明文档"><a href="#函数的说明文档" class="headerlink" title="函数的说明文档"></a>函数的说明文档</h2><p><img src="/2020/10/15/python/image-20201019195341331.png" alt="image-20201019195341331"></p>
<p><img src="/2020/10/15/python/image-20201019195347466.png" alt="image-20201019195347466"></p>
<h2 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h2><p><img src="/2020/10/15/python/image-20201019195659583.png" alt="image-20201019195659583"></p>
<p><img src="/2020/10/15/python/image-20201019195710809.png" alt="image-20201019195710809"></p>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p><img src="/2020/10/15/python/image-20201019195851539.png" alt="image-20201019195851539"></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>位置参数：调⽤函数时根据函数定义的参数位置来传递参数。</p>
<p><img src="/2020/10/15/python/image-20201019200104973.png" alt="image-20201019200104973"></p>
<p>关键词参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数调⽤，通过“键=值”形式加以指定。可以让函数更加清晰、容易使⽤，同时也清除了参数的顺序需 求。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender</span>):</span></span><br><span class="line"> print(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, age=<span class="number">20</span>, gender=<span class="string">&#x27;⼥&#x27;</span>)</span><br><span class="line">函数调⽤时，如果有位置参数时，位置参数必须在关键字参数的前⾯，但关键字参数之间不存在</span><br><span class="line">先后顺序。</span><br></pre></td></tr></table></figure>

<p>缺省参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">缺省参数也叫默认参数，⽤于定义函数，为参数提供默认值，调⽤函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调⽤</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">name, age, gender=<span class="string">&#x27;男&#x27;</span></span>):</span></span><br><span class="line"> print(<span class="string">f&#x27;您的名字是<span class="subst">&#123;name&#125;</span>, 年龄是<span class="subst">&#123;age&#125;</span>, 性别是<span class="subst">&#123;gender&#125;</span>&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">user_info(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;⼥&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>不定长参数</p>
<p>不定⻓参数也叫可变参数。⽤于不确定调⽤的时候会传递多少个参数(不传参也可以)的场景。此时，可 ⽤包裹(packing)位置参数，或者包裹关键字参数，来进⾏参数传递，会显得⾮常⽅便。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#包裹位置传递:传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为⼀个元组(tuple)，args是元组类型，这就是包裹位置传递。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">*args</span>):</span></span><br><span class="line"> print(args)</span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;,)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>)</span><br><span class="line"><span class="comment"># (&#x27;TOM&#x27;, 18)</span></span><br><span class="line">user_info(<span class="string">&#x27;TOM&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">#包裹关键字传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line"> print(kwargs)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span></span><br><span class="line">user_info(name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">18</span>, id=<span class="number">110</span>)</span><br></pre></td></tr></table></figure>

<h2 id="拆包和交换变量组"><a href="#拆包和交换变量组" class="headerlink" title="拆包和交换变量组"></a>拆包和交换变量组</h2><p>拆包：元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_num</span>():</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">num1, num2 = return_num()</span><br><span class="line">print(num1) <span class="comment"># 100</span></span><br><span class="line">print(num2) <span class="comment"># 200</span></span><br></pre></td></tr></table></figure>

<p>拆包：字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;TOM&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">a, b = dict1</span><br><span class="line"><span class="comment"># 对字典进⾏拆包，取出来的是字典的key</span></span><br><span class="line">print(a) <span class="comment"># name</span></span><br><span class="line">print(b) <span class="comment"># age</span></span><br><span class="line">print(dict1[a]) <span class="comment"># TOM</span></span><br><span class="line">print(dict1[b]) <span class="comment"># 18</span></span><br></pre></td></tr></table></figure>

<p>交换变量值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line">print(a) <span class="comment"># 2</span></span><br><span class="line">print(b) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我们可以⽤ id() 来判断两个变量是否为同⼀个值的引⽤。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列表</span></span><br><span class="line">aa = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">bb = aa</span><br><span class="line">print(id(aa)) <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb)) <span class="comment"># 2325297783432</span></span><br><span class="line">aa.append(<span class="number">30</span>)</span><br><span class="line">print(bb) <span class="comment"># [10, 20, 30], 列表为可变类型</span></span><br><span class="line">print(id(aa)) <span class="comment"># 2325297783432</span></span><br><span class="line">print(id(bb)) <span class="comment"># 2325297783432</span></span><br><span class="line"><span class="comment">#int类型</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">print(b) <span class="comment"># 1</span></span><br><span class="line">print(id(a)) <span class="comment"># 140708464157520</span></span><br><span class="line">print(id(b)) <span class="comment"># 140708464157520</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">print(b) <span class="comment"># 1,说明int类型为不可变类型</span></span><br><span class="line">print(id(a)) <span class="comment"># 140708464157552，此时得到是的数据2的内存地址</span></span><br><span class="line">print(id(b)) <span class="comment"># 140708464157520</span></span><br></pre></td></tr></table></figure>

<h2 id="可变类型和不可变类型"><a href="#可变类型和不可变类型" class="headerlink" title="可变类型和不可变类型"></a>可变类型和不可变类型</h2><p><img src="/2020/10/15/python/image-20201019223000046.png" alt="image-20201019223000046"></p>
<h1 id="函数加强"><a href="#函数加强" class="headerlink" title="函数加强"></a>函数加强</h1>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2020/10/11/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1185-一周中的第几天"><a href="#1185-一周中的第几天" class="headerlink" title="1185. 一周中的第几天"></a><a href="https://leetcode-cn.com/problems/day-of-the-week/">1185. 一周中的第几天</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dayOfTheWeek</span><span class="params">(<span class="keyword">int</span> day, <span class="keyword">int</span> month, <span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        String[] s = </span><br><span class="line">                &#123;<span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>,<span class="string">&quot;Sunday&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(month==<span class="number">1</span>||month==<span class="number">2</span>) &#123;</span><br><span class="line">          month+=<span class="number">12</span>;</span><br><span class="line">            year--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iWeek=(day+<span class="number">2</span>*month+<span class="number">3</span>*(month+<span class="number">1</span>)/<span class="number">5</span>+year+year/<span class="number">4</span>-year/<span class="number">100</span>+year/<span class="number">400</span>)%<span class="number">7</span>;</span><br><span class="line">  	    <span class="keyword">return</span> s[iWeek];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>计算星期几的公式</p>
<ul>
<li>蔡勒公式：<a href="https://www.cnblogs.com/faterazer/p/11393521.html">https://www.cnblogs.com/faterazer/p/11393521.html</a></li>
<li>基姆拉尔森计算公式：<a href="https://www.cnblogs.com/SeekHit/p/7498408.html">https://www.cnblogs.com/SeekHit/p/7498408.html</a></li>
</ul>
<h2 id="624-数组列表中的最大距离"><a href="#624-数组列表中的最大距离" class="headerlink" title="624. 数组列表中的最大距离"></a>624. 数组列表中的最大距离</h2><p>题目</p>
<p><img src="/2020/10/11/%E7%AE%97%E6%B3%95/image-20201011103046603.png" alt="image-20201011103046603"></p>
<p>解题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arrays.length;</span><br><span class="line">    <span class="keyword">int</span> min = arrays[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> max = arrays[<span class="number">0</span>][arrays[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">int</span> maxdis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        maxdis = Math.max(maxdis,Math.abs(arrays[i][<span class="number">0</span>]-max));</span><br><span class="line">        maxdis = Math.max(maxdis,Math.abs(arrays[i][arrays[i].length]-min));</span><br><span class="line">        min = Math.min(min,arrays[i][<span class="number">0</span>]);</span><br><span class="line">        max = Math.max(max,arrays[i][arrays[i].length]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxdis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1566-重复至少-K-次且长度为-M-的模式"><a href="#1566-重复至少-K-次且长度为-M-的模式" class="headerlink" title="1566. 重复至少 K 次且长度为 M 的模式"></a><a href="https://leetcode-cn.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/">1566. 重复至少 K 次且长度为 M 的模式</a></h2><p>枚举法：</p>
<p><img src="/2020/10/11/%E7%AE%97%E6%B3%95/image-20201013092445098.png" alt="image-20201013092445098"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsPattern</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;=arr.length-m*k;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> offset;</span><br><span class="line">        <span class="keyword">for</span>(offset = <span class="number">0</span>;offset&lt;m*k;offset++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i + offset] != arr[i + offset % m]) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(offset == m*k) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复杂度分析</p>
<ul>
<li>时间复杂度：外层循环取值个数为n-m*k内存循环取值个数为m * K 故时间复杂度O((n - m * k) * m * k) = O(n * m * k)</li>
<li>空间复杂度:O(1)</li>
</ul>
<h2 id="1089-复写零"><a href="#1089-复写零" class="headerlink" title="1089. 复写零"></a><a href="https://leetcode-cn.com/problems/duplicate-zeros/">1089. 复写零</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">duplicateZeros</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计需要复制的0的个数，复制count个0，则会挤出原数组count个值</span></span><br><span class="line">    <span class="comment">// i进行扫描，遇到0则count自增</span></span><br><span class="line">    <span class="comment">// 若i+count大于原数组长度，则停止扫描，后面的直接舍弃</span></span><br><span class="line">    <span class="keyword">while</span>(i + count &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i++] == <span class="number">0</span>) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为循环中i自增到了下一个值，此处i--返回到上一个结束值</span></span><br><span class="line">    i--;</span><br><span class="line">    <span class="keyword">int</span> j = len - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// i从结束值开始，j从数组末尾开始，从后往前扫描，开始复制</span></span><br><span class="line">    <span class="comment">// 特别需要注意的是：若最后一个数字是0，统计需要复制的0时统计了该数，但若复制一次，则数组可能越界</span></span><br><span class="line">    <span class="comment">// 比如[1 0 2 3 0 0 5 0]第二个零</span></span><br><span class="line">    <span class="comment">// 此处+1判断，如果越界，则只复制本身</span></span><br><span class="line">    <span class="keyword">if</span>(count + i + <span class="number">1</span> &gt; len) &#123;</span><br><span class="line">        arr[j--] = arr[i--];</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遇0则复制两次，非0则复制本身</span></span><br><span class="line">    <span class="comment">// count&lt;=0时，说明前面没有0了，保持不变就行</span></span><br><span class="line">    <span class="keyword">while</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        arr[j--] = arr[i];</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度O(n) 空间复杂度O(1)</p>
<h2 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></h2><p>不能用除法 因为数组元素可能有0</p>
<p>用索引左侧所有数字的乘积和右侧所有数字的乘积（即前缀与后缀）相乘得到答案</p>
<p>初始化两个数组 L R分别存放i左侧和右侧的成绩 但是要求空间复杂度为常数 可以先把L作为输出数组来计算 然后动态构造R得到结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    answer[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        answer[i] = nums[i-<span class="number">1</span>] * answer[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//动态构造R数组 使空间复杂度降低</span></span><br><span class="line">    <span class="keyword">int</span> R = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        answer[i] *= R;</span><br><span class="line">        R *= nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="665-非递减数列"><a href="#665-非递减数列" class="headerlink" title="665. 非递减数列"></a><a href="https://leetcode-cn.com/problems/non-decreasing-array/">665. 非递减数列</a></h2><p>这道题可以看做是找向下拐点的过程，如果向下拐点存在，那么你就需要作出改变数字的操作了</p>
<p>如果在拐点前一位元素＜拐点后一位元素时，选择向上移的方法就有可能存在拐点没有被消除的现象，而如果选择向下移，就可以完全避免这种情况</p>
<p><img src="/2020/10/11/%E7%AE%97%E6%B3%95/image-20201013091407278.png" alt="image-20201013091407278"></p>
<p>如果前一位元素≥后一位元素，就只能采用上移才能保证向下拐点消除：</p>
<p><img src="/2020/10/11/%E7%AE%97%E6%B3%95/image-20201013091419805.png" alt="image-20201013091419805"></p>
<p>操作一次计数器增加1，当出现第二个向下拐点时，就说明改变一次是不行的，返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPossibility</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i-<span class="number">1</span>] &gt; nums[i]) count++;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">2</span>&amp;&amp;nums[i-<span class="number">2</span>]&gt;nums[i])</span><br><span class="line">                nums[i] = nums[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> nums[i-<span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1208-尽可能使字符串相等"><a href="#1208-尽可能使字符串相等" class="headerlink" title="1208. 尽可能使字符串相等"></a><a href="https://leetcode-cn.com/problems/get-equal-substrings-within-budget/">1208. 尽可能使字符串相等</a></h2><p>注意：这道题是返回最大长度 而不是从下标0开始的最大转换长度</p>
<p>使用滑动窗口解题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">equalSubstring</span><span class="params">(String s, String t, <span class="keyword">int</span> maxCost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>,sum = <span class="number">0</span>;right&lt;len;right++)&#123;</span><br><span class="line">        sum += Math.abs(s.charAt(right)-t.charAt(right));</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= maxCost)&#123;</span><br><span class="line">            res = Math.max(res,right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum -= Math.abs(s.charAt(left)-t.charAt(left));</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="滑动窗口其他题"><a href="#滑动窗口其他题" class="headerlink" title="滑动窗口其他题"></a>滑动窗口其他题</h3><h4 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="comment">//创建一个双端队列 维持队列递减</span></span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len - k + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        <span class="comment">//如果队列里有比当前元素小的，就将其移除队列，以保证队列的递减</span></span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty() &amp;&amp; nums[deque.getLast()] &lt; nums[i])</span><br><span class="line">            deque.removeLast();</span><br><span class="line">        deque.addLast(i);</span><br><span class="line">        <span class="comment">//当队列元素位置之差大于 k，就将队首元素移除。</span></span><br><span class="line">        <span class="keyword">if</span>(deque.getFirst() == i - k)&#123;</span><br><span class="line">            deque.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= k - <span class="number">1</span>)&#123;</span><br><span class="line">            res[i - k + <span class="number">1</span>] = nums[deque.getFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立一个256位大小的整型数组 freg ，用来建立字符和其出现位置之间的映射</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">255</span>];</span><br><span class="line">    <span class="keyword">int</span> len  = s.length();</span><br><span class="line">    <span class="comment">//初始窗口</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> r = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r+<span class="number">1</span> &lt; len &amp;&amp; arr[s.charAt(r+<span class="number">1</span>)] == <span class="number">0</span>)&#123;</span><br><span class="line">            r++;</span><br><span class="line">            arr[s.charAt(r)]++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr[s.charAt(l)]--;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res,r - l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219. 存在重复元素 II"></a><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">219. 存在重复元素 II</a></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="comment">//如果窗口内有重复元素 直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(set.contains(nums[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        set.add(nums[i]);</span><br><span class="line">        <span class="comment">//相当于一个大小为k的窗口</span></span><br><span class="line">        <span class="keyword">if</span>(set.size() &gt; k)&#123;</span><br><span class="line">            set.remove(nums[i-k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h4><p>right不断向右移 知道满足条件之后 left右移 直到找到最优结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = nums.length + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(right+<span class="number">1</span> &lt; nums.length &amp;&amp; sum &lt; s)&#123;</span><br><span class="line">            right++;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum -= nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= s)&#123;</span><br><span class="line">            res = Math.min(res,right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res == len + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1438-绝对差不超过限制的最长连续子数组"><a href="#1438-绝对差不超过限制的最长连续子数组" class="headerlink" title="1438. 绝对差不超过限制的最长连续子数组"></a><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438. 绝对差不超过限制的最长连续子数组</a></h4><p>用单调队列维护当前窗口的最大值和最小值，保持最大值与最小值的差小于 limit 即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestSubarray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        Deque&lt;Integer&gt; maxQ = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; minQ = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> end = <span class="number">0</span>;end &lt; nums.length;end++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!maxQ.isEmpty() &amp;&amp; nums[maxQ.peekLast()] &lt; nums[end])</span><br><span class="line">                maxQ.pollLast();</span><br><span class="line">            maxQ.add(end);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!minQ.isEmpty() &amp;&amp; nums[minQ.peekLast()] &gt; nums[end])</span><br><span class="line">                minQ.pollLast();</span><br><span class="line">            minQ.add(end);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!maxQ.isEmpty() &amp;&amp; !minQ.isEmpty() &amp;&amp; nums[maxQ.peek()] - nums[minQ.peek()] &gt; limit)&#123;</span><br><span class="line">                <span class="keyword">if</span>(maxQ.peek() &lt;= start) maxQ.poll();</span><br><span class="line">                <span class="keyword">if</span>(minQ.peek() &lt;= start) minQ.poll();</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans,end - start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1011-在-D-天内送达包裹的能力"><a href="#1011-在-D-天内送达包裹的能力" class="headerlink" title="1011. 在 D 天内送达包裹的能力"></a><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/">1011. 在 D 天内送达包裹的能力</a></h2><p>二分查找解题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.最低运载能力必然大于等于序列中的最大值；结果落在[max(weights), sum(weights)]</span></span><br><span class="line">    <span class="comment">//2.要注意是在D天“内”完成，所以运载能力要尽量小，只要是在D天之内就可以</span></span><br><span class="line">    <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> len = weights.length;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//计算max(weights)和sum(weights)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        left = Math.max(left,weights[i]);</span><br><span class="line">        right += weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当到某个包裹大于运载能力，之前的包裹记为一天</span></span><br><span class="line">        <span class="comment">//这个包裹开始记为第二天</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            tmp += weights[i];</span><br><span class="line">            <span class="keyword">if</span>(tmp &gt; mid)&#123;</span><br><span class="line">                day++;</span><br><span class="line">                tmp = weights[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩下的包裹再记一天</span></span><br><span class="line">        day++;</span><br><span class="line">        <span class="keyword">if</span>(day&gt;D)</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="comment">//运载能力过剩</span></span><br><span class="line">            right = mid-<span class="number">1</span>;</span><br><span class="line">            res = Math.min(res,mid); <span class="comment">//取满足条件的运载能力最小值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(NlogN)</li>
<li>空间复杂度：<em>O</em>(1)</li>
</ul>
<p><a href="https://www.cnblogs.com/kyoner/p/11080078.html">深入了解二分查找</a>：这篇文章详细解释了二分查找的细节和用二分查找寻找左侧边界和右侧边界</p>
<p>当while循环中的条件是left &lt; right 当left == right的时候进入去循环 漏掉了left</p>
<h2 id="974-和可被-K-整除的子数组"><a href="#974-和可被-K-整除的子数组" class="headerlink" title="974. 和可被 K 整除的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/">974. 和可被 K 整除的子数组</a></h2><p><strong>通常，涉及连续子数组问题的时候，我们使用前缀和来解决</strong>。</p>
<p><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/solution/he-ke-bei-k-zheng-chu-de-zi-shu-zu-by-leetcode-sol/">利用同余定理解题</a></p>
<p><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">560. 和为K的子数组</a>与这道题相似</p>
<h2 id="1590-使数组和能被-P-整除"><a href="#1590-使数组和能被-P-整除" class="headerlink" title="1590. 使数组和能被 P 整除"></a><a href="https://leetcode-cn.com/problems/make-sum-divisible-by-p/">1590. 使数组和能被 P 整除</a></h2><p>与974类似</p>
<p><a href="https://leetcode-cn.com/problems/make-sum-divisible-by-p/solution/zuo-yi-ti-song-yi-ti-li-kou-shang-bu-shao-lei-si-t/">解题</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubarray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求出数组和的余数</span></span><br><span class="line">    <span class="keyword">long</span> mod = sum % p;</span><br><span class="line">    <span class="keyword">if</span> (mod == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = n;</span><br><span class="line">    <span class="comment">//我们使用一个哈希表 table，来存储之前前缀和对 P 的余数和所在的索引。（key 为余数；value 为索引）</span></span><br><span class="line">    Map&lt;Long, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    hashMap.put(<span class="number">0L</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += (<span class="keyword">long</span>)nums[i];</span><br><span class="line">        <span class="keyword">long</span> curMod = sum % p;</span><br><span class="line">        hashMap.put(curMod, i);</span><br><span class="line">        <span class="keyword">long</span> targetMod = curMod &gt;= mod ? curMod - mod : curMod - mod + p;</span><br><span class="line">        <span class="keyword">if</span> (hashMap.containsKey(targetMod)) &#123;</span><br><span class="line">            min = Math.min(min, i - hashMap.get(targetMod));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min == n ? -<span class="number">1</span> : min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h2><p>这道题想要达到O(log (m+n))时间复杂度 需要使用二分查找</p>
<p>查看这篇解题的三种解题方式：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/</a></p>
<h2 id="面试题-17-21-直方图的水量"><a href="#面试题-17-21-直方图的水量" class="headerlink" title="面试题 17.21. 直方图的水量"></a><a href="https://leetcode-cn.com/problems/volume-of-histogram-lcci/">面试题 17.21. 直方图的水量</a></h2><p>双指针：当左面最大值小于 右面做大值的时候 水一定能被接住 借助的容积就是 左面最大值 - 当前指针指向的值 反之亦然</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(height.length &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> leftMax = height[left], rightMax = height[right];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftMax &lt; rightMax)&#123;</span><br><span class="line">            res += leftMax - height[left++];</span><br><span class="line">            leftMax = Math.max(leftMax,height[left]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res += rightMax - height[right--];</span><br><span class="line">            rightMax = Math.max(rightMax,height[right]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="面试题-17-10-主要元素"><a href="#面试题-17-10-主要元素" class="headerlink" title="面试题 17.10. 主要元素"></a><a href="https://leetcode-cn.com/problems/find-majority-element-lcci/">面试题 17.10. 主要元素</a></h2><p>通过投票法 投出票数最多的元素 在遍历看这个元素的数量是否超过数组的一半</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> vote = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> main = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vote == <span class="number">0</span>)&#123;</span><br><span class="line">            main = num;</span><br><span class="line">            vote++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(num == main) vote++;</span><br><span class="line">            <span class="keyword">else</span> vote--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> half = nums.length / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    vote = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == main) vote++;</span><br><span class="line">        <span class="keyword">if</span>(vote == half) <span class="keyword">return</span> main;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1535-找出数组游戏的赢家"><a href="#1535-找出数组游戏的赢家" class="headerlink" title="1535. 找出数组游戏的赢家"></a><a href="https://leetcode-cn.com/problems/find-the-winner-of-an-array-game/">1535. 找出数组游戏的赢家</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWinner</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> prev = Math.max(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//如果k == 1 前两个元素之间只有一轮游戏</span></span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        <span class="comment">//比较len轮之后 还如果没有胜出的元素 则返回数组中的最大值</span></span><br><span class="line">        <span class="keyword">int</span> maxNum = prev;</span><br><span class="line">        <span class="comment">//记录连胜的次数</span></span><br><span class="line">        <span class="keyword">int</span> consecutive = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = arr[i];</span><br><span class="line">            <span class="keyword">if</span>(prev &gt; cur)&#123;</span><br><span class="line">                consecutive++;</span><br><span class="line">                <span class="keyword">if</span>(consecutive == k)&#123;</span><br><span class="line">                    <span class="keyword">return</span> prev;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prev = cur;</span><br><span class="line">                consecutive = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            maxNum = Math.max(maxNum,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxNum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1552-两球之间的磁力"><a href="#1552-两球之间的磁力" class="headerlink" title="1552. 两球之间的磁力"></a><a href="https://leetcode-cn.com/problems/magnetic-force-between-two-balls/">1552. 两球之间的磁力</a></h2><p>两球的最小距离的最小值，是1；最小距离的最大值是 (最后位置的球坐标 - 最前位置的球坐标) / (球数-1)，这里需要先对position数组排序，那么易得最小球间距离的最大值为 (position[position.length - 1] - position[0]) / (m-1)<br>有最小和最大，直觉想到二分法。 以二分的中间值，作为间距去摆放球。如果摆放的球数 &gt;=m, 可认为需要增加球间距 （同时保存中间值作为候选答案）； 否则需要减少球间距。<br>一点总结是， 当碰到求最大或最小值的时候，是否可转化为二分法。属于直觉和经验吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="keyword">int</span>[] position, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(position);</span><br><span class="line">        <span class="keyword">int</span> right = (position[position.length-<span class="number">1</span>] - position[<span class="number">0</span>]) / (m - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(position,mid,m))&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>[] position,<span class="keyword">int</span> distance,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; position.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(position[j] - position[i] &gt;= distance)&#123;</span><br><span class="line">                i = j;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(count == m)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>, index = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[left] * A[left] &gt; A[right] * A[right])&#123;</span><br><span class="line">                ans[index] = A[left] * A[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[index] = A[right] * A[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1588-所有奇数长度子数组的和"><a href="#1588-所有奇数长度子数组的和" class="headerlink" title="*1588. 所有奇数长度子数组的和"></a>*<a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/">1588. 所有奇数长度子数组的和</a></h2><p>解题：<a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/cong-on3-dao-on-de-jie-fa-by-liuyubobobo/">https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/cong-on3-dao-on-de-jie-fa-by-liuyubobobo/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left_even = i / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> right_even = (len - i - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left_odd = (i + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> right_odd = (len - i) / <span class="number">2</span>;</span><br><span class="line">            ans += arr[i] * (left_even * right_even + left_odd * right_odd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="628. 三个数的最大乘积"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/">628. 三个数的最大乘积</a></h2><p>先把数组排序 如果没有负数的话 最大值为后三个数的乘积 有负数的话为前两个负数和最后一个元素相乘</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[nums.length - <span class="number">1</span>], nums[nums.length - <span class="number">1</span>] * nums[nums.length - <span class="number">2</span>] * nums[nums.length - <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以不排序数组 找出最小的两个值 和最大的三个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= min1) &#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                min1 = n;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= min2) &#123;     <span class="comment">// n lies between min1 and min2</span></span><br><span class="line">                min2 = n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n &gt;= max1) &#123;            <span class="comment">// n is greater than max1, max2 and max3</span></span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = max1;</span><br><span class="line">                max1 = n;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= max2) &#123;     <span class="comment">// n lies betweeen max1 and max2</span></span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = n;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= max3) &#123;     <span class="comment">// n lies betwen max2 and max3</span></span><br><span class="line">                max3 = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(min1 * min2 * max1, max1 * max2 * max3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="381-O-1-时间插入、删除和获取随机元素-允许重复"><a href="#381-O-1-时间插入、删除和获取随机元素-允许重复" class="headerlink" title="381. O(1) 时间插入、删除和获取随机元素 - 允许重复"></a><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1-duplicates-allowed/">381. O(1) 时间插入、删除和获取随机元素 - 允许重复</a></h2><p><img src="/2020/10/11/%E7%AE%97%E6%B3%95/image-20201022090842197.png" alt="image-20201022090842197"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer,Set&lt;Integer&gt;&gt; map;</span><br><span class="line">    java.util.Random random = <span class="keyword">new</span> java.util.Random();</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;Integer, Set&lt;Integer&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(val)) </span><br><span class="line">            map.put(val,<span class="keyword">new</span> LinkedHashSet&lt;Integer&gt;());</span><br><span class="line">        map.get(val).add(list.size());</span><br><span class="line">        list.add(val);</span><br><span class="line">        <span class="keyword">return</span> map.get(val).size() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(val) || map.get(val).size() == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> remove_index = map.get(val).iterator().next();</span><br><span class="line">        <span class="keyword">int</span> last = list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">        map.get(val).remove(remove_index);</span><br><span class="line">        list.set(remove_index,last);</span><br><span class="line">        map.get(last).add(remove_index);</span><br><span class="line">        map.get(last).remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the collection. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(random.nextInt(list.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228. 汇总区间"></a><a href="https://leetcode-cn.com/problems/summary-ranges/">228. 汇总区间</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">summaryRanges</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; summary = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; nums.length; ++j) &#123;</span><br><span class="line">            <span class="comment">// check if j + 1 extends the range [nums[i], nums[j]]</span></span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[j + <span class="number">1</span>] == nums[j] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// put the range [nums[i], nums[j]] into the list</span></span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                summary.add(nums[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                summary.add(nums[i] + <span class="string">&quot;-&gt;&quot;</span> + nums[j]);</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> summary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity</title>
    <url>/2020/10/06/SpringSecurity/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_22172133/article/details/86503223?ops_request_misc=%7B%22request_id%22:%22160190988819724839218447%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=160190988819724839218447&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v2-1-86503223.first_rank_ecpm_v3_pc_rank_v2&amp;utm_term=springsecurity&amp;spm=1018.2118.3001.4187">参考博客</a> 项目：security</p>
<h1 id="Spring与SpringSecurity"><a href="#Spring与SpringSecurity" class="headerlink" title="Spring与SpringSecurity"></a>Spring与SpringSecurity</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>项目名称：spring_security_management</p>
<p>完成权限管理需要的三个对象</p>
<ul>
<li><p>用户：主要包含用户名，密码和当前用户的角色信息，可实现认证操作。 </p>
</li>
<li><p>角色：主要包含角色名称，角色描述和当前角色拥有的权限信息，可实现授权操作。</p>
</li>
<li><p>权限：权限也可以称为菜单，主要包含当前权限名称，url地址等信息，可实现动态展示菜单。</p>
</li>
<li><p>注：这三个对象中，用户与角色是多对多的关系，角色与权限是多对多的关系，用户与权限没有直接关系， 二者是通过角色来建立关联关系的。</p>
</li>
</ul>
<p>导入jar包</p>
<blockquote>
<p>Spring Security主要jar包功能介绍</p>
<p> spring-security-core.jar 核心包，任何Spring Security功能都需要此包。</p>
<p> spring-security-web.jar web工程必备，包含过滤器和相关的Web安全基础结构代码。</p>
<p> spring-security-config.jar 用于解析xml配置文件，用到Spring Security的xml配置文件的就要用到此包。</p>
<p> spring-security-taglibs.jar Spring Security提供的动态标签库，jsp页面可以用。</p>
</blockquote>
<p>在项目中只需要引入后两个jar包就可以</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在web.xml中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringSecurity核心过滤器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在类路径下创建spring-security.xml进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置springSecurity--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    auto-config表示自动加载springSecurity的配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    use-expressions表示使用spring的el表达式来配置springSecuritty--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:http</span> <span class="attr">auto-config</span>=<span class="string">&quot;true&quot;</span> <span class="attr">use-expressions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截所有资源 只有ROLE_USER角色才能访问资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">access</span>=<span class="string">&quot;hasAnyRole(&#x27;ROLE_UESR&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:http</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置Spring Security认证用户信息的来源--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    noop表示不加密认证--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    先不从数据库中获取 在内存中定义两个用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">security:user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">password</span>=<span class="string">&quot;&#123;noop&#125;user&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">authorities</span>=<span class="string">&quot;ROLE_USER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">security:user</span> <span class="attr">name</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;&#123;noop&#125;admin&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">authorities</span>=<span class="string">&quot;ROLE_ADMIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">security:user-service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有springmvc的项目中有两个容器 一个是父容器 spring的 一个是子容器 springMVC的 子容器能访问父容器 父容器不能访问子容器 外界只能访问子容器 访问不到父容器 所以在父容器中引入spirngSecurity配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    引入springSecurity配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath: spring-security.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>常用过滤器</p>
<ul>
<li>org.springframework.security.web.context.SecurityContextPersistenceFilter:SecurityContextPersistenceFilter主要是使用SecurityContextRepository在session中保存或更新一个 SecurityContext，并将SecurityContext给以后的过滤器使用，来为后续filter建立所需的上下文。 SecurityContext中存储了当前用户的认证以及权限信息</li>
<li>org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter:此过滤器用于集成SecurityContext到Spring异步执行机制中的WebAsyncManager</li>
<li>org.springframework.security.web.header.HeaderWriterFilter：向请求的Header中添加相应的信息,可在http标签内部使用security:headers来控制</li>
<li>org.springframework.security.web.csrf.CsrfFilter:csrf又称跨域请求伪造，SpringSecurity会对所有post请求验证是否包含系统生成的csrf的token信息， 如果不包含，则报错。起到防止csrf攻击的效果。</li>
<li>org.springframework.security.web.authentication.logout.LogoutFilter:匹配URL为/logout的请求，实现用户退出,清除认证信息。</li>
<li>org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter:认证操作全靠这个过滤器，默认匹配URL为/login且必须为POST请求</li>
<li>org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter:如果没有在配置文件中指定认证页面，则由该过滤器生成一个默认认证页面。</li>
<li>org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter:由此过滤器可以生产一个默认的退出登录页面</li>
<li>org.springframework.security.web.authentication.<a href="http://www.basicauthenticationfilter/">www.BasicAuthenticationFilter</a> 此过滤器会自动解析HTTP请求中头部名字为Authentication，且以Basic开头的头信息。</li>
<li>org.springframework.security.web.savedrequest.RequestCacheAwareFilter:通过HttpSessionRequestCache内部维护了一个RequestCache，用于缓存HttpServletRequest</li>
<li>org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter:针对ServletRequest进行了一次包装，使得request具有更加丰富的API</li>
<li>org.springframework.security.web.authentication.AnonymousAuthenticationFilter:当SecurityContextHolder中认证信息为空,则会创建一个匿名用户存入到SecurityContextHolder中。 spring security为了兼容未登录的访问，也走了一套认证流程，只不过是一个匿名的身份。</li>
<li>org.springframework.security.web.session.SessionManagementFilter SecurityContextRepository:限制同一用户开启多个会话的数量</li>
<li>org.springframework.security.web.access.ExceptionTranslationFilter:异常转换过滤器位于整个springSecurityFilterChain的后方，用来转换整个链路中出现的异常</li>
<li>org.springframework.security.web.access.intercept.FilterSecurityInterceptor:获取所配置资源访问的授权信息，根据SecurityContextHolder中存储的用户信息来决定其是否有权 限。</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1EE411u7YV?p=9">过滤器链加载原理</a></p>
<h2 id="使用自定义认证页面"><a href="#使用自定义认证页面" class="headerlink" title="使用自定义认证页面"></a>使用自定义认证页面</h2><p>在spring-security.xml的 &lt;security:http&gt;标签中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        让认证页面可以匿名访问 要在释放所有资源前设置 不然会死循环：</span></span><br><span class="line"><span class="comment">			访问自定义的登录页面没有权限 跳转到默认的登录页面 但是 默认的登录页面被设置为自定义页面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:intercept-url</span> <span class="attr">pattern</span>=<span class="string">&quot;/login.jsp&quot;</span> <span class="attr">access</span>=<span class="string">&quot;permitAll()&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置登录信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--login-processing-url 指定认证的处理器地址 不用自己书写--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--defautl-target-url 默认跳转的页面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--authentication-failure-url 失败跳转页面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--登录验证页面使用username和password接受参数</span></span><br><span class="line"><span class="comment">            可以使用username-parameter password-parameter指定自定义登录页面的自定义的参数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:form-login</span> <span class="attr">login-page</span>=<span class="string">&quot;/login.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">login-processing-url</span>=<span class="string">&quot;/login&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">default-target-url</span>=<span class="string">&quot;/index.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                              <span class="attr">authentication-failure-url</span>=<span class="string">&quot;/failer.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置退出登录信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:logout</span> <span class="attr">logout-url</span>=<span class="string">&quot;/logout&quot;</span> <span class="attr">logout-success-url</span>=<span class="string">&quot;/login.jsp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>在&lt;secruity:http&gt;外配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    释放静态资源 不然页面不能被美化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/css/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/img/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:http</span> <span class="attr">pattern</span>=<span class="string">&quot;/plugins/**&quot;</span> <span class="attr">security</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.jsp的表单提交必须是post方法(后面解释) 并且数据要提交到login处理器</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br></pre></td></tr></table></figure>



<h2 id="csrf拦截"><a href="#csrf拦截" class="headerlink" title="csrf拦截"></a>csrf拦截</h2><p><a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369">什么是csrf</a></p>
<p>为了解决访问不成功的情况 可以关闭csrf拦截(不推荐)或者改变crsf防护措施</p>
<p>关闭csrf拦截：在spring-security.xml的 &lt;security:http&gt;标签中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:csrf</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>crsf防护措施：</p>
<p>在login.jsp中添加tag </p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">&quot;security&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/security/tags&quot;</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在表单中添加下列代码，使form表单携带token</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;security:csrfInput/&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看csrfFilter源码</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201023221021102.png" alt="image-20201023221021102"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201023221037008.png" alt="image-20201023221037008"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201023221055177.png" alt="image-20201023221055177"></p>
<p>只有这四个请求方法 不被csrf拦截 所以login.jsp中的form表单提交方式是post 可以保证安全性 </p>
<h2 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h2><p>在header.jsp中设置注销的处理器logout</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/logout&quot;</span></span><br><span class="line">      class=&quot;btn btn-default btn-flat&quot;&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>但是这种方式是Get方式  不会被csrf拦截 不能保证安全 要改成post方法  </p>
<p>在head.jsp中添加tag</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib prefix=<span class="string">&quot;security&quot;</span> uri=<span class="string">&quot;http://www.springframework.org/security/tags&quot;</span> </span><span class="xml"><span class="tag">%&gt;</span>	`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;pull-right&quot;</span></span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/logout&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">	  &lt;security:csrfInput/&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注销&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="用数据库信息做认证"><a href="#用数据库信息做认证" class="headerlink" title="用数据库信息做认证"></a>用数据库信息做认证</h2><p>使UserService接口继承UserDetailsService</p>
<p>并在UserServiceImpl中实现loadUesrByUesrname方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户在浏览器中输入的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UserDetails 是springSecurity自己的用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SysUser user = userDao.findByName(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//返回null代表认证失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;SysRole&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">for</span>(SysRole role:roles)&#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleName()));</span><br><span class="line">        &#125;</span><br><span class="line">        UserDetails userDetails = <span class="keyword">new</span> User(user.getUsername(),<span class="string">&quot;&#123;noop&#125;&quot;</span>+user.getPassword(),authorities);</span><br><span class="line">        <span class="keyword">return</span> userDetails;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并在spring-security.xml中进行修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security:authentication-manager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输入数据库中存储的usr的用户名和密码即可登录</p>
<p>在用户管理 修改角色 保存的时候会被csrf拦截 需要在user-role-add.jsp中进行配置</p>
<h2 id="加密认证"><a href="#加密认证" class="headerlink" title="加密认证"></a>加密认证</h2><p>在spring-security.xml中进行配置  把{noop}去掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;passwordEncoder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder&quot;</span></span></span><br><span class="line">&lt;security:authentication-manager&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">security:authentication-provider</span> <span class="attr">user-service-ref</span>=<span class="string">&quot;userServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">security:password-encoder</span> <span class="attr">ref</span>=<span class="string">&quot;passwordEncoder&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">security:authentication-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security:authentication-manager</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在UserServiceImpl中注入 BCryptPasswordEncoder 并修改save方法 在保存用户的时候加密密码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUser user)</span> </span>&#123;</span><br><span class="line">    user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">    userDao.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录时发现登录不上 因为输入的密码时明文 数据库中的数据是加密后的密码 </p>
<p>并且密码错误的时候 不会跳转到失败页面 因为 失败页面需要权限 user或admin 登录失败的话没有权限 所以要把failer.jsp放行</p>
<h2 id="认证用户状态的判断"><a href="#认证用户状态的判断" class="headerlink" title="认证用户状态的判断"></a>认证用户状态的判断</h2><p>UserDetails的实现类User的另一个构造方法多出了4个bool值 默认为true</p>
<ul>
<li>boolean enabled 是否可用</li>
<li>boolean accountNonExpired 账户是否失效</li>
<li>boolean credentialsNonExpired 秘密是否失效</li>
<li>boolean accountNonLocked 账户是否锁定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDetails userDetails = <span class="keyword">new</span> User(user.getUsername(),user.getPassword(),user.getStatus() == <span class="number">1</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,authorities);</span><br></pre></td></tr></table></figure>

<h2 id="Remember-me"><a href="#Remember-me" class="headerlink" title="Remember-me"></a>Remember-me</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;checkbox icheck&quot;</span>&gt;</span><br><span class="line">   &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot; value=&quot;true&quot;&gt; 记住 下次自动登录&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>name的值一定是remember-me</p>
<p>查看源码 UsernamePasswordAuthenticationFilter的父类AbstractAuthenticationProcessingFilter的认证成功的方法successfulAuthentication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*/</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">		HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span></span><br><span class="line">				+ authResult);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//把认证后得到的结果 放入到容器中</span></span><br><span class="line">	SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Fire event</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">		eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">				authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看loginSuccess接口的实现类AbstractRememberMeServices </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//parameter被定义为remember-me</span></span><br><span class="line">   <span class="keyword">if</span> (!rememberMeRequested(request, parameter)) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Remember-me login not requested.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   onLoginSuccess(request, response, successfulAuthentication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看rememberMeRequested方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">rememberMeRequested</span><span class="params">(HttpServletRequest request, String parameter)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (alwaysRemember) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String paramValue = request.getParameter(parameter);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (paramValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//这四个值都会开启remember-me功能</span></span><br><span class="line">      <span class="keyword">if</span> (paramValue.equalsIgnoreCase(<span class="string">&quot;true&quot;</span>) || paramValue.equalsIgnoreCase(<span class="string">&quot;on&quot;</span>)</span><br><span class="line">            || paramValue.equalsIgnoreCase(<span class="string">&quot;yes&quot;</span>) || paramValue.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Did not send remember-me cookie (principal did not set parameter &#x27;&quot;</span></span><br><span class="line">            + parameter + <span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看onLoginSucess的实现类PersistentTokenBasedRememberMeServices</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLoginSuccess</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;</span><br><span class="line">   String username = successfulAuthentication.getName();</span><br><span class="line"></span><br><span class="line">   logger.debug(<span class="string">&quot;Creating new persistent login for user &quot;</span> + username);</span><br><span class="line"></span><br><span class="line">   PersistentRememberMeToken persistentToken = <span class="keyword">new</span> PersistentRememberMeToken(</span><br><span class="line">         username, generateSeriesData(), generateTokenData(), <span class="keyword">new</span> Date());</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//把token持久化到数据库中</span></span><br><span class="line">      tokenRepository.createNewToken(persistentToken);</span><br><span class="line">       <span class="comment">//把token写入到浏览器的cookie中</span></span><br><span class="line">      addCookie(persistentToken, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Failed to save persistent token &quot;</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启remember-me过滤器 设置token存储时间为60s--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:remember-me</span> <span class="attr">token-validity-seconds</span>=<span class="string">&quot;60&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>安全分析</p>
<p>remember-me功能方便是大家看得见的，但是安全性却令人担忧。因为Cookie毕竟是保存在客户端的，很容易盗取，而且 cookie的值还与用户名、密码这些敏感数据相关，虽然加密了，但是将敏感信息存在客户端，还是不太安全。那么 这就要提醒喜欢使用此功能的，用完网站要及时手动退出登录，清空认证信息。 此外，SpringSecurity还提供了remember me的另一种相对更安全的实现机制 :在客户端的cookie中，仅保存一个 无意义的加密串（与用户名、密码等敏感数据无关），然后在db中保存该加密串-用户信息的对应关系，自动登录 时，用cookie中的加密串，到db中验证，如果通过，自动登录才算通过。</p>
<p>创建一个表 注意这张表的名称和字段都是固定的，不要修改。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`persistent_logins`</span> (</span><br><span class="line"><span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`series`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`token`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_used`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`series`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>在spring-security.xml中进行修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	开启remember me过滤器，</span></span><br><span class="line"><span class="comment">	data-source-ref=&quot;dataSource&quot; 指定数据库连接池</span></span><br><span class="line"><span class="comment">	token-validity-seconds=&quot;60&quot; 设置token存储时间为60秒 可省略</span></span><br><span class="line"><span class="comment">	remember-me-parameter=&quot;remember-me&quot; 指定记住的参数名 可省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security:remember-me</span> <span class="attr">data-source-ref</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">					  <span class="attr">token-validity-seconds</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">					  <span class="attr">remember-me-parameter</span>=<span class="string">&quot;remember-me&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="认证通过后显示当前认证的用户名"><a href="#认证通过后显示当前认证的用户名" class="headerlink" title="认证通过后显示当前认证的用户名"></a>认证通过后显示当前认证的用户名</h2><p>使用动态标签：在header.jsp中导入springSecurity的标签</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hidden-xs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%--</span>&lt;<span class="attr">security:authentication</span> <span class="attr">property</span>=<span class="string">&quot;principal.username&quot;</span> /&gt;</span>--%&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">security:authentication</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这两种方式都能获取到用户名</p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="页面控制菜单的显示或隐藏"><a href="#页面控制菜单的显示或隐藏" class="headerlink" title="页面控制菜单的显示或隐藏"></a>页面控制菜单的显示或隐藏</h3><p>在aside.jsp中引入动态标签</p>
<p>使用&lt;security:authorize&gt; 对不同的角色展示不同的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;treeview-menu&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">security:authorize</span> <span class="attr">access</span>=<span class="string">&quot;hasAnyRole(&#x27;ROLE_PRODUCT&#x27;,&#x27;ROLE_USER&#x27;)&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;system-setting&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/product/findAll&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-circle-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 产品管理</span><br><span class="line">             <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">security:authorize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">security:authorize</span> <span class="attr">access</span>=<span class="string">&quot;hasAnyRole(&#x27;ROLE_ORDER&#x27;,&#x27;ROLE_USER&#x27;)&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;system-setting&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/order/findAll&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-circle-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 订单管理</span><br><span class="line">             <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">security:authorize</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 现在虽然不同角色的用户看到的内容不同 但是 当一个order想要看product的内容时可以通过url进行访问</p>
<h3 id="IOC容器结构说明"><a href="#IOC容器结构说明" class="headerlink" title="IOC容器结构说明"></a>IOC容器结构说明</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201026154731075.png" alt="image-20201026154731075">    </p>
<p>Controller是子容器 Service是父容器</p>
<p>权限控制的注解要加在service层 安全性较高 现在项目中没有写order和product的业务层代码 所以先把注解写在controller层</p>
<h3 id="开启动态权限注解支持"><a href="#开启动态权限注解支持" class="headerlink" title="开启动态权限注解支持"></a>开启动态权限注解支持</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201026155851547.png" alt="image-20201026155851547"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201026155902297.png" alt="image-20201026155902297"></p>
<p>注解和注解支持必须配套 也就是说要同时在父容器或者同时在主容器：springsecurity.xml被父容器application.xml引用 </p>
<p>而@Secured注解在子容器上 所以不匹配 要把注解支持放在子容器spring-mvc.xml中</p>
<h3 id="动态权限注解使用说明"><a href="#动态权限注解使用说明" class="headerlink" title="动态权限注解使用说明"></a>动态权限注解使用说明</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Secured(&#123;&quot;ROLE_PRODUCT&quot;,&quot;ROLE_USER&quot;&#125;) //springsecurity内部制定的注解</span><br><span class="line">@RolesAllowed(&#123;&quot;ROLE_PRODUCT&quot;,&quot;ROLE_USER&quot;&#125;) //jsr250注解</span><br><span class="line">@PreAuthorize(&quot;hasAnyAuthority(&#x27;ROLE_PRODUCT&#x27;,&#x27;ROLE_USER&#x27;)&quot;)//spring指定的注解 需要使用el表达式 hasAnyRole也可以</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>方法一：在spring-security.xml中进行配置 这种方式比较单一 这能处理403异常</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">security</span>:<span class="keyword">access</span>-denied-<span class="keyword">handler</span> error-page=&quot;/403.jsp&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>方法二：在web.xml中进行配置 处理各种异常 这种方式只适合web项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法三：使用处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerControllerException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 出现异常的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 出现的异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ModelAndView</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//将异常信息放入request域 基本不用</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;errorMsg&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="comment">//指定不同异常跳转的页面</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AccessDeniedException)&#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;redirect:/403.jsp&quot;</span>); <span class="comment">//redict和forward不经过视图解析器</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;redirect:/500.jsp&quot;</span>); <span class="comment">//redict和forward不经过视图解析器</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简易写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerControllerAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(AccessDeniedException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handlerException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/403.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">runtimeException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/500.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot与SpringSecurity"><a href="#SpringBoot与SpringSecurity" class="headerlink" title="SpringBoot与SpringSecurity"></a>SpringBoot与SpringSecurity</h1><h2 id="集中式版"><a href="#集中式版" class="headerlink" title="集中式版"></a>集中式版</h2><p>项目：springboot_security_jsp前端页面直接复用上一个项目</p>
<p>导入jar包：导入后就为项目配置了默认的安全认证</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>集中式的项目一般使用jsp 但是springboot官方不推荐使用jsp 想使用的话 需要导入tomcat插件启动项目 不能再用springboot默认的tomcat了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把登录和注销的url改成login和logout处理器</p>
<p>创建一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>使自己的类继承UserDetails并覆盖方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">//返回角色</span></span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@jsonIgnoreL对象可能会和json字符串互相转换 需要将重写的属性忽略掉</p>
<p>创建role的mapper和user的mapper</p>
<p>使UserService继承UserDetailsService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findByName(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再配置类中指定认证对象的来源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.userDetailsService(userService).passwordEncoder(passwordEncoder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启动态授权 ：再配置类上添加@EnableGlobalMethodSecurity(securedEnabled=true) 查看源码 也有三种方式</p>
<p>再controller中的方法上添加注解：@Secured(“ROLE_PRODUCT”)</p>
<p>异常处理和spring处理方式相同</p>
<h2 id="分布式版"><a href="#分布式版" class="headerlink" title="分布式版"></a>分布式版</h2><p>项目：spirngboot_security_jwt_rsa_parent</p>
<p>分布式是单点登录的</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027084357515.png" alt="image-20201027084357515"></p>
<p>token的安全与否，直接关系到系统的 健壮性，这里我们选择使用JWT来实现token的生成和校验。</p>
<p>JWT，全称JSON Web Token 是一款出色的分布式身份校验方案。可以生成token，也可 以解析检验token。</p>
<p>JWT生成的token由三部分组成：</p>
<ul>
<li>头部：主要设置一些规范信息，签名部分的编码格式就在头部中声明。</li>
<li>载荷：token中存放有效信息的部分，比如用户名，用户角色，过期时间等，但是不要放密码，会泄露！</li>
<li>签名：将头部与载荷分别采用base64编码后，用“.”相连，再加入盐，最后使用头部声明的编码类型进行编 码，就得到了签名。</li>
</ul>
<p>从JWT生成的token组成上来看，要想避免token被伪造，主要就得看签名部分了，而签名部分又有三部分组成，其 中头部和载荷的base64编码，几乎是透明的，毫无安全性可言，那么最终守护token安全的重担就落在了加入的盐上面了！</p>
<p>试想：如果生成token所用的盐与解析token时加入的盐是一样的。岂不是类似于中国人民银行把人民币防伪技术 公开了？大家可以用这个盐来解析token，就能用来伪造token。</p>
<p>这时，我们就需要对盐采用非对称加密(RAS)的方式进行加密，以达到生成token与校验token方所用的盐不一致的安全 效果！</p>
<p>RAS</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027084854865.png" alt="image-20201027084854865"></p>
<p>jwt相关工具类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分布式认证流程</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027090522281.png" alt="image-20201027090522281"></p>
<h3 id="common模块"><a href="#common模块" class="headerlink" title="common模块"></a>common模块</h3><p> 为了方便后期获取token中的用户信息，将token中载荷部分单独封装成一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> T userInfo;</span><br><span class="line">    <span class="keyword">private</span> Date expiration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三个工具类</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027092638446.png" alt="image-20201027092638446"></p>
<p>再测试类中生成公钥和私钥</p>
<h3 id="认证模块"><a href="#认证模块" class="headerlink" title="认证模块"></a>认证模块</h3><p>创建一个配置类 在applacation.yml中配置公钥和私钥的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;rsa.key&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaKeyProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyFile;</span><br><span class="line">    <span class="keyword">private</span> String priKeyFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createRsaKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publicKey = RsaUtils.getPublicKey(pubKeyFile);</span><br><span class="line">        privateKey = RsaUtils.getPrivateKey(priKeyFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目启动的时候把这个配置类放到ioc容器中</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027094026084.png" alt="image-20201027094026084"></p>
<p>重写认证的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtLoginFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户输入的账号和密码</span></span><br><span class="line">            SysUser sysUser = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), SysUser.class);</span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(sysUser.getUsername(), sysUser.getPassword());</span><br><span class="line">            <span class="keyword">return</span> authenticationManager.authenticate(authRequest);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                PrintWriter out = response.getWriter();</span><br><span class="line">                Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">                resultMap.put(<span class="string">&quot;code&quot;</span>, HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception outEx)&#123;</span><br><span class="line">                outEx.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//认证成功 返回一个token</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        SysUser user = <span class="keyword">new</span> SysUser();</span><br><span class="line">        user.setUsername(authResult.getName());</span><br><span class="line">        user.setRoles((List&lt;SysRole&gt;) authResult.getAuthorities());</span><br><span class="line">        String token = JwtUtils.generateTokenExpireInMinutes(user, prop.getPrivateKey(), <span class="number">24</span> * <span class="number">60</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span>+token);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            resultMap.put(<span class="string">&quot;code&quot;</span>, HttpServletResponse.SC_OK);</span><br><span class="line">            resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;认证通过！&quot;</span>);</span><br><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception outEx)&#123;</span><br><span class="line">            outEx.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写验证的处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtVerifyFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtVerifyFilter</span><span class="params">(AuthenticationManager authenticationManager, RsaKeyProperties prop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">        <span class="keyword">this</span>.prop = prop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        String header = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span> || !header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果携带错误的token，则给用户提示请登录！</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            Map resultMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            resultMap.put(<span class="string">&quot;code&quot;</span>, HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">            resultMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请登录！&quot;</span>);</span><br><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(resultMap));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果携带了正确格式的token要先得到token</span></span><br><span class="line">            String token = header.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//验证tken是否正确</span></span><br><span class="line">            Payload&lt;SysUser&gt; payload = JwtUtils.getInfoFromToken(token, prop.getPublicKey(), SysUser.class);</span><br><span class="line">            SysUser user = payload.getUserInfo();</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                UsernamePasswordAuthenticationToken authResult = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(), <span class="keyword">null</span>, user.getAuthorities());</span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RsaKeyProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定认证对象的来源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SpringSecurity配置信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf()</span><br><span class="line">            .disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/product&quot;</span>).hasAnyRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .addFilter(<span class="keyword">new</span> JwtLoginFilter(<span class="keyword">super</span>.authenticationManager(), prop))</span><br><span class="line">            .addFilter(<span class="keyword">new</span> JwtVerifyFilter(<span class="keyword">super</span>.authenticationManager(), prop))</span><br><span class="line">            <span class="comment">//分布式中不需要session 关闭session会话</span></span><br><span class="line">            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>csrf如果放到最后 就认为配置完了 他的后面不能接and()方法</p>
<h3 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h3><p>删除私钥的相关配置 删除验证的filter</p>
<h1 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h1><p>介绍</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027103837995.png" alt="image-20201027103837995"></p>
<h2 id="四种授权模式"><a href="#四种授权模式" class="headerlink" title="四种授权模式"></a>四种授权模式</h2><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027134625845.png" alt="image-20201027134625845"></p>
<h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027134905409.png" alt="image-20201027134905409"></p>
<h3 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027141026128.png" alt="image-20201027141026128"></p>
<h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027141037837.png" alt="image-20201027141037837"></p>
<h3 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027141155826.png" alt="image-20201027141155826"></p>
<h2 id="OAuth2再项目中的使用"><a href="#OAuth2再项目中的使用" class="headerlink" title="OAuth2再项目中的使用"></a>OAuth2再项目中的使用</h2><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027142016480.png" alt="image-20201027142016480"></p>
<p>建表：oauth2</p>
<p>oauth_client_details</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027142906886.png" alt="image-20201027142906886"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027142928308.png" alt="image-20201027142928308"></p>
<h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="资源服务器-1"><a href="#资源服务器-1" class="headerlink" title="资源服务器"></a>资源服务器</h3><p>其他服务可以通过token在资源服务器中访问资源</p>
<p>创建配置类:把当前服务器交给oauth2的一个资源服务管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span> <span class="comment">//作为资源服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OauthSourceConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定token的持久化策略</span></span><br><span class="line"><span class="comment">     * InMemoryTokenStore表示将token存储在内存</span></span><br><span class="line"><span class="comment">     * Redis表示将token存储在redis中</span></span><br><span class="line"><span class="comment">     * JdbcTokenStore存储在数据库中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">jdbcTokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTokenStore(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定当前资源的id和存储方案</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resources</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.resourceId(<span class="string">&quot;product_api&quot;</span>).tokenStore(jdbcTokenStore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//指定不同请求方式访问资源所需要的权限，一般查询是read，其余是write。</span></span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;read&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.POST, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;write&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.PATCH, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;write&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.PUT, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;write&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.DELETE, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;#oauth2.hasScope(&#x27;write&#x27;)&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .headers().addHeaderWriter((request, response) -&gt; &#123;</span><br><span class="line">            response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);<span class="comment">//允许跨域</span></span><br><span class="line">            <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;OPTIONS&quot;</span>)) &#123;<span class="comment">//如果是跨域的预检请求，则原封不动向下传达请求头信息</span></span><br><span class="line">                response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, request.getHeader(<span class="string">&quot;Access-Control-Request-Method&quot;</span>));</span><br><span class="line">                response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, request.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入校检用户所需对象：用户是否能访问当前资源 </p>
<p>导入jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入用户对象：这个对象是给token用的 jwt中token是自己生成的 所以需要自己做验证 但是oauth2不是 所以需要导入用户对象 等到token验证的时候使用 </p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027145802700.png" alt="image-20201027145802700"></p>
<h3 id="认证服务"><a href="#认证服务" class="headerlink" title="认证服务"></a>认证服务</h3><p>在WebSecurityConfig中加入下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AuthenticationManager对象在OAuth2认证服务中要使用，提前放入IOC容器中</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建oauth2的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OauthServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库连接池对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证业务对象:和springSecurity的认证是相互平行的</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权模式专用对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//客户端信息来源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcClientDetailsService <span class="title">jdbcClientDetailsService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//token保存策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTokenStore(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权信息保存策略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApprovalStore <span class="title">approvalStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcApprovalStore(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权码模式数据来源</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationCodeServices <span class="title">authorizationCodeServices</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcAuthorizationCodeServices(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定客户端信息的数据库来源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.withClientDetails(jdbcClientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查token的策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//允许客户端以form表单的方式将token传达给你 否则只接受post请求</span></span><br><span class="line">        security.allowFormAuthenticationForClients();</span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//OAuth2的主配置信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .approvalStore(approvalStore())</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .authorizationCodeServices(authorizationCodeServices())</span><br><span class="line">                .tokenStore(tokenStore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向oauth_client_details中手动添加数据</p>
<h3 id="授权码模式测试"><a href="#授权码模式测试" class="headerlink" title="授权码模式测试"></a>授权码模式测试</h3><p>1.A系统向B系统申请授权码</p>
<p>在地址栏访问：<a href="http://localhost:9001/oauth/authorize?response_type=code&amp;client_id=bob">http://localhost:9001/oauth/authorize?response_type=code&amp;client_id=bob</a> </p>
<p>2.如果用户想授予A系统访问B系统的权限 需要先登录B系统</p>
<p>跳转到SpringSecurity默认认证页面，提示用户登录个人账户【这里是sys_user表中的数据】 登录后跳转到授权页面 选择approve 地址栏上会出授权码(code=FHeOhN)</p>
<p>3.在postman中进行测试</p>
<p>获取token</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027192138055.png" alt="image-20201027192138055"></p>
<p>通过token 访问资源</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027192322485.png" alt="image-20201027192322485"></p>
<h3 id="简化模式测试"><a href="#简化模式测试" class="headerlink" title="简化模式测试"></a>简化模式测试</h3><p>是授权码模式的简化</p>
<p>在地址栏中访问：<a href="http://localhost:9001/oauth/authorize?response_type=token&amp;client_id=bob">http://localhost:9001/oauth/authorize?response_type=token&amp;client_id=bob</a></p>
<p>在地址栏中直接返回token</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027193505638.png" alt="image-20201027193505638"></p>
<h3 id="密码模式测试"><a href="#密码模式测试" class="headerlink" title="密码模式测试"></a>密码模式测试</h3><p>不需要在地址栏中进行访问了</p>
<p>直接在postman中进行测试</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027194244309.png" alt="image-20201027194244309"></p>
<h3 id="客户端模式测试"><a href="#客户端模式测试" class="headerlink" title="客户端模式测试"></a>客户端模式测试</h3><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027194511486.png" alt="image-20201027194511486"></p>
<h3 id="刷新token测试"><a href="#刷新token测试" class="headerlink" title="刷新token测试"></a>刷新token测试</h3><p>刷新token的时候需要验证当前用户是否已经通过验证 需要在OauthServerConfig里的config方法中增加一条配置</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027195405343.png" alt="image-20201027195405343"></p>
<p>授权码只能使用一次  </p>
<p>想要再次获取token需要刷利用refresh_token新token</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027200048876.png" alt="image-20201027200048876"></p>
<h3 id="权限相关测试"><a href="#权限相关测试" class="headerlink" title="权限相关测试"></a>权限相关测试</h3><p>如果resource_id不符合 能获取到授权码 但是访问资源的时候会被拒绝</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027200454873.png" alt="image-20201027200454873"></p>
<p>开启动态权限认证</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027200614786.png" alt="image-20201027200614786"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027200834768.png" alt="image-20201027200834768"></p>
<h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><h2 id="jwt和传统认证对比"><a href="#jwt和传统认证对比" class="headerlink" title="jwt和传统认证对比"></a>jwt和传统认证对比</h2><p>基于传统的session认证</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027223347608.png" alt="image-20201027223347608"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027223127872.png" alt="image-20201027223127872"></p>
<p>基于JWT认证</p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027223523496.png" alt="image-20201027223523496"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201027224645065.png" alt="image-20201027224645065"></p>
<h2 id="jwt结构"><a href="#jwt结构" class="headerlink" title="jwt结构"></a>jwt结构</h2><p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201028071311827.png" alt="image-20201028071311827"></p>
<p><img src="/2020/10/06/SpringSecurity/log\source_posts\SpringSecurity\image-20201028071719291.png" alt="image-20201028071719291"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>导入jar包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">    <span class="section">&lt;groupId&gt;</span><span class="attribute">com</span>.auth<span class="number">0</span>&lt;/groupId&gt;</span><br><span class="line">    <span class="section">&lt;artifactId&gt;</span><span class="attribute">java</span>-jwt&lt;/artifactId&gt;</span><br><span class="line">    <span class="section">&lt;version&gt;</span><span class="attribute">3</span>.<span class="number">4</span>.<span class="number">0</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWT_Demo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Generate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,<span class="number">600</span>);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;userId&quot;</span>,<span class="number">21</span>)</span><br><span class="line">                .withClaim(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;bob&quot;</span>)</span><br><span class="line">                .withExpiresAt(calendar.getTime())</span><br><span class="line">                .sign(Algorithm.HMAC256(<span class="string">&quot;dsf&quot;</span>));</span><br><span class="line">        System.out.println(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(<span class="string">&quot;dsf&quot;</span>)).build();</span><br><span class="line">        DecodedJWT verify = jwtVerifier.verify(<span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6ImJvYiIsImV4cCI6MTYwMzg0Mjk2MSwidXNlcklkIjoyMX0.e4L6lswZH6BiWh-0fQ11iSxrJWdAFEwOPRfdLWIo6s0&quot;</span>);</span><br><span class="line">        String userName = verify.getClaim(<span class="string">&quot;userName&quot;</span>).asString();</span><br><span class="line">        <span class="keyword">int</span> userID = verify.getClaim(<span class="string">&quot;userId&quot;</span>).asInt();</span><br><span class="line">        System.out.println(userName);</span><br><span class="line">        System.out.println(userID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>leyou</title>
    <url>/2020/10/19/leyou/</url>
    <content><![CDATA[<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="注册中心leyou-registy"><a href="#注册中心leyou-registy" class="headerlink" title="注册中心leyou-registy"></a>注册中心leyou-registy</h2><p>eureka</p>
<ul>
<li><p>服务下线：当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。</p>
</li>
<li><p>失效剔除：有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔n秒对所有失效的服务（超过90秒未响应）进行剔除。可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒</p>
</li>
<li><p>自我保护：当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。</p>
<p>但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式</p>
</li>
</ul>
<p>客户端开启eureka使用@EnableDiscoveryClient 服务端开启eureka使用@EnableEurekaServer</p>
<h2 id="网关leyou-getway"><a href="#网关leyou-getway" class="headerlink" title="网关leyou-getway"></a>网关leyou-getway</h2><p>eureka</p>
<ul>
<li>当服务消费者启动时，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true(默认)，则会拉取Eureka Server服务的列表只读备份，然后缓存在本地</li>
</ul>
<p>item-service是微服务的应用名 /item/**是映射路径</p>
<p><img src="/2020/10/19/leyou/image-20201019154656989.png" alt="image-20201019154656989"></p>
<h2 id="商品微服务leyou-items"><a href="#商品微服务leyou-items" class="headerlink" title="商品微服务leyou-items"></a>商品微服务leyou-items</h2><p>创建商品的微服务模块leyou-item-service和接口模块leyou-item-interface</p>
<p>在leyou-item-service中导入了<a href="https://blog.csdn.net/qq360452913/article/details/86585468?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight">actuator</a>:是监控系统健康情况的工具</p>
<p><img src="/2020/10/19/leyou/image-20201019162157112.png" alt="image-20201019162157112"></p>
<h3 id="品牌新增"><a href="#品牌新增" class="headerlink" title="品牌新增"></a>品牌新增</h3><h4 id="QS工具"><a href="#QS工具" class="headerlink" title="QS工具"></a>QS工具</h4><p>QS是一个第三方库，我们可以用<code>npm install qs --save</code>来安装。不过我们在项目中已经集成了，大家无需安装：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1530696509189-1604835487386.png" alt="1530696509189"></p>
<p>这个工具的名字：QS，即Query String，请求参数字符串。</p>
<p>什么是请求参数字符串？例如： name=jack&amp;age=21</p>
<p>QS工具可以便捷的实现 JS的Object与QueryString的转换。</p>
<p>在我们的项目中，将QS注入到了Vue的原型对象中，我们可以通过<code>this.$qs</code>来获取这个工具：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1539821449329-1604835487386.png" alt="1539821449329"></p>
<p>我们将<code>this.$qs</code>对象打印到控制台：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$qs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其中有3个方法：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1532850873556-1604835487386.png" alt="1532850873556"></p>
<p>这里我们要使用的方法是stringify，它可以把Object转为QueryString。</p>
<p>测试一下，使用浏览器工具，把qs对象保存为一个临时变量temp1，然后调用stringify方法：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\qs-2-1604835487388.gif" alt="1526182230872"></p>
<p>成功将person对象变成了 name=zhangsan&amp;age=30的字符串了</p>
<h4 id="deBug"><a href="#deBug" class="headerlink" title="deBug"></a>deBug</h4><p>为表中的主键添加注解@Id 不然mapper不能确定哪个字段为主键 在调用brandMapper.deleteByPrimaryKey(id)的时候错把name当成了主键</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201108204844641.png" alt="image-20201108204844641"></p>
<h3 id="品牌编辑"><a href="#品牌编辑" class="headerlink" title="品牌编辑"></a>品牌编辑</h3><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201110204230166.png" alt="image-20201110204230166"></p>
<p>前端可能是put或者post请求 后端方法的注解要用@RequestMapping</p>
<p>编辑的时候发现虽然brand插入了表中但是没有插入到brand和category的中间表中 原因是无法获取到新插入brand自增id</p>
<p>为brand的主键增加一个注解</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201111081741545.png" alt="image-20201111081741545"></p>
<p>这样brand中就有了自增id</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201111081831355.png" alt="image-20201111081831355"></p>
<h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>项目：FileUpload</p>
<h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><p>图片上传的表单的enctype取值为Multipart/form-data会把表单分为几个部分提交 而不是value1=key&amp;value2=key的形式</p>
<p>需要文件上传的jar包：common-fileupload和common-io</p>
<p>在index.jsp中设置表单</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;	</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--multipart使表单分为几部分上传--%&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> action=<span class="string">&quot;/FileUpload_war_exploded/user/fileUpLoad&quot;</span>&gt;</span><br><span class="line">        选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upLoad&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>在springMVC.xml中定义视图解析器 </p>
<p>在web.xml中加载springMVC.xml</p>
<p>在controller中定义方法实现文件上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">FileUpLoad</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">111</span>);</span><br><span class="line">    <span class="comment">//使用fileUpload组件进行文件上传</span></span><br><span class="line">    <span class="comment">//上传的位置 如果不存在就创建:D:\IDEAWorkPlace\FileUpload\target\FileUpload\\uploads</span></span><br><span class="line">    String realPath = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="number">333</span>);</span><br><span class="line">    <span class="comment">//解析request对象 获取文件上传项</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">//解析request</span></span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    <span class="keyword">for</span>(FileItem item : items)&#123;</span><br><span class="line">        <span class="comment">//判断是否是文件项</span></span><br><span class="line">        <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">            <span class="comment">//普通表单项</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String fileName = item.getName();</span><br><span class="line">            <span class="comment">//把文件名称设置为唯一值</span></span><br><span class="line">            String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">            <span class="comment">//完成文件上传</span></span><br><span class="line">            item.write(<span class="keyword">new</span> File(realPath,fileName));</span><br><span class="line">            <span class="comment">//删除临时文件：当上传的文件大于10kb 会产生临时文件 小于10kb 在内存中生成缓存</span></span><br><span class="line">            item.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="springMVC实现文件上传"><a href="#springMVC实现文件上传" class="headerlink" title="springMVC实现文件上传"></a>springMVC实现文件上传</h4><p>在SpringMVC.xml中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsFileUploadSupport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>input的name和接收文件的mulitPartFile的名字必须相同</p>
<p>编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;springMVCFileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">SpringMVCFileUpLoad</span><span class="params">(HttpServletRequest request, MultipartFile upLoad)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//使用fileupload组件进行文件上传</span></span><br><span class="line">    <span class="comment">//上传的位置 如果不存在就创建</span></span><br><span class="line">    String realPath = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    String fileName = upLoad.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    upLoad.transferTo(<span class="keyword">new</span> File(realPath,fileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="跨服务器上传"><a href="#跨服务器上传" class="headerlink" title="跨服务器上传"></a>跨服务器上传</h4><p>导入jar包：jersey-client,jersey-core</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;overServerFileUpLoad&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">OverServerFileUpLoad</span><span class="params">(MultipartFile upLoad)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//定义上传服务器路径</span></span><br><span class="line">    String path = <span class="string">&quot;http://localhost:9090/fileUpload_war/uploads/&quot;</span>;</span><br><span class="line">    String fileName = upLoad.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    <span class="comment">//创建客户端连接对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">//和图片服务器建立连接</span></span><br><span class="line">    WebResource resource =  client.resource(path+fileName);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    resource.put(upLoad.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="FastDFS实现文件上传"><a href="#FastDFS实现文件上传" class="headerlink" title="FastDFS实现文件上传"></a>FastDFS实现文件上传</h4><h5 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h5><p>分布式文件系统（Distributed File System）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点相连。 </p>
<p>通俗来讲：</p>
<ul>
<li>传统文件系统管理的文件就存储在本机。</li>
<li>分布式文件系统管理的文件存储在很多机器，这些机器通过网络连接，要被统一管理。无论是上传或者访问文件，都需要通过管理中心来访问</li>
</ul>
<h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205318630.png?lastModify=1604900743" alt="1526205318630"></p>
<p>FastDFS两个主要的角色：Tracker Server 和 Storage Server 。</p>
<ul>
<li>Tracker Server：跟踪服务器，主要负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽。 </li>
<li>Storage Server：存储服务器，保存文件和文件的meta data（元数据），每个storage server会启动一个单独的线程主动向Tracker cluster中每个tracker server报告其状态信息，包括磁盘使用情况，文件同步情况及文件上传下载次数统计等信息</li>
<li>Group：文件组，多台Storage Server的集群。上传一个文件到同组内的一台机器上后，FastDFS会将该文件即时同步到同组内的其它所有机器上，起到备份的作用。不同组的服务器，保存的数据不同，而且相互独立，不进行通信。 </li>
<li>Tracker Cluster：跟踪服务器的集群，有一组Tracker Server（跟踪服务器）组成。</li>
<li>Storage Cluster ：存储集群，有多个Group组成。</li>
</ul>
<h5 id="上传和下载流程"><a href="#上传和下载流程" class="headerlink" title="上传和下载流程"></a>上传和下载流程</h5><p><strong>上传</strong></p>
<p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205664373.png?lastModify=1604900857" alt="1526205664373"></p>
<ol>
<li>Client通过Tracker server查找可用的Storage server。</li>
<li>Tracker server向Client返回一台可用的Storage server的IP地址和端口号。</li>
<li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并进行文件上传。</li>
<li>上传完成，Storage server返回Client一个文件ID，文件上传结束。</li>
</ol>
<p><strong>下载</strong></p>
<p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/%E5%93%81%E7%89%8C%E7%AE%A1%E7%90%86/assets/1526205705687.png?lastModify=1604900878" alt="1526205705687"></p>
<ol>
<li>Client通过Tracker server查找要下载文件所在的的Storage server。</li>
<li>Tracker server向Client返回包含指定文件的某个Storage server的IP地址和端口号。</li>
<li>Client直接通过Tracker server返回的IP地址和端口与其中一台Storage server建立连接并指定要下载文件。</li>
<li>下载文件成功。</li>
</ol>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>安装FastDFS和nginx：FastDFS.md</p>
<p>启动tracker服务:/etc/init.d/fdfs_trackerd start</p>
<p>启动storage服务:/etc/init.d/fdfs_storaged start</p>
<p>启动nginx:nginx</p>
<p><strong>为什么需要安装nginx</strong></p>
<p>FastDFS通过Tracker服务器,将文件放在Storage服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。</p>
<p>假设Tracker服务器将文件上传到了192.168.4.125，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.4.126，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.4.126上取文件,就会出现文件无法访问的错误。</p>
<p>而fastdfs-nginx-module可以重定向文件连接到文件上传时的源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误</p>
<h5 id="应用到项目中"><a href="#应用到项目中" class="headerlink" title="应用到项目中"></a>应用到项目中</h5><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在application.yml中追加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">1501</span> <span class="comment"># 超时时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">601</span> <span class="comment"># 连接超时时间</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment"># 缩略图</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span> <span class="comment"># tracker地址：你的虚拟机服务器地址+端口（默认是22122）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.1228</span><span class="string">:22122</span></span><br></pre></td></tr></table></figure>

<p>创建一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(FdfsClientConfig.class)</span></span><br><span class="line"><span class="comment">// 解决jmx重复注册bean的问题</span></span><br><span class="line"><span class="meta">@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadService uploadService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;image&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span>MultipartFile file)</span></span>&#123;</span><br><span class="line">        String url = uploadService.uploadImage(file);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(url))</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().build();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白名单:文件后缀必须是白名单中的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; CONTENT_TYPE = Arrays.asList(<span class="string">&quot;image/gif&quot;</span>,<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UploadService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//检验文件类型</span></span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line">        <span class="keyword">if</span>(!CONTENT_TYPE.contains(contentType))&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;文件类型不合法:&quot;</span>+originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//校验文件内容ImageIO</span></span><br><span class="line">        BufferedImage read = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read = ImageIO.read(file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(read == <span class="keyword">null</span>)&#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;文件内容不合法:&quot;</span>+originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存到服务器</span></span><br><span class="line"></span><br><span class="line">        String s = StringUtils.substringAfterLast(originalFilename, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        StorePath storePath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            storePath = <span class="keyword">this</span>.storageClient.uploadFile(file.getInputStream(), file.getSize(), s, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回url</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://image.leyou.com/&quot;</span>+storePath.getFullPath();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="商品规格管理"><a href="#商品规格管理" class="headerlink" title="商品规格管理"></a>商品规格管理</h3><p>表关系</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201110134708213.png" alt="image-20201110134708213"></p>
<p>使分类表与参数表关联方便查询参数</p>
<p>如果使通用字段从spu获取值 否则从sku获取值</p>
<p>@GeneratedValue 注解详解:<a href="https://blog.csdn.net/sswqzx/article/details/84337921">博客</a></p>
<p><a href="https://blog.csdn.net/rongxiang111/article/details/86476028">@transient</a>:想要添加表中不存在字段，就要使用@Transient这个注解了</p>
<p>SpecParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;`numeric`&quot;)</span> <span class="comment">//表示这个字段不是关键字 而是一个列名 numeric是一个关键字</span></span><br><span class="line"><span class="keyword">private</span> Boolean numeric;</span><br></pre></td></tr></table></figure>

<h3 id="SpecGroup"><a href="#SpecGroup" class="headerlink" title="SpecGroup"></a>SpecGroup</h3><h4 id="编辑和新增"><a href="#编辑和新增" class="headerlink" title="编辑和新增"></a>编辑和新增</h4><p>因为SpecGroup类中的属性有list集合 所以前端传入参数的时候要按需传入需要的参数 否则会出现类型转换(string to list)异常400 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save()&#123;</span><br><span class="line">           const param &#x3D; &#123;&#125;</span><br><span class="line">           param.name &#x3D; this.group.name</span><br><span class="line">           param.id &#x3D; this.group.id</span><br><span class="line">           param.cid &#x3D; this.cid</span><br><span class="line">           this.$http(&#123;</span><br><span class="line">           method: this.isEdit ? &#39;put&#39; : &#39;post&#39;,</span><br><span class="line">           url: &#39;&#x2F;item&#x2F;spec&#x2F;save&#39;,</span><br><span class="line">           data: this.$qs.stringify(param)</span><br><span class="line">         &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">           &#x2F;&#x2F; 关闭窗口</span><br><span class="line">           this.show &#x3D; false;</span><br><span class="line">           this.$message.success(&quot;保存成功！&quot;);</span><br><span class="line">           this.loadData();</span><br><span class="line">         &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">             this.$message.error(&quot;保存失败！&quot;);</span><br><span class="line">           &#125;);</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">saveSpecGroup</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="meta">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          <span class="meta">@RequestParam(&quot;cid&quot;)</span> Long cid)</span></span>&#123;</span><br><span class="line">    SpecGroup specGroup = <span class="keyword">new</span> SpecGroup();</span><br><span class="line">    specGroup.setCid(cid);</span><br><span class="line">    specGroup.setId(id);</span><br><span class="line">    specGroup.setName(name);</span><br><span class="line">    specificationService.saveSpecGroup(specGroup);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SPU和SKU"><a href="#SPU和SKU" class="headerlink" title="SPU和SKU"></a>SPU和SKU</h3><h4 id="spu"><a href="#spu" class="headerlink" title="spu"></a>spu</h4><p>数据库中spu的表有两个spu和spudetail 后者存放一些通用信息 减轻查询的负担</p>
<p>spu_detail中的字段generic_spec和special_spec的值的id对应spec中的id</p>
<h4 id="sku"><a href="#sku" class="headerlink" title="sku"></a>sku</h4><p>sku的indexes中存放着下标组合对应着spuDetail表中special_spec的数组</p>
<p>own_spec存放下标组合对应的值 方便进行渲染</p>
<p>spec中的通用字段去spuDetail的generic_spec中获取值 特殊字段去spk的own_spec中获取值</p>
<h3 id="商品查询"><a href="#商品查询" class="headerlink" title="商品查询"></a>商品查询</h3><p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201112123056356.png" alt="image-20201112123056356"></p>
<p>展示页面需要商品分类和品牌 对应着cname和bname</p>
<p>防止对表对应的实体类修改 需要对其扩展spu类</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SpuBo</span> <span class="keyword">extends</span> <span class="title">Spu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> cname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> bname;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SpuDetail</span> spuDetail;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Sku</span>&gt; skus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 查询分类名称的时候参数是一个集合 可以让CategoryMapper继承SelectByIdListMapper&lt;Category,Long&gt; 改接口是根据id集合查询对象集合 第一个泛型是对象类型 第二个泛型是主键类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryNameByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</span><br><span class="line">    List&lt;Category&gt; categories = categoryMapper.selectByIdList(ids);</span><br><span class="line">    <span class="keyword">return</span> categories.stream().map(category -&gt; category.getName()).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增商品"><a href="#新增商品" class="headerlink" title="新增商品"></a>新增商品</h3><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>goods.categories被监听 当选择商品分类时 会根据分类id查询品牌列表</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201113105837276.png" alt="image-20201113105837276"></p>
<h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><h5 id="什么是富文本编辑器"><a href="#什么是富文本编辑器" class="headerlink" title="什么是富文本编辑器"></a>什么是富文本编辑器</h5><p>百度百科：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526290914491.png" alt="1526290914491"></p>
<p>通俗来说：富文本，就是比较丰富的文本编辑器。普通的框只能输入文字，而富文本还能给文字加颜色样式等。</p>
<p>富文本编辑器有很多，例如：KindEditor、Ueditor。但并不原生支持vue</p>
<p>但是我们今天要说的，是一款支持Vue的富文本编辑器：<code>vue-quill-editor</code></p>
<h5 id="Vue-Quill-Editor"><a href="#Vue-Quill-Editor" class="headerlink" title="Vue-Quill-Editor"></a>Vue-Quill-Editor</h5><p>GitHub的主页：<a href="https://github.com/surmon-china/vue-quill-editor">https://github.com/surmon-china/vue-quill-editor</a></p>
<p>Vue-Quill-Editor是一个基于Quill的富文本编辑器：<a href="https://quilljs.com/">Quill的官网</a></p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526291232678.png" alt="1526291232678"></p>
<h5 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h5><p>使用非常简单：已经在项目中集成。以下步骤不需操作，仅供参考</p>
<p>第一步：安装，使用npm命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-quill-editor <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>第二步：加载，在js中引入：</p>
<p>全局引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">&#x27;vue-quill-editor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;; <span class="comment">/* &#123; default global options &#125; */</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueQuillEditor, options); <span class="comment">// options可选</span></span><br></pre></td></tr></table></figure>



<p>局部引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.core.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.snow.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;quill/dist/quill.bubble.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;quillEditor&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-quill-editor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        quillEditor</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们这里采用局部引用：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528465859061.png" alt="1528465859061"></p>
<p>第三步：页面使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quill-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;goods.spuDetail.description&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;editorOption&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="自定义的富文本编辑器"><a href="#自定义的富文本编辑器" class="headerlink" title="自定义的富文本编辑器"></a>自定义的富文本编辑器</h5><p>不过这个组件有个小问题，就是图片上传的无法直接上传到后台，因此我们对其进行了封装，支持了图片的上传。</p>
<p> <img src="/2020/10/19/leyou/log\source_posts\leyou\1526296083605.png" alt="1526296083605.png"></p>
<p>使用也非常简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-stepper-content</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">v-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;goods.spuDetail.description&quot;</span> <span class="attr">upload-url</span>=<span class="string">&quot;/upload/image&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">v-stepper-content</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>upload-url：是图片上传的路径</li>
<li>v-model：双向绑定，将富文本编辑器的内容绑定到goods.spuDetail.description</li>
</ul>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528469209005.png" alt="1528469209005"></p>
<p>如果出错：无法获取服务端连接资源:can’t create connection to/192.168.182.128:22122</p>
<p>在虚拟机中关闭防火墙并执行：iptables -L ，iptables -F</p>
<h4 id="规格参数"><a href="#规格参数" class="headerlink" title="规格参数"></a>规格参数</h4><p>goods.categories被监听 当选择商品分类时 会根据分类id查询规格参数</p>
<h4 id="商品新增"><a href="#商品新增" class="headerlink" title="商品新增"></a>商品新增</h4><p>前端页面中GoodsForm.vue中这段代码不需要将价格格式化 因为后端的price字段是long类型 格式化就会传入string类型 会产生转换错误</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201113144254082.png" alt="image-20201113144254082"></p>
<h4 id="商品修改"><a href="#商品修改" class="headerlink" title="商品修改"></a>商品修改</h4><p>一下报错是因为xxxbyExample没有传入Example实例：</p>
<p>There is no getter for property named ‘oredCriteria’ in ‘class com.domain.</p>
<h2 id="leyou-commons"><a href="#leyou-commons" class="headerlink" title="leyou-commons"></a>leyou-commons</h2><p>放入公共的代码</p>
<h2 id="leyou-search"><a href="#leyou-search" class="headerlink" title="leyou-search"></a>leyou-search</h2><p>需要调用leyou-item-interface 使用feign(微服务之间进行调用)  </p>
<h3 id="远程调用controller接口"><a href="#远程调用controller接口" class="headerlink" title="远程调用controller接口"></a>远程调用controller接口</h3><p>把Good中需要的属性相应的获取方法 封装在接口中 </p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201115153913617.png" alt="image-20201115153913617"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Brand <span class="title">queryBrandById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在leyou-search中使用feign进行调用</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201115153948811.png" alt="image-20201115153948811"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;item-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spu转换为good</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">BuildGoods</span><span class="params">(Spu spu)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//根据分类id获取分类名称</span></span><br><span class="line">        List&lt;String&gt; names = categoryClient.queryNamesByIds(Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">        <span class="comment">//查询品牌</span></span><br><span class="line">        Brand brand = brandClient.queryBrandById(spu.getBrandId());</span><br><span class="line">        <span class="comment">//根据spuId查询所有sku</span></span><br><span class="line">        List&lt;Sku&gt; skus = goodsClient.querySkusBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//sku价格集合</span></span><br><span class="line">        List&lt;Long&gt; prices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//sku集合 ：sku中集合有很多没用的参数 把有用的参数抽取出来</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; skuMapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        skus.forEach(sku -&gt; &#123;</span><br><span class="line">            prices.add(sku.getPrice());</span><br><span class="line">            <span class="comment">//存放有用的  参数</span></span><br><span class="line">            Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,sku.getId());</span><br><span class="line">            map.put(<span class="string">&quot;title&quot;</span>,sku.getTitle());</span><br><span class="line">            map.put(<span class="string">&quot;price&quot;</span>,sku.getPrice());</span><br><span class="line">            <span class="comment">//数据库中的图片可能是多张 只获取第一张</span></span><br><span class="line">            map.put(<span class="string">&quot;image&quot;</span>,StringUtils.isBlank(sku.getImages())?<span class="string">&quot;&quot;</span>:StringUtils.split(sku.getImages(),<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">            skuMapList.add(map);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//根据cid3和search==ture获取规格参数 并进行封装</span></span><br><span class="line">        List&lt;SpecParam&gt; params = specificationClient.queryParams(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//参数值在spuDetail中</span></span><br><span class="line">        <span class="comment">//根据spuId查询spuDetail</span></span><br><span class="line">        SpuDetail spuDetail = goodsClient.querySpuDetailBySpuId(spu.getId());</span><br><span class="line">        <span class="comment">//反序列化通用参数:第一个参数是反序列化的对象 第二个参数是序列化的结果类型 用TypeReference接受</span></span><br><span class="line">        Map&lt;String, Object&gt; genericSpecMap = MAPPER.readValue(spuDetail.getGenericSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="comment">//反序列化非通用参数</span></span><br><span class="line">        Map&lt;String, List&lt;Object&gt;&gt; specialSpecMap = MAPPER.readValue(spuDetail.getSpecialSpec(), <span class="keyword">new</span> TypeReference&lt;Map&lt;String, List&lt;Object&gt;&gt;&gt;()&#123;&#125;);</span><br><span class="line">        Map&lt;String,Object&gt; specs = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.forEach(param-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(param.getGeneric())&#123;</span><br><span class="line">                String value = genericSpecMap.get(param.getId().toString()).toString();</span><br><span class="line">                <span class="comment">//如果是搜索区间</span></span><br><span class="line">                <span class="keyword">if</span>(param.getNumeric())&#123;</span><br><span class="line">                    value = chooseSegment(value,param);</span><br><span class="line">                &#125;</span><br><span class="line">                specs.put(param.getName(),value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;Object&gt; value = specialSpecMap.get(param.getId().toString());</span><br><span class="line">                specs.put(param.getName(),value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置goods</span></span><br><span class="line">        Goods goods= <span class="keyword">new</span> Goods();</span><br><span class="line">        goods.setId(spu.getId());</span><br><span class="line">        goods.setCid1(spu.getCid1());</span><br><span class="line">        goods.setCid2(spu.getCid2());</span><br><span class="line">        goods.setCid3(spu.getCid3());</span><br><span class="line">        goods.setBrandId(spu.getBrandId());</span><br><span class="line">        goods.setCreateTime(spu.getCreateTime());</span><br><span class="line">        goods.setSubTitle(spu.getSubTitle());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * tile 分类名称和品牌名称 空格是为了在分词的时候进行分隔</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        goods.setAll(spu.getTitle()+<span class="string">&quot; &quot;</span>+ StringUtils.join(names,<span class="string">&quot; &quot;</span>)+<span class="string">&quot; &quot;</span>+brand.getName());</span><br><span class="line">        <span class="comment">//获取所有spu下sku的价格</span></span><br><span class="line">        goods.setPrice(prices);</span><br><span class="line">        <span class="comment">//获取spu下所有sku 并转换成json字符串</span></span><br><span class="line">        goods.setSkus(MAPPER.writeValueAsString(skuMapList));</span><br><span class="line">        <span class="comment">//获取spu下所有查询的规格参数 格式&#123;name:value&#125;</span></span><br><span class="line">        goods.setSpecs(specs);</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">chooseSegment</span><span class="params">(String value, SpecParam p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> val = NumberUtils.toDouble(value);</span><br><span class="line">        String result = <span class="string">&quot;其它&quot;</span>;</span><br><span class="line">        <span class="comment">// 保存数值段</span></span><br><span class="line">        <span class="keyword">for</span> (String segment : p.getSegments().split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            String[] segs = segment.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取数值范围</span></span><br><span class="line">            <span class="keyword">double</span> begin = NumberUtils.toDouble(segs[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> end = Double.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(segs.length == <span class="number">2</span>)&#123;</span><br><span class="line">                end = NumberUtils.toDouble(segs[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断是否在范围内</span></span><br><span class="line">            <span class="keyword">if</span>(val &gt;= begin &amp;&amp; val &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segs.length == <span class="number">1</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">0</span>] + p.getUnit() + <span class="string">&quot;以上&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(begin == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = segs[<span class="number">1</span>] + p.getUnit() + <span class="string">&quot;以下&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    result = segment + p.getUnit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Feign 发现有body就会强制把GET转换成POST 导入jar包 不然会出错</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">okhttp:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bug：如果把SpecParm的根据cid和根据gid查询合并成一个方法 并用specParamClient调用该方法调用的时候cid会传入null？</p>
<h3 id="导入图片信息"><a href="#导入图片信息" class="headerlink" title="导入图片信息"></a>导入图片信息</h3><p>现在商品表中虽然有数据，但是所有的图片信息都是无法访问的，我们需要把图片导入到虚拟机：</p>
<p>首先，把课前资料提供的数据上传到虚拟机下：<code>/leyou/static</code>目录：在leyou下创建static目录</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528445149890.png" alt="1528445149890"></p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1528479229165.png" alt="1528479229165"></p>
<p>然后，使用命令解压缩：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">unzip images.zip</span><br></pre></td></tr></table></figure>



<p>修改Nginx配置，使nginx反向代理这些图片地址：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /opt/nginx/config/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改成如下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  image.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听域名中带有group的，交给FastDFS模块处理</span></span><br><span class="line">    <span class="attribute">location</span> ~/group([<span class="number">0</span>-<span class="number">9</span>])/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 将其它图片代理指向本地的/leyou/static目录</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /leyou/static/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要忘记重新加载nginx配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>

<h3 id="分类和品牌聚合"><a href="#分类和品牌聚合" class="headerlink" title="分类和品牌聚合"></a>分类和品牌聚合</h3><p><strong>修改search方法</strong></p>
<p>创建一个类SearchResult存放商品聚合后的结果集</p>
<p>修改SearchController中的search方法添加es的聚合查询 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">&quot;cid3&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>这句相当于</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">GET <span class="regexp">/goods/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;size&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;categories&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;cid3&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数据过滤</strong></p>
<p>用代码实现下面的操作</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">GET <span class="regexp">/goods/</span>_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;all&quot;</span>: <span class="string">&quot;手机&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;specs.CPU核数.keyword&quot;</span>: <span class="string">&quot;十核&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="leyou-goods-web"><a href="#leyou-goods-web" class="headerlink" title="leyou-goods-web"></a>leyou-goods-web</h2><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a><strong>页面跳转</strong></h3><p>配置一个controller</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">&quot;item/&#123;id&#125;.html&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span>  String toItemPage(<span class="meta">@PathVariable(<span class="meta-string">&quot;id&quot;</span>)</span> <span class="built_in">Long</span> id, Model model)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">111</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在nginx.conf中进行配置</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204401819.png" alt="image-20201122204401819"></p>
<p>当点击照片的时候跳转路径</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204508895.png" alt="image-20201122204508895"></p>
<p>当点击照片的时候被反向代理到8084端口 然后跳转到item.html 同时请求静态资源</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122204743132.png" alt="image-20201122204743132"></p>
<p>这个静态资源被反向代理到9002端口 从portal项目中获取 </p>
<h3 id="封装模型数据"><a href="#封装模型数据" class="headerlink" title="封装模型数据"></a>封装模型数据</h3><p>跳转后的页面中 我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p>
<ul>
<li>spu信息</li>
<li>spu的详情</li>
<li>spu下的所有sku</li>
<li>品牌</li>
<li>商品三级分类</li>
<li>商品规格参数、规格参数组</li>
</ul>
<p>在相应的controller中添加没有的方法</p>
<p>并在GoodsService中进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GoodsService goodsService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;item/&#123;id&#125;.html&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">toItemPage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, Model model)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = goodsService.loadDate(id);</span><br><span class="line">        model.addAllAttributes(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动时会报错</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201122222918887.png" alt="image-20201122222918887"></p>
<p> 这是由于我在同一个项目中用了相同的两个@FeignClient(“item-service”)导致报错。</p>
<p>解决方法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">      name: sxbs-mall-consumer</span><br><span class="line">    # 多个接口上的@FeignClient(“相同服务名”)会报错，overriding is disabled。</span><br><span class="line">    # 设置 为true ,即 允许 同名</span><br><span class="line">    main:</span><br><span class="line">      allow-bean-definition-overriding: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h3 id="thymeleaf实现页面静态化"><a href="#thymeleaf实现页面静态化" class="headerlink" title="thymeleaf实现页面静态化"></a>thymeleaf实现页面静态化</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>先说下Thymeleaf中的几个概念：</p>
<ul>
<li>Context：运行上下文</li>
<li>TemplateResolver：模板解析器</li>
<li>TemplateEngine：模板引擎</li>
</ul>
<blockquote>
<p>Context</p>
</blockquote>
<p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p>
<p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p>
<blockquote>
<p>TemplateResolver</p>
</blockquote>
<p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p>
<p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p>
<blockquote>
<p>TemplateEngine</p>
</blockquote>
<p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引擎进行处理的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">templateEngine.process(<span class="string">&quot;模板名&quot;</span>, context, writer);</span><br></pre></td></tr></table></figure>

<p>三个参数：</p>
<ul>
<li>模板名称</li>
<li>上下文：里面包含模型数据</li>
<li>writer：输出目的地的流</li>
</ul>
<p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p>
<p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>创建一个service处理html</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsHtmlService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long spuId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化运行上下文</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        <span class="comment">//设置数据模型</span></span><br><span class="line">        context.setVariables(goodsService.loadDate(spuId));</span><br><span class="line">        <span class="comment">//把静态文件生成到本地</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\nginx-1.19.2\\html\\item\\&quot;</span>+spuId+<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            printWriter = <span class="keyword">new</span> PrintWriter(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(printWriter!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.templateEngine.process(<span class="string">&quot;item&quot;</span>,context,printWriter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在GoodsService中进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;item/&#123;id&#125;.html&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  String <span class="title">toItemPage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, Model model)</span></span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = goodsService.loadDate(id);</span><br><span class="line">    model.addAllAttributes(map);</span><br><span class="line">    goodsHtmlService.createHtml(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;item &#123;</span><br><span class="line">    # 先找本地 默认在nginx中寻找对应的文件名 html</span><br><span class="line">    root html;</span><br><span class="line">    if (!-f $request_filename) &#123; #请求的文件不存在，就反向代理</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8084;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="整合rabitMQ到项目中"><a href="#整合rabitMQ到项目中" class="headerlink" title="整合rabitMQ到项目中"></a>整合rabitMQ到项目中</h2><p>为了防止并发 发送的消息越精简越好</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201130225708860.png" alt="image-20201130225708860"></p>
<p>在item-service中增加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.52</span><span class="number">.131</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">bob</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">Bbj0611..</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">exchange:</span> <span class="string">LEYOU.ITEM.EXCHANGE</span></span><br></pre></td></tr></table></figure>

<p>在GoodsServiceImpl中增加发送消息的方法</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201130233851073.png" alt="image-20201130233851073"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String type, Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;item.&quot;</span>+type,id);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AmqpException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在leyou-goods-web和search服务中增加依赖 配置 监听的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsHtmlService goodsHtmlService;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;LEYOU.ITEM.SAVE_QUEUE&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;LEYOU_ITEM_EXCHANGE&quot;,ignoreDeclarationExceptions = &quot;true&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;item.insert&quot;,&quot;item.update&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.goodsHtmlService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;LEYOU.ITEM.DELETE_QUEUE&quot;,durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;LEYOU_ITEM_EXCHANGE&quot;,ignoreDeclarationExceptions = &quot;true&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;item.delete&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.goodsHtmlService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><h3 id="cookie写入问题"><a href="#cookie写入问题" class="headerlink" title="cookie写入问题"></a>cookie写入问题</h3><p>我们去Debug跟踪CookieUtils，看看到底是怎么回事：</p>
<p>我们发现内部有一个方法，用来获取Domain：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303181817.png" alt="1533303181817"></p>
<p>它获取domain是通过服务器的host来计算的，然而我们的地址竟然是：127.0.0.1:8087，因此后续的运算，最终得到的domain就变成了：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303213902.png" alt="1533303213902"></p>
<p>问题找到了：我们请求时的serverName明明是：api.leyou.com，现在却被变成了：127.0.0.1，因此计算domain是错误的，从而导致cookie设置失败！</p>
<p>那么问题来了：为什么我们这里的请求serverName变成了：127.0.0.1:8087呢？</p>
<p>这里的server name其实就是请求的时的主机名：Host，之所以改变，有两个原因：</p>
<ul>
<li>我们使用了nginx反向代理，当监听到api.leyou.com的时候，会自动将请求转发至127.0.0.1:10010，即Zuul。</li>
<li>而后请求到达我们的网关Zuul，Zuul就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了 127.0.0.1:8087 ，即我们的授权中心。</li>
</ul>
<p>我们首先去更改nginx配置，让它不要修改我们的host：<code>proxy_set_header Host $host;</code></p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303544219.png" alt="1533303544219"></p>
<p>把nginx进行reload：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>



<p>这样就解决了nginx这里的问题。但是Zuul还会有一次转发，所以要去修改网关的配置（leyou-gateway工程）：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533303659673.png" alt="1533303659673"></p>
<p>重启后，我们再次测试。</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533716093162.png" alt="1533716093162"></p>
<p>最后计算得到的domain：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533716136698.png" alt="1533716136698"></p>
<p>我们再次登录，发现依然没有cookie！！</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\01348FC2.gif" alt="img"> </p>
<p>怎么回事呢？</p>
<p>我们通过RestClient访问下看看：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1534225751381.png" alt="1534225751381"></p>
<p>发现，响应头中还是没有<code>set-cookie</code>。</p>
<p>这是怎么回事？？</p>
<p>Zuul内部有默认的过滤器，会对请求和响应头信息进行重组，过滤掉敏感的头信息：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533732985089.png" alt="1533732985089"></p>
<p>会发现，这里会通过一个属性为<code>SensitiveHeaders</code>的属性，来获取敏感头列表，然后添加到<code>IgnoredHeaders</code>中，这些头信息就会被忽略。</p>
<p>而这个<code>SensitiveHeaders</code>的默认值就包含了<code>set-cookie</code>：</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533733081367.png" alt="1533733081367"></p>
<p>解决方案有两种：</p>
<p>全局设置：</p>
<ul>
<li><code>zuul.sensitive-headers=</code> </li>
</ul>
<p>指定路由设置：</p>
<ul>
<li><code>zuul.routes.&lt;routeName&gt;.sensitive-headers=</code></li>
<li><code>zuul.routes.&lt;routeName&gt;.custom-sensitive-headers=true</code></li>
</ul>
<p>思路都是把敏感头设置为null</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1533733356133.png" alt="1533733356133"></p>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>build中存放了webpack的配置文件 config中存放了webpack运行所需要的环境参数</p>
<p>dist是打包目录</p>
<p>该项目是单页面应用 只有一个index.html 其他内容都是组件</p>
<p>src下的asset存放静态资源 modules存放全局组件</p>
<p>目录结构</p>
<p><img src="/2020/10/19/leyou/image-20201020100244930.png" alt="image-20201020100244930"></p>
<p>调用关系</p>
<ul>
<li>index.html：html模板文件。定义了空的<code>div</code>，其id为<code>app</code>。</li>
<li>main.js：<strong>实例化vue对象</strong>，并且通过id选择器绑定到index.html的div中，因此<strong>main.js的内容都将在index.html的div中显示</strong>。main.js中使用了App组件，即App.vue，也就是说index.html中最终展现的是App.vue中的内容。index.html引用它之后，就拥有了vue的内容（包括组件、样式等），所以，main.js也是<strong>webpack打包的入口</strong>。</li>
<li>index.js：定义请求路径和组件的映射关系。相当于之前的<code>&lt;vue-router&gt;</code></li>
<li>App.vue中也没有内容，而是定义了vue-router的锚点：<code>&lt;router-view&gt;</code>,我们之前讲过，vue-router路由后的组件将会在锚点展示。</li>
<li>最终结论：<strong>一切路由后的内容都将通过App.vue在index.html中显示。</strong></li>
<li>访问流程：用户在浏览器输入路径，例如：<a href="http://localhost:9001/#/item/brand">http://localhost:9001/#/item/brand</a> –&gt; index.js(/item/brand路径对应pages/item/Brand.vue组件) –&gt; 该组件显示在App.vue的锚点位置 –&gt; main.js使用了App.vue组件，并把该组件渲染在index.html文件中（id为“app”的div中）</li>
</ul>
<h2 id="使用域名访问后台页面"><a href="#使用域名访问后台页面" class="headerlink" title="使用域名访问后台页面"></a>使用域名访问后台页面</h2><p>在SwitchHosts中进行配置</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201105202038416.png" alt="image-20201105202038416"></p>
<p>在leyou-manage-web前端项目中配置的访问路径是localhost 不允许通过其他域名进行访问</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201105202129847.png" alt="image-20201105202129847"></p>
<p>在webpack.dev.conf.js中的devServer配置使域名检查失效</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">disableHostCheck:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>但是现在要访问后台页面，还得自己加上端口：<code>http://manage.leyou.com:9001</code>。</p>
<p>这就不够优雅了。我们希望的是直接域名访问：<code>http://manage.taotao.com</code>。这种情况下端口默认是80，如何才能把请求转移到9001端口呢？</p>
<p>这里就要用到反向代理工具：Nginx</p>
<h2 id="使用nginx作为web服务器作为反向代理"><a href="#使用nginx作为web服务器作为反向代理" class="headerlink" title="使用nginx作为web服务器作为反向代理"></a>使用nginx作为web服务器作为反向代理</h2><p><strong>Web服务器分2类</strong></p>
<ul>
<li>web应用服务器，如：<ul>
<li>tomcat </li>
<li>resin</li>
<li>jetty</li>
</ul>
</li>
<li>web服务器，如：<ul>
<li>Apache 服务器 </li>
<li>Nginx</li>
<li>IIS  </li>
</ul>
</li>
</ul>
<p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。<br>并发：web服务器的并发能力远高于web应用服务器。</p>
<p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：反向代理,负载均衡,动态路由,请求过滤</p>
<p>什么是反向代理？</p>
<ul>
<li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li>
<li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li>
</ul>
<p>nginx可以当做反向代理服务器来使用：</p>
<ul>
<li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li>
<li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li>
</ul>
<p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1526016663674.png" alt="1526016663674"></p>
<p><strong>反向代理配置</strong></p>
<p> <img src="/2020/10/19/leyou/log\source_posts\leyou\1526188831504.png" alt="1"></p>
<p>nginx中的每个server就是一个反向代理配置，可以有多个server</p>
<p>启动nginx：start nginx 重新加载：nginx -s reload 停止：nginx -s stop</p>
<p><strong>流程</strong></p>
<ol>
<li><p>浏览器准备发起请求，访问<a href="http://mamage.leyou.com,但需要进行域名解析/">http://mamage.leyou.com，但需要进行域名解析</a></p>
</li>
<li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p>
</li>
<li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href="http://127.0.0.1/">http://127.0.0.1:80</a></p>
<p>本机的nginx一直监听80端口，因此捕获这个请求</p>
</li>
<li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p>
</li>
<li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>
</li>
<li><p>nginx将得到的结果返回到浏览器</p>
</li>
</ol>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><table>
<thead>
<tr>
<th>跨域原因说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>域名不同</td>
<td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td>
</tr>
<tr>
<td>域名相同，端口不同</td>
<td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td>
</tr>
<tr>
<td>二级域名不同</td>
<td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td>
</tr>
</tbody></table>
<p>http和https也属于跨域  </p>
<h2 id="cors解决跨域"><a href="#cors解决跨域" class="headerlink" title="cors解决跨域"></a>cors解决跨域</h2><h3 id="5-3-1-什么是cors"><a href="#5-3-1-什么是cors" class="headerlink" title="5.3.1.什么是cors"></a>5.3.1.什么是cors</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"><code>XMLHttpRequest</code></a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源</a>使用的限制。</p>
<p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<ul>
<li><p>浏览器端：</p>
<p>目前，所有浏览器都支持该功能（IE10以下不行）。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</p>
</li>
<li><p>服务端：</p>
<p>CORS通信与AJAX没有任何差别，因此你不需要改变以前的业务逻辑。只不过，浏览器会在请求中携带一些头信息，我们需要以此判断是否允许其跨域，然后在响应头中加入一些信息即可。这一般通过过滤器完成即可。</p>
</li>
</ul>
<h3 id="5-3-2-原理有点复杂"><a href="#5-3-2-原理有点复杂" class="headerlink" title="5.3.2.原理有点复杂"></a>5.3.2.原理有点复杂</h3><p>浏览器会将ajax请求分为两类，其处理方案略有差异：简单请求、特殊请求。</p>
<h4 id="5-3-2-1-简单请求"><a href="#5-3-2-1-简单请求" class="headerlink" title="5.3.2.1.简单请求"></a>5.3.2.1.简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求。：</p>
<p>（1) 请求方法是以下三种方法之一： </p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul>
<p>当浏览器发现发起的ajax请求是简单请求时，会在请求头中携带一个字段：<code>Origin</code>.</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\1530460311064.png" alt="1530460311064"></p>
<p>Origin中会指出当前请求属于哪个域（协议+域名+端口）。服务会根据这个值决定是否允许其跨域。</p>
<p>如果服务器允许跨域，需要在返回的响应头中携带下面信息：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>

<ul>
<li>Access-Control-Allow-Origin：可接受的域，是一个具体域名或者*（代表任意域名）</li>
<li>Access-Control-Allow-Credentials：是否允许携带cookie，默认情况下，cors不会携带cookie，除非这个值是true</li>
</ul>
<blockquote>
<p>有关cookie：</p>
</blockquote>
<p>要想操作cookie，需要满足3个条件：</p>
<ul>
<li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。</li>
<li>浏览器发起ajax需要指定withCredentials 为true</li>
<li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名</li>
</ul>
<h4 id="5-3-2-2-特殊请求"><a href="#5-3-2-2-特殊请求" class="headerlink" title="5.3.2.2.特殊请求"></a>5.3.2.2.特殊请求</h4><p>不符合简单请求的条件，会被浏览器判定为特殊请求,，例如请求方式为PUT。</p>
<blockquote>
<p>预检请求</p>
</blockquote>
<p>特殊请求会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>
<p>一个“预检”请求的样板：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span>: PUT</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Host</span>: api.leyou.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>

<p>与简单请求相比，除了Origin以外，多了两个头：</p>
<ul>
<li>Access-Control-Request-Method：接下来会用到的请求方式，比如PUT</li>
<li>Access-Control-Request-Headers：会额外用到的头信息</li>
</ul>
<blockquote>
<p>预检请求的响应</p>
</blockquote>
<p>服务的收到预检请求，如果许可跨域，会发出响应：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: http://manage.leyou.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span>: true</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: GET, POST, PUT</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: X-Custom-Header</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span>: 1728000</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure>

<p>除了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Credentials</code>以外，这里又额外多出3个头：</p>
<ul>
<li>Access-Control-Allow-Methods：允许访问的方式</li>
<li>Access-Control-Allow-Headers：允许携带的头</li>
<li>Access-Control-Max-Age：本次许可的有效时长，单位是秒，<strong>过期之前的ajax请求就无需再次进行预检了</strong></li>
</ul>
<p>如果浏览器得到上述响应，则认定为可以跨域，后续就跟简单请求的处理是一样的了。</p>
<h3 id="5-3-3-实现非常简单"><a href="#5-3-3-实现非常简单" class="headerlink" title="5.3.3.实现非常简单"></a>5.3.3.实现非常简单</h3><p>虽然原理比较复杂，但是前面说过：</p>
<ul>
<li>浏览器端都有浏览器自动完成，我们无需操心</li>
<li>服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。</li>
</ul>
<p>事实上，SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter ,内部已经实现了刚才所讲的判定逻辑，我们直接用就好了。</p>
<p>在<code>leyou-gateway</code>中编写一个配置类，注册CorsFilter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeyouCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//1) 允许的域,不要写*，否则cookie就无法使用了</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;http://manage.leyou.com&quot;</span>);</span><br><span class="line">        <span class="comment">//2) 是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//3) 允许的请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;OPTIONS&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;HEAD&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PUT&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;PATCH&quot;</span>);</span><br><span class="line">        <span class="comment">// 4）允许的头信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径，我们拦截一切请求</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前台系统"><a href="#前台系统" class="headerlink" title="前台系统"></a>前台系统</h1><p>项目：leyou-portal-master</p>
<p>没有webpack，我们就无法使用webpack-dev-server运行这个项目，实现热部署。所以，这里我们使用另外一种热部署方式：live-server</p>
<p>使用npm安装</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g live-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>运行:后面可以接一些参数</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">live-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>使用端口9002启动并在switchhosts和nginx中进行配置 使其通过<a href="http://www.leyou.com进行访问/">www.leyou.com进行访问</a></p>
<h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>ly的getUrlParam可以获取到请求路径中的参数 loacation.search可以对参数进行编码 之后再转换为json对象</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116120558405.png" alt="image-20201116120558405"></p>
<p><strong>解决跨域</strong></p>
<p>在getway微服务中配置</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116121900049.png" alt="image-20201116121900049"></p>
<p>在LeyouCorsConfiguration中增加允许的域</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201116121929930.png" alt="image-20201116121929930"></p>
<p>返回给前端的数据如下 只需要三个字段 可以把其他不需要的值过滤掉</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117091645008.png" alt="image-20201117091645008"></p>
<p>在application.yml中进行配置</p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117091840572.png" alt="image-20201117091840572"></p>
<p><img src="/2020/10/19/leyou/log\source_posts\leyou\image-20201117092012690.png" alt="image-20201117092012690"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>leyou</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript</title>
    <url>/2020/10/19/javascript/</url>
    <content><![CDATA[<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><p>document.write() 向body中输出内容</p>
<p>console.log() 向控制台输出内容</p>
<p>严格区分大小写 每一条语句以分号结尾 如果不写 系统会自动添加 但是会消耗系统资源 有时还会加错分号</p>
<p><strong>JS编写位置</strong>:可以将js代码编写到标签的onclick href属性中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这种方式耦合度较高 不推荐使用</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点我干什么&#x27;);&quot;</span> &gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;点我&#x27;);&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以在&lt;script&gt;中通过src属性 引入外部标签 一旦引入外部文件 就不能在<strong>这个</strong>&lt;script&gt;中编写其他代码了 即使编写也会被浏览器忽略 </p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>检查变量类型typeof</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> str)</span><br></pre></td></tr></table></figure>

<p>js可以表示的数字的最大值：Number.MAX_VALUE 最小值：Number.MIN_VALUE</p>
<p>Infinity是字面量 是number类型</p>
<p>NaN也是字面量 表示不是一个数字 是number类型</p>
<p>进行浮点数运算可能不准确 0.1+0.2</p>
<p>null是object类型</p>
<p>undeined的类型就是undefined</p>
<p>其他类型转换为string ：</p>
<ul>
<li>调用toString方法 该方法不会影响到原变量 null和undefined没有该方法</li>
<li>调用函数String() null和undefined也可以转换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> str = num.toString();</span><br><span class="line"><span class="comment">//  var str = String(num);</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">typeof</span> num);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="keyword">typeof</span> str);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>其他类型转换为Number</p>
<ul>
<li>使用函数Number()：如果字符串中有非数字 转换结果为NaN 如果是空串转换结果为0 true转换为1 false转换为0 null转换为0 undefined转换为NaN</li>
<li>函数parseInt()和parseFloat():可以将字符串中开头部分的数字读取出来并转换 如果对非String使用会先将其转换为String然后再操作</li>
</ul>
<p>转换为boolean</p>
<ul>
<li>函数Boolean：数字除了0和NaN都是true  字符串除了空串 null undefined都是true</li>
</ul>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>字符串之间的+是拼接字符串  任何值和字符串做+运算都先转换为字符串然后再拼接</p>
<p>其余的运算都是先转化为number 再运算 任何值和NaN做运算都得到NaN</p>
<p>可以对任意数据类型取两次反 将其转换为bool值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> bool = !!num;</span><br></pre></td></tr></table></figure>

<p>script中使用:unicode编码<code> \uxxxx</code></p>
<p>页面中使用:unicode<code>&amp;#xxxx</code> 要把xxxx转换为十进制</p>
<p>== 如果类型不同 转换为相同类型再比较</p>
<p>=== 先比较类型是否相同 相同再继续比较值 NaN不和任何值相等 包括他本身 可以通过函数isNaN()判断一个值是否为NaN</p>
<p>代码块： 使用{}对语句进行分组 代码块中的语句要么不执行要么全执行 代码块中的内容 对外部完全可见</p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>操作对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">      person.name = <span class="string">&#x27;bob&#x27;</span>;</span><br><span class="line">      person.age = <span class="number">12</span>;</span><br><span class="line">      person.sex = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">      <span class="comment">//删除对象属性</span></span><br><span class="line">      <span class="keyword">delete</span> person.sex</span><br><span class="line"></span><br><span class="line">      <span class="built_in">document</span>.write(person.person.sex)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用person[name] = ‘bob 定义属性 取值：<code>var name = person[name]</code>;</p>
<p>可以通过in检查对象中是否有某个属性 <code>var bool = &quot;name&quot; in person;</code></p>
<p>基本数据存储在栈内存中 值与值之间是独立存在的  修改一个变量不会影响另一个变量 </p>
<p>对象存储在堆内存中 变量是对地址的引用 修改一个变量会影响另一个变量</p>
<p>使用对象字面量创建对象<code> var person = &#123;name:&quot;bob&quot;,age:22&#125;;</code></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span>  <span class="title">max</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Math</span>.max(a,b);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">document</span>.write(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">document</span>.write(max(<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p>实参可以是任意类型解析器不会检查实参的数量 如果实参数量多余形参 多余的实参为undefined</p>
<p>没有return或者return后没有任何值 则返回undefined</p>
<p>函数的参数可以是任意类型 甚至可以是一个函数</p>
<p>立即执行函数 只执行一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">      &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果一个函数作为对象的属性保存 称这个函数为这个对象的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line">     person.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">document</span>.write(person.name);</span><br><span class="line">     &#125;;</span><br><span class="line">     person.method();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>遍历对象中的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(n+<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局作用域：页面打开时创建 页面关闭的时候销毁 创建的变量会作为window对象的属性保存</p>
<p>var声名的变量会在所有代码之前被声名 但是赋值会延迟执行  函数可以在创建之前被调用 但是通过var声名的函数 只是被声名 只能在创建之后调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//执行失败</span></span><br><span class="line">max(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//执行成功</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">max</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数作用域：如果函数中找不到要操作的变量 就从上一级作用域中查找 直至全局作用域 没找到会报错ReferenceError</p>
<p>函数作用域中也有var声名提前的特性 定义形参就相当于在函数作用域中声明了这个变量</p>
<p>解析器在调用函数的时候会向函数内部传递一个隐式参数this this指向的是一个对象 这个对象我们称为函数执行的上下文对象 根据函数的调用方式不同 this会指向不同的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;bob&quot;</span>,<span class="attr">age</span>:<span class="number">23</span>&#125;;</span><br><span class="line">      person.method = fun;</span><br><span class="line">      fun(); <span class="comment">//this:window</span></span><br><span class="line">      person.method(); <span class="comment">//this:object</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>以函数的方式调用this指向window以方法的方式调用 this指向对象</li>
</ul>
<p>构造函数：习惯上首字母大写 创建方式和普通参数没有区别 普通函数是直接调用 构造函数需要使用new关键字来使用 </p>
<p>构造函数的执行流程</p>
<pre><code>* 立即创建一个新的对象
* 将新建的对象设置为构造函数中的this
* 执行函数中的代码
* 将新建的对象作为返回值返回</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    	<span class="built_in">this</span>.name = name;</span><br><span class="line">    	<span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;bob&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(person.age);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>instanceof可以检查一个对象是否是一个类的实例 Object是所有对象的实例</li>
</ul>
<p>原型对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 原型 prototype</span></span><br><span class="line"><span class="comment">			 *</span></span><br><span class="line"><span class="comment">			 * 	我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype</span></span><br><span class="line"><span class="comment">			 * 		这个属性对应着一个对象，这个对象就是我们所谓的原型对象</span></span><br><span class="line"><span class="comment">			 * 	如果函数作为普通函数调用prototype没有任何作用</span></span><br><span class="line"><span class="comment">			 * 	当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，</span></span><br><span class="line"><span class="comment">			 * 		指向该构造函数的原型对象，我们可以通过__proto__来访问该属性</span></span><br><span class="line"><span class="comment">			 *</span></span><br><span class="line"><span class="comment">			 * 	原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，</span></span><br><span class="line"><span class="comment">			 * 		我们可以将对象中共有的内容，统一设置到原型对象中。</span></span><br><span class="line"><span class="comment">			 *</span></span><br><span class="line"><span class="comment">			 * 当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，</span></span><br><span class="line"><span class="comment">			 * 	如果没有则会去原型对象中寻找，如果找到则直接使用</span></span><br><span class="line"><span class="comment">			 *</span></span><br><span class="line"><span class="comment">			 * 以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，</span></span><br><span class="line"><span class="comment">			 * 	这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//向MyClass的原型中添加属性a</span></span><br><span class="line">			MyClass.prototype.a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//向MyClass的原型中添加一个方法</span></span><br><span class="line">			MyClass.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">var</span> mc2 = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// console.log(MyClass.prototype);</span></span><br><span class="line">			<span class="built_in">console</span>.log(mc2.__proto__ == MyClass.prototype);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//向mc中添加a属性 会覆盖掉123</span></span><br><span class="line">			<span class="comment">// mc.a = &quot;我是mc中的a&quot;;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// console.log(mc.a);</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// mc.sayHello();</span></span><br><span class="line">			<span class="comment">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> mc);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span></span><br><span class="line">			<span class="comment">//使用该方法只有当对象自身中含有属性时，才会返回true</span></span><br><span class="line">			<span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 原型对象也是对象，所以它也有原型，</span></span><br><span class="line"><span class="comment">			 * 	当我们使用一个对象的属性或方法时，会现在自身中寻找，</span></span><br><span class="line"><span class="comment">			 * 		自身中如果有，则直接使用，</span></span><br><span class="line"><span class="comment">			 * 		如果没有则去原型对象中寻找，如果原型对象中有，则使用，</span></span><br><span class="line"><span class="comment">			 * 		如果没有则去原型的原型中寻找,直到找到Object对象的原型，</span></span><br><span class="line"><span class="comment">			 * 		Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>toString()方法</p>
<p>修改Person原型的toString</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person[name=&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;,age=&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;,gender=&quot;</span>+<span class="built_in">this</span>.gender+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组中的元素可以是任意类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//创建一个长度为10的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> len = arr.length;</span><br></pre></td></tr></table></figure>

<p>数组的方法</p>
<ul>
<li><p>concat():可以连接两个或多个数组 并将新的数组返回 <code>arr.concat(arr2,&quot;xx&quot;);</code></p>
</li>
<li><p>join():该方法可以将数组转换成一个字符串 可以指定一个字符串作为参数 作为元素的连接符 不指定默认为,</p>
</li>
<li><p>reserve():反转数组</p>
</li>
<li><p>sort():排序数组 默认按照unicode进行排序</p>
<ul>
<li><pre><code>//降序排列:默认为升序
arr.sort(function (a,b)&#123;
    return b-a;
&#125;);
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">* push():该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* pop():该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* unshift():向数组开头添加一个或多个元素，并返回新的数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* shift():可以删除数组的第一个元素，并将被删除的元素作为返回值返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* slice():可以用来从数组提取指定元素 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  * ```javascript</span></span><br><span class="line">    参数：</span><br><span class="line"><span class="comment">    			 * 		1.截取开始的位置的索引,包含开始索引</span></span><br><span class="line"><span class="comment">    			 * 		2.截取结束的位置的索引,不包含结束索引</span></span><br><span class="line"><span class="comment">    			 * 			- 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</span></span><br><span class="line"><span class="comment">    			 * 		- 索引可以传递一个负值，如果传递一个负值，则从后往前计算</span></span><br><span class="line"><span class="comment">    			 * 			-1 倒数第一个</span></span><br><span class="line"><span class="comment">    			 * 			-2 倒数第二个</span></span><br><span class="line">    <span class="keyword">var</span> result = arr.slice(1,4);</span><br><span class="line">    result = arr.slice(1,-2);</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>splice():可以用于删除数组中的指定元素 会影响到原数组，会将指定元素从原数组中删除并返回 </p>
<ul>
<li><pre><code class="javascript">- 参数：
*     第一个，表示开始位置的索引
*     第二个，表示删除的数量
*     第三个及以后。。
*        可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边
arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];
var result = arr.splice(3,0,&quot;牛魔王&quot;,&quot;铁扇公主&quot;,&quot;红孩儿&quot;);
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">数组的<span class="keyword">forEach</span>()方法</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var arr = [&quot;孙悟空&quot;,&quot;猪八戒&quot;,&quot;沙和尚&quot;,&quot;唐僧&quot;,&quot;白骨精&quot;];</span><br><span class="line">//第一个参数：当前正在遍历的元素 第二个参数：就是当前正在遍历的元素的索引 第三个参数：遍历的数组</span><br><span class="line">arr.<span class="keyword">forEach</span>(<span class="keyword">function</span>(<span class="keyword">value</span> , <span class="keyword">index</span> , arr)&#123;</span><br><span class="line">   console.log(<span class="keyword">value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<p>函数对象的call()和apply()</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span> call()和apply()</span><br><span class="line"><span class="bullet"> *</span>     - 这两个方法都是函数对象的方法，需要通过函数对象来调用</span><br><span class="line"><span class="bullet"> *</span>     - 当对函数调用call()和apply()都会调用函数执行</span><br><span class="line"><span class="bullet"> *</span>     - 在调用call()和apply()可以将一个对象指定为第一个参数</span><br><span class="line"><span class="bullet"> *</span>        此时这个对象将会成为函数执行时的this</span><br><span class="line"><span class="bullet"> *</span>     - call()方法可以将实参在对象之后依次传递</span><br><span class="line"><span class="bullet"> *</span>     - apply()方法需要将实参封装到一个数组中统一传递</span><br><span class="line"> <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span>     - this的情况：</span><br><span class="line"><span class="bullet"> *</span>        1.以函数形式调用时，this永远都是window</span><br><span class="line"><span class="bullet"> *</span>        2.以方法的形式调用时，this是调用方法的对象</span><br><span class="line"><span class="bullet"> *</span>        3.以构造函数的形式调用时，this是新创建的那个对象</span><br><span class="line"><span class="bullet"> *</span>        4.使用call和apply调用时，this是指定的那个对象</span><br><span class="line"> <span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">fun.call(obj,2,3);</span></span><br><span class="line"><span class="emphasis">fun.apply(obj,[2,3]);</span></span><br></pre></td></tr></table></figure>

<p>在调用函数时 浏览器除了this还会传递一个隐式的参数 arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    - <span class="built_in">arguments</span>是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</span><br><span class="line"> *        - 在调用函数时，我们所传递的实参都会在<span class="built_in">arguments</span>中保存</span><br><span class="line"> *        - <span class="built_in">arguments</span>.length可以用来获取实参的长度</span><br><span class="line"> *        - 我们即使不定义形参，也可以通过<span class="built_in">arguments</span>来使用实参，</span><br><span class="line"> *           只不过比较麻烦</span><br><span class="line"> *           <span class="built_in">arguments</span>[<span class="number">0</span>] 表示第一个实参</span><br><span class="line"> *           <span class="built_in">arguments</span>[<span class="number">1</span>] 表示第二个实参 。。。</span><br><span class="line"> *    - 它里边有一个属性叫做callee，</span><br><span class="line"> *           这个属性对应一个函数对象，就是当前正在指向的函数的对象</span><br><span class="line"> *        </span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//console.log(arguments instanceof Array);</span></span><br><span class="line">   <span class="comment">//console.log(Array.isArray(arguments));</span></span><br><span class="line">   <span class="comment">//console.log(arguments[1]);</span></span><br><span class="line">   <span class="comment">//console.log(arguments.length);</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">/创建正则表达式的对象</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 语法：</span></span><br><span class="line"><span class="comment"> *     var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</span></span><br><span class="line"><span class="comment"> *     var reg = new RegExp(&quot;a&quot;); 这个正则表达式可以来检查一个字符串中是否含有a</span></span><br><span class="line"><span class="comment"> * 在构造函数中可以传递一个匹配模式作为第二个参数，</span></span><br><span class="line"><span class="comment"> *        可以是</span></span><br><span class="line"><span class="comment"> *           i 忽略大小写</span></span><br><span class="line"><span class="comment"> *           g 全局匹配模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = new RegExp(<span class="string">&quot;ab&quot;</span>,<span class="string">&quot;i&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 正则表达式的方法：</span></span><br><span class="line"><span class="comment"> *     test()</span></span><br><span class="line"><span class="comment"> *      - 使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，</span></span><br><span class="line"><span class="comment"> *        如果符合则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(<span class="string">&quot;Ac&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>使用字面量创建正则表达式</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建一个正则表达式检查一个字符串中是否有字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//reg = /a|b|c|d|e|f|g/;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * []里的内容也是或的关系</span></span><br><span class="line"><span class="comment"> * [ab] == a|b</span></span><br><span class="line"><span class="comment"> * [a-z] 任意小写字母</span></span><br><span class="line"><span class="comment"> * [A-Z] 任意大写字母</span></span><br><span class="line"><span class="comment"> * [A-z] 任意字母</span></span><br><span class="line"><span class="comment"> * [0-9] 任意数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/[A-z]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查一个字符串中是否含有 abc 或 adc 或 aec</span></span><br><span class="line">reg = <span class="regexp">/a[bde]c/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * [^ ] 除了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/[^ab]/</span>;</span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/[^0-9]/</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="string">&quot;1a2b3c4d5e6f7&quot;</span>;</span></span><br><span class="line">   /*</span><br><span class="line">    * split()</span><br><span class="line">    *     - 可以将一个字符串拆分为一个数组</span><br><span class="line">    *     - 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</span><br><span class="line">    *     - 这个方法即使不指定全局匹配，也会全都插分</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 根据任意字母来将字符串拆分</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * search()</span><br><span class="line">    *     - 可以搜索字符串中是否含有指定内容</span><br><span class="line">    *     - 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</span><br><span class="line">    *     - 它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</span><br><span class="line">    *     - serach()只会查找第一个，即使设置全局匹配也没用</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   str = <span class="string">&quot;hello abc hello aec afc&quot;</span>;</span></span><br><span class="line">   /*</span><br><span class="line">    * 搜索字符串中是否含有abc 或 aec 或 afc</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   result = str.search(<span class="regexp">/a[bef]c/</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * match()</span><br><span class="line">    *     - 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</span><br><span class="line">    *     - 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</span><br><span class="line">    *        我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</span><br><span class="line">    *        可以为一个正则表达式设置多个匹配模式，且顺序无所谓</span><br><span class="line">    *     - match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   str = <span class="string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   result = str.match(<span class="regexp">/[a-z]/ig</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(result[<span class="number">2</span>]);</span></span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * replace()</span><br><span class="line">    *     - 可以将字符串中指定内容替换为新的内容</span><br><span class="line">    *  - 参数：</span><br><span class="line">    *        1.被替换的内容，可以接受一个正则表达式作为参数</span><br><span class="line">    *        2.新的内容</span><br><span class="line">    *  - 默认只会替换第一个</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="comment">//result = str.replace(/[a-z]/gi , &quot;@_@&quot;);</span></span></span><br><span class="line"><span class="javascript">   result = str.replace(<span class="regexp">/[a-z]/gi</span> , <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(result);</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式检查一个字符串中是否含有aaa</span><br><span class="line">    */</span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 量词</span><br><span class="line">    *     - 通过量词可以设置一个内容出现的次数</span><br><span class="line">    *     - 量词只对它前边的一个内容起作用</span><br><span class="line">    *     - &#123;n&#125; 正好出现n次</span><br><span class="line">    *     - &#123;m,n&#125; 出现m-n次</span><br><span class="line">    *     - &#123;m,&#125; m次以上</span><br><span class="line">    *     - + 至少一个，相当于&#123;1,&#125;</span><br><span class="line">    *     - * 0个或多个，相当于&#123;0,&#125;</span><br><span class="line">    *     - ? 0个或1个，相当于&#123;0,1&#125;</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//ababab</span></span></span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/(ab)&#123;3&#125;/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/b&#123;3&#125;/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab&#123;1,3&#125;c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab&#123;3,&#125;c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab+c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab*c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/ab?c/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;abbc&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 检查一个字符串中是否以a开头</span><br><span class="line">    *     ^ 表示开头</span><br><span class="line">    *     $ 表示结尾</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/^a/</span>; <span class="comment">//匹配开头的a</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/a$/</span>; <span class="comment">//匹配结尾的a</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;abcabca&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   reg = <span class="regexp">/^a$/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//console.log(reg.test(&quot;bbca&quot;));</span></span></span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</span><br><span class="line">    * </span><br><span class="line">    * 手机号的规则：</span><br><span class="line">    *     1 3 567890123 （11位）</span><br><span class="line">    *     </span><br><span class="line">    *     1. 以1开头</span><br><span class="line">    *  2. 第二位3-9任意数字</span><br><span class="line">    *     3. 三位以后任意数字9个</span><br><span class="line">    * </span><br><span class="line">    *  ^1   [3-9]  [0-9]&#123;9&#125;$  </span><br><span class="line">    * </span><br><span class="line">    */</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> phoneStr = <span class="string">&quot;13067890123&quot;</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(phoneReg.test(phoneStr));</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 检查一个字符串中是否含有 .</span><br><span class="line">    * . 表示任意字符</span><br><span class="line">    * 在正则表达式中使用\作为转义字符</span><br><span class="line">    * \. 来表示.</span><br><span class="line">    * \\  表示\</span><br><span class="line">    *</span><br><span class="line">    * 注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，</span><br><span class="line">    *     如果要使用\则需要使用\\来代替</span><br><span class="line">    */</span><br><span class="line">   var reg = <span class="regexp">/\./</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\\/</span>;</span><br><span class="line"></span><br><span class="line">   reg = new RegExp(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">   reg = new RegExp(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * \w</span><br><span class="line">    *     - 任意字母、数字、_  [A-z0-<span class="number">9</span>_]</span><br><span class="line">    * \W</span><br><span class="line">    *     - 除了字母、数字、_  [^A-z0-<span class="number">9</span>_]</span><br><span class="line">    * \d</span><br><span class="line">    *     - 任意的数字 [<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">    * \D</span><br><span class="line">    *     - 除了数字 [^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">    * \s</span><br><span class="line">    *     - 空格</span><br><span class="line">    * \S</span><br><span class="line">    *     - 除了空格</span><br><span class="line">    * \b</span><br><span class="line">    *     - 单词边界</span><br><span class="line">    * \B</span><br><span class="line">    *     - 除了单词边界</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\w/</span>;</span><br><span class="line">   reg = <span class="regexp">/\W/</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\d/</span>;</span><br><span class="line">   reg = <span class="regexp">/\D/</span>;</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\s/</span>;</span><br><span class="line">   reg = <span class="regexp">/\S/</span>;</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    * 创建一个正则表达式检查一个字符串中是否含有单词child</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">   reg = <span class="regexp">/\bchild\b/</span>;</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>console.log(reg.test(<span class="string">&quot;hello child &quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>接收一个用户的输入</span><br><span class="line">   <span class="regexp">//</span>var str = prompt(<span class="string">&quot;请输入你的用户名:&quot;</span>);</span><br><span class="line"></span><br><span class="line">   var str = <span class="string">&quot;              he      llo                &quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>去除掉字符串中的前后的空格</span><br><span class="line">   <span class="regexp">//</span>去除空格就是使用<span class="string">&quot;&quot;</span>来替换空格</span><br><span class="line">   console.log(str);</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/\s/g</span> , <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="regexp">//</span>去除开头的空格</span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/^\s*/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="regexp">//</span>去除结尾的空格</span><br><span class="line">   <span class="regexp">//</span>str = str.replace(<span class="regexp">/\s*$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   <span class="regexp">//</span> <span class="regexp">/^\s*|\s*$/g</span> 匹配开头和结尾的空格</span><br><span class="line">   str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   console.log(str);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   /*</span></span><br><span class="line"><span class="xml">    * 电子邮件</span></span><br><span class="line"><span class="xml">    *     hello  .nihao          @     abc  .com.cn</span></span><br><span class="line"><span class="xml">    * </span></span><br><span class="line"><span class="xml">    * 任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（2-5位）</span></span><br><span class="line"><span class="xml">    * </span></span><br><span class="line"><span class="xml">    * \w</span><span class="template-variable">&#123;3,&#125;</span><span class="xml">  (\.\w+)*  @  [A-z0-9]+  (\.[A-z]</span><span class="template-variable">&#123;2,5&#125;</span><span class="xml">)</span><span class="template-variable">&#123;1,2&#125;</span></span><br><span class="line"><span class="xml">    */</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   var emailReg = /^\w</span><span class="template-variable">&#123;3,&#125;</span><span class="xml">(\.\w+)*@[A-z0-9]+(\.[A-z]</span><span class="template-variable">&#123;2,5&#125;</span><span class="xml">)</span><span class="template-variable">&#123;1,2&#125;</span><span class="xml">$/;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   var email = &quot;abc.hello@163.com&quot;;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   console.log(emailReg.test(email));</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>文档：整个html网页</p>
<p>对象：网页的每个部分转换为对象</p>
<p>模型：表示对象之间的关系 </p>
<p>节点的属性</p>
<ul>
<li><img src="/2020/10/19/javascript/image-20201021092705861.png" alt="image-20201021092705861"></li>
</ul>
<p>文档的加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * onload事件会在整个页面加载完成之后才触发</span></span><br><span class="line"><span class="comment">    * 为window绑定一个onload事件</span></span><br><span class="line"><span class="comment">    *        该事件对应的响应函数将会在页面加载完成之后执行，</span></span><br><span class="line"><span class="comment">    *        这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//获取id为btn的按钮</span></span><br><span class="line">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">      <span class="comment">//为按钮绑定一个单击响应函数</span></span><br><span class="line">      btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>dom查询</p>
<p>获取元素节点的子节点：通过具体的元素节点调用</p>
<ul>
<li>getElementsByTagName():获取当前节点的指定标签名后代节点</li>
<li>childNodes:所有子节点</li>
<li>firstChild:当前节点的第一个节点</li>
<li>lastChild:当前节点的最后一个节点</li>
</ul>
<p>获取父节点和兄弟节点：通过具体的元素节点调用</p>
<ul>
<li><p>parentNode:表示当前节点的父节点</p>
</li>
<li><p>previousSibling:表示当前节点的前一个兄弟节点</p>
</li>
<li><p>nextSibling:表示当前节点的后一个兄弟节点</p>
</li>
</ul>
<p>dom查询的剩余方法</p>
<ul>
<li><p>获取body的引用：document.body</p>
</li>
<li><p>获取html根标签：document.documentElement</p>
</li>
<li><p>获取所有：document.all</p>
</li>
<li><pre><code>//.box1 div
/*
 * document.querySelector()
 *     - 需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素节点对象
 *     - 虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替
 *     - 使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个
 */
var div = document.querySelector(&quot;.box1 div&quot;);

var box1 = document.querySelector(&quot;.box1&quot;)

//console.log(div.innerHTML);
//console.log(box1.innerHTML);

/*
 * document.querySelectorAll()
 *     - 该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回
 *     - 即使符合条件的元素只有一个，它也会返回数组
 */
box1 = document.querySelectorAll(&quot;.box1&quot;);
box1 = document.querySelectorAll(&quot;#box2&quot;);
console.log(box1);
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dom的增删改</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20201022103030099</span>](javascript/image<span class="number">-20201022103030099.</span>png)</span><br><span class="line"></span><br><span class="line">循环中的索引问题</span><br><span class="line"></span><br><span class="line">```<span class="javascript">javascript</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">/*</span></span></span><br><span class="line"><span class="javascript">    * 点击超链接以后，删除一个员工的信息</span></span><br><span class="line"><span class="javascript">    */</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//获取所有额超链接</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">//为每个超链接都绑定一个单击响应函数</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; allA.length ; i++)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">/*</span></span></span><br><span class="line"><span class="javascript">       * <span class="keyword">for</span>循环会在页面加载完成之后立即执行，</span></span><br><span class="line"><span class="javascript">       *     而响应函数会在超链接被点击时才执行</span></span><br><span class="line"><span class="javascript">       * 当响应函数执行时，<span class="keyword">for</span>循环早已执行完毕</span></span><br><span class="line"><span class="javascript">       */</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      alert(<span class="string">&quot;for循环正在执行&quot;</span>+i);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//this.onclick = function() 要使用this不能使用allA[i]</span></span></span><br><span class="line"><span class="javascript">      allA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;响应函数正在执行&quot;</span>+i);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         <span class="comment">//alert(allA[i]);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">&#125;;</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>操作内联样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					</span><br><span class="line">					<span class="comment">//修改box1的宽度</span></span><br><span class="line">					<span class="comment">/*</span></span><br><span class="line"><span class="comment">					 * 通过JS修改元素的样式：</span></span><br><span class="line"><span class="comment">					 * 	语法：元素.style.样式名 = 样式值</span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 * 注意：如果CSS的样式名中含有-，</span></span><br><span class="line"><span class="comment">					 * 		这种名称在JS中是不合法的比如background-color</span></span><br><span class="line"><span class="comment">					 * 		需要将这种样式名修改为驼峰命名法，</span></span><br><span class="line"><span class="comment">					 * 		去掉-，然后将-后的字母大写</span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 * 我们通过style属性设置的样式都是内联样式，</span></span><br><span class="line"><span class="comment">					 * 	而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 * 但是如果在样式中写了!important，则此时样式会有最高的优先级，</span></span><br><span class="line"><span class="comment">					 * 	即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效</span></span><br><span class="line"><span class="comment">					 * 	所以尽量不要为样式添加!important</span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 * </span></span><br><span class="line"><span class="comment">					 */</span></span><br><span class="line">					box1.style.width = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">					box1.style.height = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">					box1.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">					</span><br><span class="line">				&#125;;</span><br></pre></td></tr></table></figure>

<p>读取元素当前样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *getComputedStyle()这个方法来获取元素当前的样式</span></span><br><span class="line"><span class="comment"> *        这个方法是window的方法，可以直接使用</span></span><br><span class="line"><span class="comment"> * 需要两个参数</span></span><br><span class="line"><span class="comment"> *        第一个：要获取样式的元素</span></span><br><span class="line"><span class="comment"> *        第二个：可以传递一个伪元素，一般都传null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该方法会返回一个对象，对象中封装了当前元素对应的样式</span></span><br><span class="line"><span class="comment"> *     可以通过对象.样式名来读取样式</span></span><br><span class="line"><span class="comment"> *     如果获取的样式没有设置，则会获取到真实的值，而不是默认值</span></span><br><span class="line"><span class="comment"> *     比如：没有设置width，它不会获取到auto，而是一个长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 但是该方法不支持IE8及以下的浏览器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 通过currentStyle和getComputedStyle()读取到的样式都是只读的，</span></span><br><span class="line"><span class="comment"> *     不能修改，如果要修改必须通过style属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*alert(getComputedStyle(box1,null).width);*/</span></span><br><span class="line"><span class="comment">//正常浏览器的方式</span></span><br><span class="line">alert(getComputedStyle(box1,<span class="literal">null</span>).backgroundColor);</span><br><span class="line"><span class="comment">//IE8的方式</span></span><br><span class="line">alert(box1.currentStyle.backgroundColor);</span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 当鼠标在areaDiv中移动时，在showMsg中来显示鼠标的坐标</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//获取两个div</span></span><br><span class="line">   <span class="keyword">var</span> areaDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;areaDiv&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> showMsg = <span class="built_in">document</span>.getElementById(<span class="string">&quot;showMsg&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * onmousemove</span></span><br><span class="line"><span class="comment">    *     - 该事件将会在鼠标在元素中移动时被触发</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 事件对象</span></span><br><span class="line"><span class="comment">    *     - 当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数,</span></span><br><span class="line"><span class="comment">    *        在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标  键盘哪个按键被按下  鼠标滚轮滚动的方向。。。</span></span><br><span class="line"><span class="comment">    */</span>	</span><br><span class="line">   areaDiv.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 在IE8中，响应函数被处罚时，浏览器不会传递事件对象，</span></span><br><span class="line"><span class="comment">       *     在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">/*if(!event)&#123;</span></span><br><span class="line"><span class="comment">         event = window.event;</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//解决事件对象的兼容性问题</span></span><br><span class="line">      event = event || <span class="built_in">window</span>.event;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * clientX可以获取鼠标指针的水平坐标</span></span><br><span class="line"><span class="comment">       * cilentY可以获取鼠标指针的垂直坐标</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">var</span> x = event.clientX;</span><br><span class="line">      <span class="keyword">var</span> y = event.clientY;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//alert(&quot;x = &quot;+x + &quot; , y = &quot;+y);</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//在showMsg中显示鼠标的坐标</span></span><br><span class="line">      showMsg.innerHTML = <span class="string">&quot;x = &quot;</span>+x + <span class="string">&quot; , y = &quot;</span>+y;</span><br><span class="line">      </span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>div跟随鼠标移动</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         #box1&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: #ff0000;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 开启box1的绝对定位</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            position: absolute;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 使div可以跟随鼠标移动</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取box1</span></span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="comment">//绑定鼠标移动事件</span></span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//解决兼容问题</span></span><br><span class="line">               event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取滚动条滚动的距离</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * chrome认为浏览器的滚动条是body的，可以通过body.scrollTop来获取</span></span><br><span class="line"><span class="comment">                * 火狐等浏览器认为浏览器的滚动条是html的，</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">               <span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">               <span class="comment">//var st = document.documentElement.scrollTop;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取到鼠标的坐标</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * clientX和clientY</span></span><br><span class="line"><span class="comment">                *     用于获取鼠标在当前的可见窗口的坐标</span></span><br><span class="line"><span class="comment">                * div的偏移量，是相对于整个页面的</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * pageX和pageY可以获取鼠标相对于当前页面的坐标</span></span><br><span class="line"><span class="comment">                *     但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">var</span> left = event.clientX;</span><br><span class="line">               <span class="keyword">var</span>　top = event.clientY;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//设置div的偏移量</span></span><br><span class="line">               box1.style.left = left + sl + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">               box1.style.top = top + st + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body style=<span class="string">&quot;height: 1000px;width: 2000px;&quot;</span>&gt;</span><br><span class="line">      &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>事件的冒泡</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">		&lt;title&gt;&lt;/title&gt;</span><br><span class="line">		&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">			#box1&#123;</span><br><span class="line">				width: <span class="number">200</span>px;</span><br><span class="line">				height: <span class="number">200</span>px;</span><br><span class="line">				background-color: yellowgreen;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			#s1&#123;</span><br><span class="line">				background-color: yellow;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;/style&gt;</span><br><span class="line">		&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * 事件的冒泡（Bubble）</span></span><br><span class="line"><span class="comment">				 * 	- 所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件(都是onclick)也会被触发</span></span><br><span class="line"><span class="comment">				 * 	- 在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡</span></span><br><span class="line"><span class="comment">				 *</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line"></span><br><span class="line">				<span class="comment">//为s1绑定一个单击响应函数</span></span><br><span class="line">				<span class="keyword">var</span> s1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">				s1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">					event = event || <span class="built_in">window</span>.event;</span><br><span class="line">					alert(<span class="string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">					<span class="comment">//取消冒泡</span></span><br><span class="line">					<span class="comment">//可以将事件对象的cancelBubble设置为true，即可取消冒泡</span></span><br><span class="line">					event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">				&#125;;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//为box1绑定一个单击响应函数</span></span><br><span class="line">				<span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">				box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">					event = event || <span class="built_in">window</span>.event;</span><br><span class="line">					alert(<span class="string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">					event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">				&#125;;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//为body绑定一个单击响应函数</span></span><br><span class="line">				<span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					alert(<span class="string">&quot;我是body的单击响应函数&quot;</span>);</span><br><span class="line">				&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;/script&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line"></span><br><span class="line">		&lt;div id=<span class="string">&quot;box1&quot;</span>&gt;</span><br><span class="line">			我是box1</span><br><span class="line">			&lt;span id=<span class="string">&quot;s1&quot;</span>&gt;我是span&lt;/span&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>事件的委派</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">		&lt;title&gt;&lt;/title&gt;</span><br><span class="line">		&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">/*</span></span><br><span class="line"><span class="comment">				 * 我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的</span></span><br><span class="line"><span class="comment">				 * 我们可以尝试将其绑定给元素的共同的祖先元素</span></span><br><span class="line"><span class="comment">				 *</span></span><br><span class="line"><span class="comment">				 * 事件的委派</span></span><br><span class="line"><span class="comment">				 * 	- 指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素</span></span><br><span class="line"><span class="comment">				 * 		从而通过祖先元素的响应函数来处理事件。</span></span><br><span class="line"><span class="comment">				 *  - 事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line"></span><br><span class="line">				<span class="comment">//为ul绑定一个单击响应函数</span></span><br><span class="line">				u1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">					event = event || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">					<span class="comment">/*</span></span><br><span class="line"><span class="comment">					 * target</span></span><br><span class="line"><span class="comment">					 * 	- event中的target表示的触发事件的对象</span></span><br><span class="line"><span class="comment">					 */</span></span><br><span class="line">					<span class="comment">//alert(event.target);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">					<span class="comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span></span><br><span class="line">					<span class="keyword">if</span>(event.target.className == <span class="string">&quot;link&quot;</span>)&#123;</span><br><span class="line">						alert(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;;</span><br><span class="line"></span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">		&lt;/script&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;添加超链接&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">		&lt;ul id=<span class="string">&quot;u1&quot;</span> style=<span class="string">&quot;background-color: #bfa;&quot;</span>&gt;</span><br><span class="line">			&lt;li&gt;</span><br><span class="line">				&lt;p&gt;我是p元素&lt;/p&gt;</span><br><span class="line">			&lt;/li&gt;</span><br><span class="line">			&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">			&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">			&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">		&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>事件的绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 对象.事件 = 函数 的形式绑定响应函数，</span></span><br><span class="line"><span class="comment"> *     它只能同时为一个元素的一个事件绑定一个响应函数，</span></span><br><span class="line"><span class="comment"> *     不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * addEventListener()</span></span><br><span class="line"><span class="comment"> *     - 通过这个方法也可以为元素绑定响应函数</span></span><br><span class="line"><span class="comment"> *  - 参数：</span></span><br><span class="line"><span class="comment"> *        1.事件的字符串，不要on</span></span><br><span class="line"><span class="comment"> *        2.回调函数，当事件触发时该函数会被调用</span></span><br><span class="line"><span class="comment"> *        3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，</span></span><br><span class="line"><span class="comment"> *     这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这个方法不支持IE8及以下的浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn01.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * attachEvent()</span></span><br><span class="line"><span class="comment"> *     - 在IE8中可以使用attachEvent()来绑定事件</span></span><br><span class="line"><span class="comment"> *  - 参数：</span></span><br><span class="line"><span class="comment"> *        1.事件的字符串，要on</span></span><br><span class="line"><span class="comment"> *        2.回调函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  - 这个方法也可以同时为一个事件绑定多个处理函数，</span></span><br><span class="line"><span class="comment"> *        不同的是它是后绑定先执行，执行顺序和addEventListener()相反</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn01.attachEvent(<span class="string">&quot;onclick&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> *</span> addEventListener()中的this，是绑定事件的对象</span><br><span class="line"><span class="bullet"> *</span> attachEvent()中的this，是window</span><br><span class="line"> <span class="emphasis">*/</span></span><br></pre></td></tr></table></figure>

<p>事件的传播</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*      </span>1.捕获阶段</span><br><span class="line"><span class="bullet">*        </span>- 在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件</span><br><span class="line"><span class="bullet">*     </span>2.目标阶段</span><br><span class="line"><span class="bullet">*        </span>- 事件捕获到目标元素，捕获结束开始在目标元素上触发事件</span><br><span class="line"><span class="bullet">*     </span>3.冒泡阶段</span><br><span class="line"><span class="bullet">*        </span>- 事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</span><br></pre></td></tr></table></figure>

<p>拖拽</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         </span><br><span class="line">         #box1&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         #box2&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            position: absolute;</span><br><span class="line">            </span><br><span class="line">            left: <span class="number">200</span>px;</span><br><span class="line">            top: <span class="number">200</span>px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 拖拽box1元素</span></span><br><span class="line"><span class="comment">             *  - 拖拽的流程</span></span><br><span class="line"><span class="comment">             *        1.当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line"><span class="comment">             *        2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line"><span class="comment">             *        3.当鼠标松开时，被拖拽元素固定在当前位置  onmouseup</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取box1</span></span><br><span class="line">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">            <span class="comment">//为box1绑定一个鼠标按下事件</span></span><br><span class="line">            <span class="comment">//当鼠标在被拖拽元素上按下时，开始拖拽  onmousedown</span></span><br><span class="line">            box1.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">               event = event || <span class="built_in">window</span>.event;</span><br><span class="line">               <span class="comment">//div的偏移量 鼠标.clentX - 元素.offsetLeft</span></span><br><span class="line">               <span class="comment">//div的偏移量 鼠标.clentY - 元素.offsetTop</span></span><br><span class="line">               <span class="keyword">var</span> ol = event.clientX - box1.offsetLeft;</span><br><span class="line">               <span class="keyword">var</span> ot = event.clientY - box1.offsetTop;</span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">               <span class="comment">//为document绑定一个onmousemove事件</span></span><br><span class="line">               <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">                  event = event || <span class="built_in">window</span>.event;</span><br><span class="line">                  <span class="comment">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span></span><br><span class="line">                  <span class="comment">//获取鼠标的坐标</span></span><br><span class="line">                  <span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line">                  <span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">//修改box1的位置</span></span><br><span class="line">                  box1.style.left = left+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">                  box1.style.top = top+<span class="string">&quot;px&quot;</span>;</span><br><span class="line">                  </span><br><span class="line">               &#125;;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">//为document绑定一个鼠标松开事件</span></span><br><span class="line">               <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="comment">//当鼠标松开时，被拖拽元素固定在当前位置  onmouseup</span></span><br><span class="line">                  <span class="comment">//取消document的onmousemove事件</span></span><br><span class="line">                  <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">                  <span class="comment">//取消document的onmouseup事件</span></span><br><span class="line">                  <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;div id=<span class="string">&quot;box1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div id=<span class="string">&quot;box2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>BOM</span><br><span class="line"><span class="bullet">*  </span>- 浏览器对象模型</span><br><span class="line"><span class="bullet">*  </span>- BOM可以使我们通过JS来操作浏览器</span><br><span class="line"><span class="bullet">*  </span>- 在BOM中为我们提供了一组对象，用来完成对浏览器的操作</span><br><span class="line"><span class="bullet">*  </span>- BOM对象</span><br><span class="line"><span class="bullet">*     </span>Window</span><br><span class="line"><span class="bullet">*        </span>- 代表的是整个浏览器的窗口，同时window也是网页中的全局对象</span><br><span class="line"><span class="bullet">*     </span>Navigator</span><br><span class="line"><span class="bullet">*        </span>- 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</span><br><span class="line"><span class="bullet">*     </span>Location</span><br><span class="line"><span class="bullet">*        </span>- 代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</span><br><span class="line"><span class="bullet">*     </span>History</span><br><span class="line"><span class="bullet">*        </span>- 代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录</span><br><span class="line"><span class="bullet">*           </span>由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页</span><br><span class="line"><span class="bullet">*           </span>而且该操作只在当次访问时有效</span><br><span class="line"><span class="bullet">*     </span>Screen</span><br><span class="line"><span class="bullet">*        </span>- 代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息</span><br><span class="line"><span class="bullet">* </span></span><br><span class="line"><span class="bullet">* </span></span><br><span class="line"><span class="bullet">*     </span>这些BOM对象在浏览器中都是作为window对象的属性保存的，</span><br><span class="line"><span class="bullet">*        </span>可以通过window对象来使用，也可以直接使用</span><br></pre></td></tr></table></figure>

<h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* Navigator</span><br><span class="line">*  - 代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</span><br><span class="line">*  - 由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</span><br><span class="line">*  - 一般我们只会使用userAgent来判断浏览器的信息，</span><br><span class="line">*     userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，</span><br><span class="line">*     不同的浏览器会有不同的userAgent</span><br><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">			</span><br><span class="line"><span class="built_in">console</span>.log(ua);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="regexp">/firefox/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是火狐！！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/chrome/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是Chrome&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/msie/i</span>.test(ua))&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE浏览器~~~&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE11，枪毙了你~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息</span></span><br><span class="line"><span class="comment">* 比如：ActiveXObject</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;ActiveXObject&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    alert(<span class="string">&quot;你是IE，我已经抓住你了~~~&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你不是IE~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*alert(&quot;ActiveXObject&quot; in window);*/</span></span><br></pre></td></tr></table></figure>

<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">btn.onclick = function()&#123;</span><br><span class="line">   /<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">    *</span> length</span><br><span class="line"><span class="bullet">    *</span>     - 属性，可以获取到当次访问的链接数量</span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //alert(history.length);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * back()</span></span><br><span class="line"><span class="code">    *     - 可以用来回退到上一个页面，作用和浏览器的回退按钮一样</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //history.back();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * forward()</span></span><br><span class="line"><span class="code">    *     - 可以跳转下一个页面，作用和浏览器的前进按钮一样</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   //history.forward();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   /*</span></span><br><span class="line"><span class="code">    * go()</span></span><br><span class="line"><span class="code">    *     - 可以用来跳转到指定的页面</span></span><br><span class="line"><span class="code">    *     - 它需要一个整数作为参数</span></span><br><span class="line"><span class="code">    *        1:表示向前跳转一个页面 相当于forward()</span></span><br><span class="line"><span class="code">    *        2:表示向前跳转两个页面</span></span><br><span class="line"><span class="code">    *        -1:表示向后跳转一个页面</span></span><br><span class="line"><span class="code">    *        -2:表示向后跳转两个页面</span></span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   history.go(-2);</span></span><br><span class="line"><span class="code">&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果直接打印location，则可以获取到地址栏的信息（当前页面的完整路径）</span></span><br><span class="line">   <span class="comment">//alert(location);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 如果直接将location属性修改为一个完整的路径，或相对路径</span></span><br><span class="line"><span class="comment">    *     则我们页面会自动跳转到该路径，并且会生成相应的历史记录</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// location = &quot;http://www.baidu.com&quot;;</span></span><br><span class="line">   <span class="comment">//location = &quot;01.BOM.html&quot;;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * assign()</span></span><br><span class="line"><span class="comment">    *     - 用来跳转到其他的页面，作用和直接修改location一样</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// location.assign(&quot;http://www.baidu.com&quot;);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * reload()</span></span><br><span class="line"><span class="comment">    *     - 用于重新加载当前页面，作用和刷新按钮一样</span></span><br><span class="line"><span class="comment">    *     - 如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//location.reload(true);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * replace()</span></span><br><span class="line"><span class="comment">    *     - 可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</span></span><br><span class="line"><span class="comment">    *        不会生成历史记录，不能使用回退按钮回退</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   location.replace(<span class="string">&quot;01.BOM.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>定时调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取count</span></span><br><span class="line">   <span class="keyword">var</span> count = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * setInterval()</span></span><br><span class="line"><span class="comment">    *     - 定时调用</span></span><br><span class="line"><span class="comment">    *     - 可以将一个函数，每隔一段时间执行一次</span></span><br><span class="line"><span class="comment">    *     - 参数：</span></span><br><span class="line"><span class="comment">    *        1.回调函数，该函数会每隔一段时间被调用一次</span></span><br><span class="line"><span class="comment">    *        2.每次调用间隔的时间，单位是毫秒</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *     - 返回值：</span></span><br><span class="line"><span class="comment">    *        返回一个Number类型的数据</span></span><br><span class="line"><span class="comment">    *        这个数字用来作为定时器的唯一标识</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      count.innerHTML = num++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(num == <span class="number">11</span>)&#123;</span><br><span class="line">         <span class="comment">//关闭定时器</span></span><br><span class="line">         <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//console.log(timer);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//clearInterval()可以用来关闭一个定时器</span></span><br><span class="line">   <span class="comment">//方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器</span></span><br><span class="line">   <span class="comment">//clearInterval(timer);</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>切换图片联系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">      &lt;title&gt;&lt;/title&gt;</span><br><span class="line">      &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 使图片可以自动切换</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取img标签</span></span><br><span class="line">            <span class="keyword">var</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个数组来保存图片的路径</span></span><br><span class="line">            <span class="keyword">var</span> imgArr = [<span class="string">&quot;img/1.jpg&quot;</span>,<span class="string">&quot;img/2.jpg&quot;</span>,<span class="string">&quot;img/3.jpg&quot;</span>,<span class="string">&quot;img/4.jpg&quot;</span>,<span class="string">&quot;img/5.jpg&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个变量，用来保存当前图片的索引</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个变量，用来保存定时器的标识</span></span><br><span class="line">            <span class="keyword">var</span> timer;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为btn01绑定一个单击响应函数</span></span><br><span class="line">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn01&quot;</span>);</span><br><span class="line">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 目前，我们每点击一次按钮，就会开启一个定时器，</span></span><br><span class="line"><span class="comment">                *     点击多次就会开启多个定时器，这就导致图片的切换速度过快，</span></span><br><span class="line"><span class="comment">                *     并且我们只能关闭最后一次开启的定时器</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//在开启定时器之前，需要将当前元素上的其他定时器关闭</span></span><br><span class="line">               <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 开启一个定时器，来自动切换图片</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="comment">//使索引自增</span></span><br><span class="line">                  index++;</span><br><span class="line">                  <span class="comment">//判断索引是否超过最大索引</span></span><br><span class="line">                  <span class="comment">/*if(index &gt;= imgArr.length)&#123;</span></span><br><span class="line"><span class="comment">                     //则将index设置为0</span></span><br><span class="line"><span class="comment">                     index = 0;</span></span><br><span class="line"><span class="comment">                  &#125;*/</span></span><br><span class="line">                  index %= imgArr.length;</span><br><span class="line">                  <span class="comment">//修改img1的src属性</span></span><br><span class="line">                  img1.src = imgArr[index];</span><br><span class="line"></span><br><span class="line">               &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为btn02绑定一个单击响应函数</span></span><br><span class="line">            <span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn02&quot;</span>);</span><br><span class="line">            btn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="comment">//点击按钮以后，停止图片的自动切换，关闭定时器</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * clearInterval()可以接收任意参数，</span></span><br><span class="line"><span class="comment">                *     如果参数是一个有效的定时器的标识，则停止对应的定时器</span></span><br><span class="line"><span class="comment">                *     如果参数不是一个有效的标识，则什么也不做</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;img id=<span class="string">&quot;img1&quot;</span> src=<span class="string">&quot;img/1.jpg&quot;</span>/&gt;</span><br><span class="line">      &lt;br /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">      &lt;button id=<span class="string">&quot;btn01&quot;</span>&gt;开始&lt;/button&gt;</span><br><span class="line">      &lt;button id=<span class="string">&quot;btn02&quot;</span>&gt;停止&lt;/button&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>延时调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 延时调用，</span></span><br><span class="line"><span class="comment">    *     延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num++);</span><br><span class="line">   &#125;,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用clearTimeout()来关闭一个延时调用</span></span><br><span class="line">   <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*     JSON分类：</span></span><br><span class="line"><span class="comment"> *           1.对象 &#123;&#125;</span></span><br><span class="line"><span class="comment"> *           2.数组 []</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *        JSON中允许的值：</span></span><br><span class="line"><span class="comment"> *           1.字符串</span></span><br><span class="line"><span class="comment"> *           2.数值</span></span><br><span class="line"><span class="comment"> *           3.布尔值</span></span><br><span class="line"><span class="comment"> *           4.null</span></span><br><span class="line"><span class="comment"> *           5.对象</span></span><br><span class="line"><span class="comment"> *           6.数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * json --&gt; js对象</span></span><br><span class="line"><span class="comment"> *      JSON.parse()</span></span><br><span class="line"><span class="comment"> *        - 可以将以JSON字符串转换为js对象</span></span><br><span class="line"><span class="comment"> *        - 它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">JSON</span>.parse(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span> , <span class="attr">age</span>:<span class="number">28</span> , <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JS对象 ---&gt; JSON</span></span><br><span class="line"><span class="comment"> *     JSON.stringify()</span></span><br><span class="line"><span class="comment"> *        - 可以将一个JS对象转换为JSON字符串</span></span><br><span class="line"><span class="comment"> *        - 需要一个js对象作为参数，会返回一个JSON字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj3);</span><br></pre></td></tr></table></figure>

<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!--</span><br><span class="line"><span class="number">1.</span> 如何产生闭包?</span><br><span class="line">  * 当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包</span><br><span class="line"><span class="number">2.</span> 闭包到底是什么?</span><br><span class="line">  * 使用chrome调试查看</span><br><span class="line">  * 理解一: 闭包是嵌套的内部函数(绝大部分人)</span><br><span class="line">  * 理解二: 包含被引用变量(函数)的对象(极少数人)</span><br><span class="line">  * 注意: 闭包存在于嵌套的内部函数中</span><br><span class="line"><span class="number">3.</span> 产生闭包的条件?</span><br><span class="line">  * 函数嵌套</span><br><span class="line">  * 内部函数引用了外部函数的数据(变量/函数)</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//执行函数定义就会产生闭包 不用调用</span></span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fn1()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>常见的闭包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="number">1.</span> 将函数作为另一个函数的返回值</span><br><span class="line"><span class="number">2.</span> 将函数作为实参传递给另一个函数调用</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 1. 将函数作为另一个函数的返回值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      a++</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> f = fn1()</span><br><span class="line">  f() <span class="comment">// 3</span></span><br><span class="line">  f() <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 将函数作为实参传递给另一个函数调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsgDelay</span>(<span class="params">msg, time</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(msg)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;</span><br><span class="line">  showMsgDelay(<span class="string">&#x27;hello&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>闭包的作用</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 使用函数内部的变量在函数执行完后, 仍然存活在内存中<span class="comment">(延长了局部变量的生命周期)</span></span><br><span class="line"><span class="number">2.</span> 让函数外部可以操作<span class="comment">(读写)</span>到函数内部的数据<span class="comment">(变量/函数)</span></span><br></pre></td></tr></table></figure>

<p>闭包的生命周期</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</span><br><span class="line"><span class="number">2.</span> 死亡: 在嵌套的内部函数成为垃圾对象时</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js</title>
    <url>/2020/10/22/Vue-js/</url>
    <content><![CDATA[<h1 id="VUE基础"><a href="#VUE基础" class="headerlink" title="VUE基础"></a>VUE基础</h1><h2 id="列表展示"><a href="#列表展示" class="headerlink" title="列表展示"></a>列表展示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;item in names&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello vue&#39;,</span><br><span class="line">                names: [&#39;bob&#39;,&#39;jack&#39;,&#39;rose&#39;],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;当前计数:&#123;&#123;counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!--        @是v-on的简写 是语法糖--&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;counter--&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                increment: function ()&#123;</span><br><span class="line">                    this.counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Vue的options"><a href="#Vue的options" class="headerlink" title="Vue的options"></a>Vue的options</h2><p>创建vue实例的时候 传入了一个对象options 包含一下选项</p>
<ul>
<li>el:决定之后vue实例管理哪个dom 类型:String|HtmlElement</li>
<li>data: vue实例对应的数据对象 类型：Object|Function 在组件中必须是函数类型</li>
<li>methods:定义vue的一些方法 可以在其他地方调用  也可以在指令中使用</li>
</ul>
<h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p><img src="file://D:/%E7%A5%9E%E7%A7%98%E6%96%87%E4%BB%B6/Java/%E4%B9%90%E4%BC%98/%E7%AC%94%E8%AE%B0/vue%E5%85%A5%E9%97%A8/assets/lifecycle.png?lastModify=1603424928" alt="Vue life cycle"></p>
<p><strong>钩子函数</strong></p>
<p>beforeCreated：我们在用Vue时都要进行实例化，因此，该函数就是在Vue实例化时调用，也可以将他理解为初始化函数比较方便一点，在Vue1.0时，这个函数的名字就是init。 </p>
<p>created：在创建实例之后进行调用。 </p>
<p>beforeMount：页面加载完成，没有渲染。如：此时页面还是</p>
<p>mounted：我们可以将他理解为原生js中的window.onload=function({.,.}),或许大家也在用jquery，所以也可以理解为jquery中的$(document).ready(function(){….})，他的功能就是：在dom文档渲染完毕之后将要执行的函数，该函数在Vue1.0版本中名字为compiled。 此时页面中的已被渲染成峰哥</p>
<p>beforeDestroy：该函数将在销毁实例前进行调用 。</p>
<p>destroyed：改函数将在销毁实例时进行调用。</p>
<p>beforeUpdate：组件更新之前。</p>
<p>updated：组件更新之后。</p>
<h2 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h2><p>mustache语法也就是双大括号 里面不仅可以直接写变量 也可以写简单的表达式 <code>&#123;&#123;namee * 2&#125;&#125;</code> </p>
<p>不能在属性值中使用&lt;img src=”“&gt;</p>
<p>v-once：当修改module中的数据时 view中的数据不会改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--        在console中分别修改两个变量的值 查看是否改变--&gt;</span><br><span class="line">        &lt;h1 v-once&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>v-html:将string中的html解析并渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-html&#x3D;&quot;url&quot;&gt;&#123;&#123;url&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;url&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23,</span><br><span class="line">                url: &#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>v-text:会把标签中的文本内容覆盖掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h2 v-text&#x3D;&quot;name&quot;&gt;我即将被覆盖&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>

<p>v-pre:标签的内容不会编译解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">页面上直接显示&#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;h2 v-pre&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure>

<p>v-cloak:有时候页面可能加载过慢 先显示 再显示bob 为了避免这总情况 使用v-cloak vue解析之后v-cloak被删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 v-text&#x3D;&quot;name&quot;&gt;我即将被覆盖&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                name: &#39;bob&#39;,</span><br><span class="line">                age: 23,</span><br><span class="line">                url: &#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>动态绑定:为属性绑定model中的数据 可以简写为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;baidu&quot;&gt;跳转到百度&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a :href&#x3D;&quot;baidu&quot;&gt;跳转百度&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                baidu: &#39;http:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>动态绑定class:对象语法</p>
<p><strong>方法一</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .active &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .front &#123;</span><br><span class="line">            font-size:10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .location &#123;</span><br><span class="line">            text-align:center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 class&#x3D;&#39;location&#39; :class&#x3D;&quot;&#123;active:isActive,front:true&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;一条信息&#39;,</span><br><span class="line">                title: &#39;title&#39;,</span><br><span class="line">                active: &#39;active&#39;,</span><br><span class="line">                isActive: true,</span><br><span class="line">                isFront: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;h2 class&#x3D;&#39;location&#39; :class&#x3D;&quot;getClasses()&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;一条信息&#39;,</span><br><span class="line">                title: &#39;title&#39;,</span><br><span class="line">                </span><br><span class="line">                isActive: true,</span><br><span class="line">                isFront: true</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                getClasses: function ()&#123;</span><br><span class="line">                    return &#123;active:this.isActive,front:this.isFront&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>数组语法：无法动态修改 很少使用 也可以封装成一个方法</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;h2 <span class="keyword">class</span>=&#x27;<span class="symbol">location</span>&#x27; :<span class="symbol">class</span>=&quot;[<span class="symbol">active,</span>&#x27;<span class="symbol">front</span>&#x27;]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>作业：点击哪个 哪个变色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;(item,index) in movies&quot;</span><br><span class="line">                :class&#x3D;&quot;&#123;&#39;active&#39;:currentIndex&#x3D;&#x3D;index&#125;&quot;</span><br><span class="line">                @click&#x3D;&#39;changeColor(index)&#39;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                currentIndex: 0,</span><br><span class="line">                movies: [&quot;三国演义&quot;,&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;西游记&quot;]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeColor: function(index)&#123;</span><br><span class="line">                    this.currentIndex &#x3D; index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>v-bind动态绑定style：对象语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 :style&#x3D;&quot;&#123;fontSize: &#39;20px&#39;,color: red&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                currentIndex: 0,</span><br><span class="line">                message: &#39;hello wolrd&#39;,</span><br><span class="line">                movies: [&quot;三国演义&quot;,&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;西游记&quot;],</span><br><span class="line">                red: &#39;red&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeColor: function(index)&#123;</span><br><span class="line">                    this.currentIndex &#x3D; index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>返回的是一个属性 相比于method 可以缓存数据 调用多次 不用重复计算</p>
<p>简写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName: &#39;Bob&#39;,</span><br><span class="line">                LastName: &#39;Allen&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                fullName: function ()&#123;</span><br><span class="line">                    return this.firstName + &#39; &#39; + this.LastName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>属性有两个方法getter和setter 完整写法</p>
<h2 id="块级作用域var和let"><a href="#块级作用域var和let" class="headerlink" title="块级作用域var和let"></a>块级作用域var和let</h2><p>var的if和for没有块级作用域 函数有作用域 很多时候需要借助function的作用域来解决引用外面变量的问题 </p>
<p>ES6中加入了let let有if和for的块级作用域</p>
<h2 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h2><p>const修饰的变量不会被再次赋值 在es6开发中 优先使用const 需要改变某个标识符的时候才使用let</p>
<p>const修饰的标识符必须赋值  错误示范：const name;</p>
<p>指向的对象不能修改但是可以改变对象的内部属性</p>
<h2 id="对象增量写法"><a href="#对象增量写法" class="headerlink" title="对象增量写法"></a>对象增量写法</h2><p>ES6中新增的写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;自动解析：把变量和他的值最为对象的属性</span><br><span class="line">      const name &#x3D; &quot;bob&quot;;</span><br><span class="line">      const age &#x3D; 18;</span><br><span class="line">      const obj &#x3D; &#123;</span><br><span class="line">          name,age,</span><br><span class="line">          &#x2F;&#x2F;定义函数:并进行类型验证 传入的参数必须是String</span><br><span class="line">          run(name:String)&#123;</span><br><span class="line">              console.log(&quot;我要跑了&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>.stop修饰符 阻止事件冒泡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;div @click&#x3D;&quot;divClick&quot;&gt;</span><br><span class="line">           aaaa</span><br><span class="line">           &lt;button @click.stop&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello vue&#39;,</span><br><span class="line">                names: [&#39;bob&#39;,&#39;jack&#39;,&#39;rose&#39;],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                divClick()&#123;</span><br><span class="line">                    console.log(&quot;divClick&quot;)</span><br><span class="line">                &#125;,</span><br><span class="line">                btnClick()&#123;</span><br><span class="line">                    console.log(&quot;btnClick&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>.prevent阻止默认事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#执行自己的函数submitClick而不是跳转到baidu</span><br><span class="line">&lt;form action&#x3D;&quot;baidu&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; @click.prevent&#x3D;&quot;submitClick&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>监听键帽的点击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; @keyup&#x3D;&quot;keyUp&quot;&gt;</span><br><span class="line">#只监听enter</span><br><span class="line">@keyUp.enter</span><br></pre></td></tr></table></figure>

<p>.once只触发一次回调</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click.once&#x3D;&quot;btnClick&quot;&gt;只触发一次&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if v-else"></a>v-if v-else-if v-else</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2 v-if&#x3D;&quot;counter&gt;0&quot;&gt;&#123;&#123;message+&#39;counter&gt;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2 v-else-if&#x3D;&quot;counter&lt;0&quot;&gt;&#123;&#123;message+&#39;counter&lt;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2 v-else&gt;&#123;&#123;message+&#39;counter&#x3D;&#x3D;0&#39;&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                counter: 1,</span><br><span class="line">                message:&quot;hello world&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"></span><br><span class="line">                increment: function ()&#123;</span><br><span class="line">                    this.counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>案例：登录切换 点击切换 输入框显示不同的内容</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201026213741391.png" alt="image-20201026213741391"></p>
<p>小问题：在输入框输入内容后 点击切换 输入框中的内容还在 因为vue在进行dom渲染时 出于性能考虑 会尽可能的复用已经存在的元素 而不是重新创建新的元素  如果不希望重复利用  可以在input里添加key 如果两个input的key不同则不可以复用</p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show当条件为false的时候 仅将元素的dispaly属性置为none </p>
<p>v-if条件为false的时候 不会有对应的元素在dom中</p>
<p>显示与隐藏切换频繁的时候使用v-show</p>
<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p><strong>遍历数组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(movie,index) in movies&quot;&gt;</span><br><span class="line">            &#123;&#123;index+1&#125;&#125;.&#123;&#123;movie&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>第二个参数是index 顺序不能交换</p>
<p><strong>遍历对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#x2F;&#x2F;key是下标</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(value,key) in person&quot;&gt;</span><br><span class="line">            &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028082150266.png" alt="image-20201028082150266"></p>
<p>vue是响应式的 当数据发生变化的时候 vue会自动检测 数据变化 视图会发生对应的更新 </p>
<p>vue中包含了一组观察数组编译的方法 使用他们改变数组也会触发视图的更新:push pop shift unshift sort reverse</p>
<p>shift删除数组最前面的元素 unshift在数组前面添加元素</p>
<p>使用数组下标修改元素 不能做到响应式</p>
<h2 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h2><p>过滤器的使用：过滤器会把管道前的元素作为第一个参数传入</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028091630236.png" alt="image-20201028091630236"></p>
<p>​    <img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201028091636710.png" alt="image-20201028091636710"></p>
<h2 id="高阶函数的使用"><a href="#高阶函数的使用" class="headerlink" title="高阶函数的使用"></a>高阶函数的使用</h2><p>遍历的两种方式</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030090307298.png" alt="image-20201030090307298"></p>
<p><strong>filter</strong>：回调函数返回true时 函数内部将这次回调的n加入到新的数据中 返回false 这个n被过滤掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;h2 v-for&#x3D;&quot;num in testFilter(nums)&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testFilter(arr)&#123;</span><br><span class="line">                    return arr.filter(function (n)&#123;</span><br><span class="line">                        return n&lt;&#x3D;3;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>map</strong>:返回的值取代之前的值加入到回调函数的数组中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">       &lt;h2 v-for&#x3D;&quot;num in testMap(nums)&quot;&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testMap(arr)&#123; </span><br><span class="line">                    return arr.map(function (n)&#123;</span><br><span class="line">                        return n*2;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>reduce:对数组中的所有内容进行汇总</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;testReduce(nums)&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue (&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                nums:[1,2,3,4,5],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                testReduce(arr)&#123;</span><br><span class="line">                    &#x2F;&#x2F;n是数组的元素 preValue是每次返回的结果</span><br><span class="line">                    return arr.reduce(function (preValue,n)&#123;</span><br><span class="line">                        return preValue+n;</span><br><span class="line">                    &#125;,0)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model可以实现表单元素和数据的双向绑定</p>
<p><strong>radio</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        男：&lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;男&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot;&gt;&lt;br&gt;</span><br><span class="line">        女：&lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;女&quot; name&#x3D;&quot;sex&quot; v-model&#x3D;&quot;sex&quot;&gt;&lt;br&gt;</span><br><span class="line">        选择结果:&#123;&#123;sex&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                sex: &quot;&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>checkbox</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;agree&quot; v-model&#x3D;&quot;isAgree&quot;&gt;同意协议</span><br><span class="line"></span><br><span class="line">        &lt;h2&gt;您选择的是&#123;&#123;isAgree&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button :disabled&#x3D;&quot;!isAgree&quot;&gt;下一步&lt;&#x2F;button&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isAgree: false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;篮球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;篮球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;足球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;足球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;排球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;排球</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;羽毛球&quot; v-model&#x3D;&quot;hobbies&quot;&gt;羽毛球</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        你的爱好是:&#123;&#123;hobbies&#125;&#125;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                hobbies: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>值绑定：标签中的属性不要写死 使用动态绑定</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030103422316.png" alt="image-20201030103422316"></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>延时加载v-model.lazy:当表格失去焦点或者回车的时候 数据才会更新</p>
<p>如果希望表格中数据是number类型 可以使用v-model.member</p>
<p>v-model.trim:去除掉首尾的空格</p>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="基本使用过程"><a href="#基本使用过程" class="headerlink" title="基本使用过程"></a><strong>基本使用过程</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--        使用组件--&gt;</span><br><span class="line">        &lt;my-cpn&gt;&lt;&#x2F;my-cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;创建组件</span><br><span class="line">        const cpn &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是标题&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;h2&gt;不能引用data里的数据&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F;注册组件</span><br><span class="line">        Vue.component(&#39;my-cpn&#39;,cpn)</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a><strong>全局组件和局部组件</strong></h3><p>全局组件：使用Vue.component()进行注册  可以在多个vue实例中使用</p>
<p>局部组件:在vue中的conponents中进行组测只能在当前vue实例中使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">	el: &#39;#app&#39;,</span><br><span class="line">	components: &#123;</span><br><span class="line">		myCpn:cpn</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="父组件和局部组件"><a href="#父组件和局部组件" class="headerlink" title="父组件和局部组件"></a><strong>父组件和局部组件</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;创建组件</span><br><span class="line">        const child &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        const parent &#x3D; Vue.extend(&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是父组件&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                child: child</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                parent: parent</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a><strong>注册组件语法糖</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;parent&gt;&lt;&#x2F;parent&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;直接创建并注册组件</span><br><span class="line">        Vue.component(&#39;child&#39;,&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line">        Vue.component(&#39;parent&#39;,&#123;</span><br><span class="line">            template: &#96;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;我是父组件&lt;&#x2F;h2&gt;</span><br><span class="line">                    &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &#96;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                &#39;cpn&#39;: &#123;</span><br><span class="line">                    template: &#96;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &#96;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件模块抽离"><a href="#组件模块抽离" class="headerlink" title="组件模块抽离"></a><strong>组件模块抽离</strong></h3><p>template只能有一个根标签</p>
<p>方法一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;cpn&#39;: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是普通组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#39;cpn&#39;: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件data"><a href="#组件data" class="headerlink" title="组件data"></a>组件data</h3><p>组件不能访问实例中的数据 有自己的data 保存在 data函数中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                &#39;cpn&#39;: &#123;</span><br><span class="line">                    template: &#39;#cpn&#39;,</span><br><span class="line">                    date() &#123;</span><br><span class="line">                        return &#123;</span><br><span class="line">                            message: &#39;hello world&#39;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>为什么data必须是函数？防止相同组件定义多个的时候数据共享 导致错误 通过函数定义data可以保证每个组件都有自己单独的空间</p>
<h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>通过props向子组件传递数据 通过事件向父组件发送消息</p>
<h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a><strong>父传子</strong></h4><p>vue实例相当于一个父组件 template只能有一个根标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;cpn v-bind:cmovies&#x3D;&quot;movies&quot; v-bind:cmessage&#x3D;&quot;message&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;cmovies&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;cmessage&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        const cpn &#x3D;  &#123;</span><br><span class="line">            template: &#39;#cpn&#39;,</span><br><span class="line">            &#x2F;&#x2F;数组形式</span><br><span class="line">            &#x2F;&#x2F; props: [&quot;cmovies&quot;,&quot;cmessage&quot;]</span><br><span class="line">        &#x2F;&#x2F;    对象形式:可以对传入数据进行类型限制 支持 String Number Boolean Array Object Date Function Symbol</span><br><span class="line">            props: &#123;</span><br><span class="line">                cmovies: Array,</span><br><span class="line">                cmessage: &#123;</span><br><span class="line">                    type: [String,Number],&#x2F;&#x2F;可以定义多个</span><br><span class="line">                    default: &#39;aaa&#39;, &#x2F;&#x2F;如果父组件中message为null或message未定义 或者没绑定父组件的任何值则给他一个默认值 如果类型是数组或者对象 默认值必须是一个函数</span><br><span class="line">                    required: true, &#x2F;&#x2F;这个参数是必须的</span><br><span class="line">                    validate(value)&#123;</span><br><span class="line">                        &#x2F;&#x2F;进行一些判断</span><br><span class="line">                        return value &#x3D;&#x3D; 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        const app &#x3D; new Vue(&#123;</span><br><span class="line">            el: &#39;#app&#39;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message: &#39;hello world&#39;,</span><br><span class="line">                movies: [&quot;水浒传&quot;,&quot;红楼梦&quot;,&quot;三国演义&quot;],</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                cpn</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p><strong>props驼峰标识</strong></p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201030182132676.png" alt="image-20201030182132676"></p>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a><strong>子传父</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn @itemclick&#x3D;&quot;cpnClick&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button v-for&#x3D;&quot;item in categories&quot; @click&#x3D;&quot;btnClick(item)&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const cpn &#x3D;  &#123;</span><br><span class="line">        template: &#39;#cpn&#39;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                categories: [</span><br><span class="line">                    &#123;id: &#39;1&#39;,name: &#39;热门推荐&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;2&#39;,name: &#39;电脑办公&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;3&#39;,name: &#39;家用电器&#39;&#125;,</span><br><span class="line">                    &#123;id: &#39;4&#39;,name: &#39;手机数码&#39;&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnClick(item)&#123;</span><br><span class="line">                &#x2F;&#x2F;发送一个事件并且传递参数</span><br><span class="line">                this.$emit(&#39;itemclick&#39;,item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            cpnClick(item)&#123;</span><br><span class="line">                console.log(&#39;cpnClick&#39;+item.name)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>组件中的btnClick方法会emit一个itemClick 通过itemClick会把参数传入到父组件的cpnClick方法中</li>
</ul>
<h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a><strong>双向绑定</strong></h4><p>现在通过子组件和父组件都能改变父组件中的data 但是为了避免混淆vue规定只能通过父组件改变data中的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childnum1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;childnum2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>在子组件中添加data 使其绑定一个中间值dnumber 修改的时候修改的是dnumber的值 而不是父组件中data的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            numm1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>增加新的功能 反向修改父组件中的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot; @num1change&#x3D;&quot;num1change&quot; @num2chage&#x3D;&quot;num2change&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;!--使这个input绑定childnum并双向绑定方法childnum1input --&gt;</span><br><span class="line">        &lt;!--@input 一般用于监听事件 只要输入的值变化了就会触发input--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;childnum1&quot; @input&#x3D;&quot;childnum1input&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; :value&#x3D;&quot;childnum2&quot; @input&#x3D;&quot;childnum2input&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          num1change(value)&#123;</span><br><span class="line">              this.num1 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          num2change(value)&#123;</span><br><span class="line">              this.num2 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    childnum1input(event) &#123;   </span><br><span class="line">                        &#x2F;&#x2F;event.target.value的值是childnum1 改变dnumber后把YX,递给父组件</span><br><span class="line">                        this.dnumber1 &#x3D; event.target.value;</span><br><span class="line">                        this.$emit(&#39;num1change&#39;,this.dnumber1)</span><br><span class="line">                        </span><br><span class="line">                    &#125;,</span><br><span class="line">                    childnum2input(event) &#123;</span><br><span class="line">                        this.dnumber2 &#x3D; event.target.value;</span><br><span class="line">                        this.$emit(&#39;num2change&#39;,this.dnumber2)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>增加新的功能 当在第一个input中输入内容的时候 第二个input的内容和数据 为第一个input的100</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201031085733023.png" alt="image-20201031085733023"></p>
<p>watch实现双向绑定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn :childnum1&#x3D;&quot;num1&quot; :childnum2&#x3D;&quot;num2&quot; @num1change&#x3D;&quot;num1change&quot; @num2chage&#x3D;&quot;num2change&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber1&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;!--使这个input绑定childnum并双向绑定方法childnum1input --&gt;</span><br><span class="line">        &lt;!--@input 一般用于监听事件 只要输入的值变化了就会触发input--&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber1&quot;&gt;</span><br><span class="line">        &lt;h2&gt;props:&#123;&#123;childnum2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;data:&#123;&#123;dnumber2&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;dnumber2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            num1:1,</span><br><span class="line">            num2:2</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          num1change(value)&#123;</span><br><span class="line">              this.num1 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          num2change(value)&#123;</span><br><span class="line">              this.num2 &#x3D; parseFloat(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    childnum1: Number,</span><br><span class="line">                    childnum2: Number</span><br><span class="line">                &#125;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        dnumber1: this.childnum1,</span><br><span class="line">                        dnumber2: this.childnum2</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                watch:&#123;</span><br><span class="line">                    dnumber1(newvalue)&#123;</span><br><span class="line">                        this.dnumber2 &#x3D; newvalue * 100;</span><br><span class="line">                        this.$emit(&#39;num1change&#39;,newvalue)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    dnumber2(newvalue)&#123;</span><br><span class="line">                        this.dnumber1 &#x3D; newvalue &#x2F; 100;</span><br><span class="line">                        this.$emit(&#39;num2change&#39;,newvalue)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h3><p>$children:需要根据自组件的下标获取 不方便 很少使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(this.$children)</span><br><span class="line">                this.$children[0].showMessage()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    showMessage()&#123;</span><br><span class="line">                        console.log(&#39;showMessage&#39;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>$refs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;aaa&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;bbb&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;cpn ref&#x3D;&quot;ccc&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(this.$refs.aaa)</span><br><span class="line">                this.$refs.aaa.showMessage()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    showMessage()&#123;</span><br><span class="line">                        console.log(&#39;showMessage&#39;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h3><p>parent和root</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;btnclick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    btnclick()&#123;</span><br><span class="line">                        &#x2F;&#x2F;访问父组件</span><br><span class="line">                        console.log(this.$parent.message)</span><br><span class="line">                    	&#x2F;&#x2F;访问根组件</span><br><span class="line">                        console.log(this.$root.message)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">        &lt;!--这种方式 如果有多个插槽 会替换所有插槽 --&gt;</span><br><span class="line">        &lt;h2&gt;呵呵呵&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h2&gt;呵呵呵&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是子组件&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--        定义一个插槽 默认值为一个button 会把cpn标签中的所有内容都放在插槽中--&gt;</span><br><span class="line">        &lt;slot&gt;&lt;button&gt;按钮&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>给插槽添加一个name属性 可以通过name插入指定的插槽    不指定名字会插入到没有name属性的插槽中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;left&quot;&gt;呵呵呵&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;替换没有名字的插槽&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;!--        定义一个插槽 默认值为一个button 会把cpn标签中的所有内容都放在插槽中--&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;left&quot;&gt;&lt;button&gt;左边&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;mid&quot;&gt;&lt;button&gt;中间&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;right&quot;&gt;&lt;button&gt;右边&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;slot&gt;&lt;button&gt;没有名字&lt;&#x2F;button&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h3><p>模板中的变量使用组件中的 视图中的变量使用vue实例中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--    isshow为true--&gt;</span><br><span class="line">    &lt;cpn v-show&#x3D;&quot;isshow&quot;&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;world&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--        isshow为false--&gt;</span><br><span class="line">        &lt;h2 v-show&#x3D;&quot;isshow&quot;&gt;hello&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">            isshow: true</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        isshow:false</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>父组件替换插槽的标签 但是内容由子组件来提供</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;cpn&gt;</span><br><span class="line">&lt;!--        改变展示方式--&gt;</span><br><span class="line">        &lt;!--    获取子组件中的数据 2.5版本以上可以用div代替template--&gt;</span><br><span class="line">        &lt;template slot-scope&#x3D;&quot;slot&quot;&gt;</span><br><span class="line">            &lt;span v-for&#x3D;&quot;movie in slot.data&quot;&gt;&#123;&#123;movie&#125;&#125;-&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;cpn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;JS&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;cpn&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;cpn&gt;</span><br><span class="line">            &lt;slot :data&#x3D;&quot;movies&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for&#x3D;&quot;movie in movies&quot;&gt;&#123;&#123;movie&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;cpn&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: &#39;hello world&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line">                template: &#39;#cpn&#39;,</span><br><span class="line">                data()&#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        movies: [&#39;三国演义&#39;,&#39;水浒传&#39;,&#39;西游记&#39;,&#39;红楼梦&#39;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p><strong>commonJS的导入和导出</strong></p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101090719158.png" alt="image-20201101090719158"></p>
<p><strong>ES6的导入和导出</strong></p>
<p>导出变量</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101091751012.png" alt="image-20201101091751012"></p>
<p>导出函数和类</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092123506.png" alt="image-20201101092123506"></p>
<p>上面的方式导入和导出的变量名必须保持一致</p>
<p>export default：导出的东西只能有一个</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092458727.png" alt="image-20201101092458727"></p>
<p>导入</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101092634309.png" alt="image-20201101092634309"></p>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>主要功能是模块化和打包 支持各种模块化规范 可以处理模块之间的依赖 并且打包成一个文件</p>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>创建mathUtils.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1* num2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    add,mul</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建一个main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;add,mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mathUtils.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;name,age,height&#125; <span class="keyword">from</span> <span class="string">&quot;./info.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line"><span class="built_in">console</span>.log(height)</span><br></pre></td></tr></table></figure>

<p>创建info.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;bob&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> height = <span class="number">1.79</span></span><br></pre></td></tr></table></figure>

<p>通过webpack进行打包 ：webpack ./src/main.js  -o ./dist/bundle.js</p>
<p>创建一个index.html应用bundle.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js配置</strong></p>
<p>执行webpack的时候自动找到webpack.config.js 读取其中的入口和出口</p>
<p>出口的path需要绝对路径  当前文件的绝对路径可以通过require(‘path’)获取 前期是安装node相关的包 执行npm init即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),   <span class="comment">//要填入绝对路径 动态获取 __dirname是node中的属性 可以获取当前文件所在目录</span></span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>package.json配置</strong></p>
<p>当执行npm init后 会生成此文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack1&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在scripts定义脚本 通过npm run xxx执行 该命令先在本地查找 再进行全局查找</p>
<p>本地安装不要加 -g :npm install webpack –save-dev (–save-dev是开发时依赖 项目打包后不需要继续使用)</p>
<p>安装后自动生成一个node_modules文件夹 并在pacckage.json中添加devDependencies</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.6.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201101190647078.png" alt="image-20201101190647078"></p>
<h4 id="处理css文件"><a href="#处理css文件" class="headerlink" title="处理css文件"></a>处理css文件</h4><p><strong>安装style-loader和css-loader添加css文件</strong></p>
<p>npm install css-loader –save-dev  安装css-loader同理</p>
<p>在webpack.config.js中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">       rules: [</span><br><span class="line">           &#123;</span><br><span class="line">               test: &#x2F;\.css$&#x2F;,</span><br><span class="line">               &#x2F;&#x2F;多个loader时从右向左架子啊</span><br><span class="line">               use: [</span><br><span class="line">                   &#39;style-loader&#39;,      &#x2F;&#x2F;负责将样式添加到dom中</span><br><span class="line">                   &#39;css-loader&#39;         &#x2F;&#x2F;只负责加载css文件</span><br><span class="line">               ]</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在main.js中引入css</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/normal.css&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="图片文件的处理"><a href="#图片文件的处理" class="headerlink" title="图片文件的处理"></a>图片文件的处理</h4><p>安装ur-loader：npm install –save-dev url-loader</p>
<p>在webpck.config.js中添加配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//如果图片大于limit需要安装limit 执行webpack后会把图片打包并重新命名（32位hash 防止重复）</span></span><br><span class="line">            <span class="comment">// 小于limit会将图片编译成base64字符串形式</span></span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包后图片被放在dist目录中 但是浏览器访问的时候还是直接查找打包后的图片 这样会404 在webpack.config.js中的output中添加一行配置 <code>publicPath: &#39;dist/&#39;</code> 这样相当于在图片前面加了一个dist/ 就可以访问成功了</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102091142454.png" alt="image-20201102091142454"></p>
<p>选项</p>
<ul>
<li>img：文件要打包到的文件夹 </li>
<li>name：获取文件原来的名</li>
<li>hash:8：hash只保留八位</li>
<li>ext：获取图片原来的扩展名</li>
</ul>
<p>把生成的图片放在dist的img目录下 并且格式为name.hash:8.ext</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">    name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ES6转ES5"><a href="#ES6转ES5" class="headerlink" title="ES6转ES5"></a>ES6转ES5</h4><p>使用babel对应的loader</p>
<p>安装：npm install <a href="mailto:&#98;&#x61;&#98;&#x65;&#108;&#45;&#108;&#111;&#97;&#100;&#101;&#x72;&#64;&#56;&#46;&#x30;&#x2e;&#x30;&#45;&#98;&#101;&#116;&#x61;&#x2e;&#x30;">&#98;&#x61;&#98;&#x65;&#108;&#45;&#108;&#111;&#97;&#100;&#101;&#x72;&#64;&#56;&#46;&#x30;&#x2e;&#x30;&#45;&#98;&#101;&#116;&#x61;&#x2e;&#x30;</a> @babel/core @babel/preset-env webpack</p>
<p>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行npm run build</p>
<h3 id="使用vue的配置过程"><a href="#使用vue的配置过程" class="headerlink" title="使用vue的配置过程"></a>使用vue的配置过程</h3><p>安装vue：npm install vue –save</p>
<p>在js中导入vue：<code>import Vue from &#39;vue&#39;</code></p>
<p>vue运行的时候有两个版本</p>
<ul>
<li>runtime-only:代码中 不可以用任何的template</li>
<li>runtime-complier:代码中可以有template  因为有complier可以编译模块</li>
</ul>
<p>在webpack.config.js中进行配置使用runtime-complier</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">       alias: &#123;</span><br><span class="line">           <span class="string">&#x27;vue@&#x27;</span>: <span class="string">&#x27;vue/dist/vue.ems.js&#x27;</span> <span class="comment">//使vue指定具体文件夹</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在html正常使用vue 可以在vue中定义一个template 会替换掉&lt;div id=”app”&gt;中的内容</p>
<p>如果</p>
<h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h1><h3 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h3><p>vue-cli可以快速搭建 vue开发环境以及对应的webpack配置</p>
<p>安装vue-cli:npm uninstall -g @vue/cli </p>
<p>Vue CLI &gt;= 3 与旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 (<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：npm install -g @vue/cli-init</p>
<p>初始化项目：vue-cli2:vue init webpack xxx</p>
<p>node xxx.js可以直接执行js文件</p>
<p>build和config中进行了一些配置 npm run build 用来打包 npm run dev运行项目</p>
<p>static文件夹下的文件会原封不动的放入到dist中 其中的.gitKeep文件使即使改目录为空 也会上传到git服务器</p>
<p>vue程序运行过程</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102145346773.png" alt="image-20201102145346773"></p>
<p>创建项目的时候 vue build可选compiler和runtime 区别只体现在main.js中</p>
<ul>
<li><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102145518641.png" alt="image-20201102145518641"></p>
</li>
<li><p>compiler需要解析语法树并编译给render 代码更多 性能较低</p>
</li>
<li><p>所以初始化项目的时候一般选runtime-only</p>
</li>
<li><p>render的参数h是函数createElement  可以创建.vue文件</p>
<ul>
<li>普通用法<img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102150311038.png" alt="image-20201102150311038"></li>
<li>还可以传入.vue文件 文件中的template由vue-template-complier解析为render() </li>
</ul>
</li>
</ul>
<h3 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h3><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102152512117.png" alt="image-20201102152512117"></p>
<p>初始化项目：vue create vue_cli3</p>
<p>在终端输入vue ui就可以启动vue ui</p>
<p>导入需要配置的项目</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102155709761.png" alt="image-20201102155709761"></p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const cli &#x3D; (参数列表)&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果只有一行 大括号可以省略 并且自动返回</p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>vue-cli</p>
<h2 id="url的hash"><a href="#url的hash" class="headerlink" title="url的hash"></a>url的hash</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102192709374.png" alt="image-20201102192709374"></p>
<h2 id="history的pushState"><a href="#history的pushState" class="headerlink" title="history的pushState"></a>history的pushState</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201102192846900.png" alt="image-20201102192846900"></p>
<p>三个参数分别是：data，title，url 相当于把url压入栈中 当执行history.back的时候出栈 总是显示栈顶的url ，history.go(n)可以入栈n个 或者出栈n个url</p>
<p>相似的指令有replaceStatus 不能back</p>
<h2 id="router安装和配置方式"><a href="#router安装和配置方式" class="headerlink" title="router安装和配置方式"></a>router安装和配置方式</h2><p>安装：npm install vue-router –save</p>
<p>在src中创建router/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置路由信息</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//通过Vue.use(插件)安装插件</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//配置路径和组件之间的映射关系</span></span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将router实例传入到Vue实例中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>在main.js中导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果导入的是router目录 自动查找index.js文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)  <span class="comment">//相当于el: &#x27;#pp&#x27;</span></span><br></pre></td></tr></table></figure>

<p> 创建路由组件</p>
<p>About.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是关于&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是关于内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;About&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是首页&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是首页内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>在index.js中进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在App.vue中进行渲染 roter-link会被渲染成&lt;a&gt;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>路由的默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路由默认使用的是url的hash</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103104538701.png" alt="image-20201103104538701"></p>
<p>如果想展示localhost:8080/about可以使用history 默认使用replaceStatus</p>
<p>在index.js中进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="comment">//配置路径和组件之间的映射关系</span></span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>  <span class="comment">//使用history</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="router-link的属性"><a href="#router-link的属性" class="headerlink" title="router-link的属性"></a>router-link的属性</h2><p>tag属性可以指定router-link渲染成什么组件</p>
<p><code>    &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot;&gt;首页&lt;/router-link&gt;</code></p>
<p>使用history的replaceStatus模式使不能点击&lt;- 和-&gt; ：<code>   &lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace&gt;首页&lt;/router-link&gt;</code></p>
<p>当点击router-link的时候 会为其加一个class：router-link-active<img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103105508310.png" alt="image-20201103105508310"></p>
<p>可以利用这个class改变样式</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103105543332.png" alt="image-20201103105543332"></p>
<p>可以使用active-class=” xxx”重命名这个class:<code>    &lt;router-link to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/router-link&gt;</code></p>
<p>也可以在VueRouter中统一修改</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="keyword">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    linkActiveClas<span class="variable">s:</span> <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="通过代码跳转路由"><a href="#通过代码跳转路由" class="headerlink" title="通过代码跳转路由"></a>通过代码跳转路由</h2><p>router会为每个.vue文件添加一个$router属性 这个属性就是VueRouter对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;首页&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;关于&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;相当于history.pushStatus</span><br><span class="line">      this.$router.push(&#39;&#x2F;home&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick()&#123;</span><br><span class="line">      &#x2F;&#x2F;相当于history.replaceStatus</span><br><span class="line">      this.$router.replace(&#39;&#x2F;about&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="动态路由的使用"><a href="#动态路由的使用" class="headerlink" title="动态路由的使用"></a>动态路由的使用</h2><p>创建一个User.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是用户&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;用户内容&lt;&#x2F;div&gt;</span><br><span class="line">     &#x2F;&#x2F;$this获得当前处于活跃状态的路由 参数名是在index.js中配置的参数名</span><br><span class="line">    &lt;div&gt;用户信息：&#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>在index.js配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">//定义了一个参数id</span></span><br><span class="line">    <span class="attribute">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attribute">component</span>: User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在App.vue中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+userId&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置一个属性userId 动态拼接在路由路径上</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userId: &#39;bob&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>主要作用是将路由对应的组件打包成一个个的js代码块</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201103124819887.png" alt="image-20201103124819887"></p>
<p>​    打包后一个懒加载对应要给js文件</p>
<h2 id="路由的嵌套使用"><a href="#路由的嵌套使用" class="headerlink" title="路由的嵌套使用"></a>路由的嵌套使用</h2><p>为Home组件添加两个子路由</p>
<p> 在index.js中进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">       component: Home,</span><br><span class="line">       children: [</span><br><span class="line">           &#123;</span><br><span class="line">             path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">             redirect: <span class="string">&#x27;/home/news&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home_news&#x27;</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home_message&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在Home.vue中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是首页&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div&gt;我是首页内容&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;home&#x2F;news&quot;&gt;新闻&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;home&#x2F;message&quot;&gt;消息&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>创建一个组件Profile</p>
<p>在index.js中进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Profile&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在App.vue中为其创建router-link并传入参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path: &#39;&#x2F;profile&#39;,query: &#123;name: &#39;bob&#39;,age: 18&#125;&#125;&quot;&gt;档案&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<p>Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;信息&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;this.$route.query.name&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;this.$route.query.age&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>动态传参和参数传递通过button实现跳转</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104073922502.png" alt="image-20201104073922502"></p>
<h2 id="导航首位"><a href="#导航首位" class="headerlink" title="导航首位"></a>导航首位</h2><p>如果实现跳转到不同页面时 title跟着变化</p>
<p>在index.js中为路由配置添加meta属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>使用beforeEach(前置钩子：在路由跳转之前执行)实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//from是要离开的路由对象 to是要进入的路由对象 	</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">    <span class="built_in">console</span>.log(to)</span><br><span class="line">    next()  <span class="comment">//调用该方法 才能进入到下一个钩子</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是home中有两个子路由 不知道匹配哪一个 会undefined 使用：document.title = to.matched[0].meta.title 永远匹配第一个</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104082132846.png" alt="image-20201104082132846"></p>
<p>beforeEach就是一个全局守卫 还有afterEach 只有参数to和from</p>
<p>路由独享的守卫</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104083026727.png" alt="image-20201104083026727"></p>
<p>组件内的守卫</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104083222421.png" alt="image-20201104083222421"></p>
<h2 id="keepAlive"><a href="#keepAlive" class="headerlink" title="keepAlive"></a>keepAlive</h2><p>之前组件的状态没有被保留下来 当通过路由跳转的时候 会创建一个新的组件 希望保留状态可以使用keepAlive</p>
<p>把home路由下嵌套路由的重定向配置删除</p>
<p>在Vue.app中把roterLink放在keepAlive中</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;keep-alive&gt;</span></span><br><span class="line">  <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></span><br><span class="line"><span class="section">&lt;/keep-alive&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Home.vue中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      path: &#39;&#x2F;home&#x2F;news&#39; &#x2F;&#x2F;默认跳转到news</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    this.$router.push(this.path)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">    this.path &#x3D; this.$route.path &#x2F;&#x2F;记录离开时当前路径</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>activated和deactivated只有在有keepAlive的时候才会生效</p>
<p><strong>属性</strong></p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104100841241.png" alt="image-20201104100841241"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;Profile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>promise是异步编程的一种解决方案</p>
<p>定时器的异步事件</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104110609705.png" alt="image-20201104110609705"></p>
<p>resolve会执行the里的代码块 reject会执行catch里的代码块</p>
<p>then中可以传入两个参数then(data=&gt;{},error=&gt;{}) </p>
<h1 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a><strong>三种状态</strong></h1><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104153536990.png" alt="image-20201104153536990"></p>
<h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104155201850.png" alt="image-20201104155201850"></p>
<p>如果想让catch处理可以是：return Promise.resolve(res+”xxx”)</p>
<h2 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104205609194.png" alt="image-20201104205609194"></p>
<p>当两个请求都完成的时候 会执行then中的代码 返回结果存在results中</p>
<h1 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104210407094.png" alt="image-20201104210407094"></p>
<p>管理什么状态？</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104211527323.png" alt="image-20201104211527323"></p>
<p>一般为vuex创建一个单独文件夹store 在其中创建于给index.js文件 并创建状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>state是全局的 在任何组件中都能取到</p>
<p>在main.js中进行导入后就可以使用了</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;template&gt;</span></span><br><span class="line">  <span class="variable">&lt;div&gt;</span>&#123;&#123;<span class="variable">$store</span>.<span class="keyword">state</span>.counter&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="状态管理图例"><a href="#状态管理图例" class="headerlink" title="状态管理图例"></a><strong>状态管理图例</strong></h2><p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201104231353077.png" alt="image-20201104231353077"></p>
<p>修改state一定要通过mutation修改 </p>
<p>actions省略 他是用来处理异步操作的 可以请求后端api    </p>
<p>devtools可以记录每次修改state的状态</p>
<p>mutations中定义方法 方法中默认传入一个参数state</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment () &#123;</span><br><span class="line">    <span class="built_in">this</span>.state.counter++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在其他方法中通过commit使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;addition&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addition () &#123;</span><br><span class="line">      this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>state单一状态树：在整个项目中只创建一个store </p>
<h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>getter中也有一个默认参数state</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  powerCounter () &#123;</span><br><span class="line">    return this.<span class="keyword">state</span>.counter * this.<span class="keyword">state</span>.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接通过$store.getters.powerCounter获取</p>
<p>如果需要为getter传入参数 可以使其返回一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  powerCounter () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.state.counter * <span class="built_in">this</span>.state.counter</span><br><span class="line">  &#125;,</span><br><span class="line">  powerCounterAndAdd () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getters.powerCounter + x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过$store.getters.powerCounterAndAdd(x)获取</p>
<h2 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h2><p>state是响应式的 state中数据改变的时候 vue组件会自动更新</p>
<p>响应式的新增的属性和删除属性(在方法中)</p>
<p>Vue.set(state.person,’address’,’jiusan’)</p>
<p>vue.delete(state.person,’addres’)</p>
<h2 id="mutation的类型常量"><a href="#mutation的类型常量" class="headerlink" title="mutation的类型常量"></a>mutation的类型常量</h2><p>创建一个js文件存储常量</p>
<p>mutatiaon-types.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> POWERCOUNT = <span class="string">&#x27;powerCounter&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在index.js中导入并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; POWERCOUNT &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/mutations-types&#x27;</span></span><br><span class="line"></span><br><span class="line">mutations: &#123;</span><br><span class="line">    [POWERCOUNT] () &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有导出是defalut的时候 import不用大括号包裹</p>
<p> 在App.vue中导入并使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; POWERCOUNT &#125; from &#39;@&#x2F;store&#x2F;mutations-types&#39;</span><br><span class="line">additionByAccount (count) &#123;</span><br><span class="line">	this.$store.commit(&#39;incrementByAccount&#39;, count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>处理异步操作必须用action不能用mutation</p>
<p>action中的方法有一个默认值 context</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: 100,</span><br><span class="line">    person: &#123;</span><br><span class="line">      age: 10,</span><br><span class="line">      name: <span class="string">&#x27;bob&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updatePerson () &#123;</span><br><span class="line">      this.state.person.name = <span class="string">&#x27;jason&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    updatePerson (context) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;updatePerson&#x27;</span>)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>在App.vue中进行使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;&#123;&#123;$store.state.person&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;updatePerson&quot;&gt;修改person&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">updatePerson () &#123;</span><br><span class="line">  this.$store.dispatch(&#39;aupdatePerson&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><p>防止store臃肿 可以进行抽离 将store分割成模块</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105104634173.png" alt="image-20201105104634173"></p>
<p>可以使用state.a进行引用 其中的getters和mutations和之前使用方式相同 如果在store中找不到相应的方法 就去模块中查找</p>
<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>在项目中安装axios：npm install axios –save</p>
<p>在main.js中使用    </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span> <span class="comment">//默认是get请求</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>请求方式</p>
<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105130459781.png" alt="image-20201105130459781"></p>
<p>发送并发请求:返回结果是一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">   axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">    url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">        type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        page:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以把返回结果分开处理</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">axios</span><span class="selector-class">.all</span>([</span><br><span class="line">   axios(&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">    <span class="attribute">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">    <span class="attribute">params</span>: &#123;</span><br><span class="line">        <span class="attribute">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">        <span class="attribute">page</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)])<span class="selector-class">.then</span>(axios.spread((res1,res2) =&gt; &#123;</span><br><span class="line">    console.log(res1)</span><br><span class="line">    console.log(res2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p><strong>全局配置</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">axios.defaults.baseURL</span>=<span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line"><span class="attr">axios.defaults.timeout</span>= <span class="number">5000</span> //单位是毫秒</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/22/Vue-js/Vue-js%5Cimage-20201105133058548.png" alt="image-20201105133058548"></p>
<h2 id="axios实例和模块封装"><a href="#axios实例和模块封装" class="headerlink" title="axios实例和模块封装"></a><strong>axios实例和模块封装</strong></h2><p>如果像访问多个ip 把baseUrl设置为全局的话没有通用性 </p>
<p>可以创建实例 处理不同ip的请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">    timeout:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axiosInstance(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>模块封装：创建一个文件夹network 在其中创建一个request.js</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios from <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">export function <span class="title">request</span><span class="params">(config)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> axiosInstance(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main.js中进行使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;@/network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/home/data&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>axios.create会返回一个promise 当需要用其他框架的时候 直接修改request.js文件使其也返回一个promise即可 模块中的代码不用修改</p>
<h2 id="axios拦截器的使用"><a href="#axios拦截器的使用" class="headerlink" title="axios拦截器的使用"></a>axios拦截器的使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axiosInstance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">        timeout:<span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    axiosInstance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(config)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">    axiosInstance.interceptors.response.usr(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.data)</span><br><span class="line">        </span><br><span class="line">    &#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> axiosInstance(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p> 该笔记中所有代码都源于项目concurrent</p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>并发和并行</strong>：并发是同一时间应对多件事情的能力 并行是同一时间动手做多件事情的能力，单核并发 多核既有并发又有并行</p>
<p><strong>同步和异步</strong>：需要等待结果返回才能继续运行的是同步，不需要结果返回 就能继续运行的是异步</p>
<ul>
<li>代码：case_java8.cn.itcast.n2</li>
</ul>
<p><strong>线程上下文</strong>：线程上下文切换频繁会影响性能 以下一些原因导致cpu不在执行当前线程 转而执行另一个线程的代码</p>
<ul>
<li>线程的时间片用完</li>
<li>垃圾回收</li>
<li>有更高优先级的线程需要运行</li>
<li>线程自己调用了sleep,yield,wait,join,park,synchronized,lock等方法</li>
</ul>
<p><strong>常见方法</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005191950899.png" alt="image-20201005191950899"></p>
<ul>
<li>run启动线程后 执行run方法的依然是主线程 所以要想让新线程执行run方法要用start启动线程</li>
<li><a href="https://blog.csdn.net/ssssaaaawe/article/details/100511422">start和run的区别</a><ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005192824004.png" alt="image-20201005192824004"></li>
</ul>
</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005192959678.png" alt="image-20201005192959678"></p>
<ul>
<li>TimeUnit也可以用于让线程休眠 他的可读性更强 并且可以指定时间单位<code>TimeUnit.MICROSECONDS.sleep(100);</code></li>
<li>Sleep会让线程从running转换为TIMED_WAITING状态 时间片会分配给就绪的线程 不会分配给阻塞的线程</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005194054103.png" alt="image-20201005194054103"></p>
<ul>
<li>Yield会让线程从running转换为Runnable状态 然后调度其他线程</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005193152039.png" alt="image-20201005193152039"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005193157727.png" alt="image-20201005193157727"></p>
<ul>
<li>打断标记是一个bool值 成功打断为true</li>
<li>interrupt打断park：park会挂起当前线程 当打断标记为真的时候park会失效</li>
<li>这段代码中第二个park因为打断标记被设置为true而失效 所以会打印出”unpark…”<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005193744583.png" alt="image-20201005193744583"></li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005194729446.png" alt="image-20201005194729446"></p>
<ul>
<li>如果没有join 主进程结束后r才开始赋值 这样主进程获取不到r的值 使用join方法使主进程等待t1结束 再执行后面的代码<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005200252020.png" alt="image-20201005200252020"> <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005203947502.png" alt="image-20201005203947502"></li>
<li>join可以传入一个long类型的值 表示等待的最长时间 单位为毫秒 如果线程提前结束 join也将结束</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005200809564.png" alt="image-20201005200809564"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005200828808.png" alt="image-20201005200828808"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005200844953.png" alt="image-20201005200844953"></p>
<p><strong>过时的方法</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005204031566.png" alt="image-20201005204031566"></p>
<p><strong>线程状态</strong></p>
<p>​    操作系统层面</p>
<p>​    <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005204210400.png" alt="image-20201005204210400"></p>
<p>​    javaAPI层面</p>
<p>​        <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201005204229906.png" alt="image-20201005204229906"></p>
<p><strong>状态转换</strong></p>
<p>t线程用synchronized(obj)获取对象锁后</p>
<p>RUNNABLE&lt;–&gt;WAITING</p>
<ul>
<li>调用obj.wait()方法使 t线程从RUNNABLE–&gt;WAITING</li>
<li>当前线程调用LockSupport.park()方法会让当前线程从RUNNABLE–&gt;WAITING</li>
<li>调用obj.notify(),obj.notifyAll(),t.interrupt()时<ul>
<li>竞争锁成功 ,t线程从WAITING–&gt;RUNNABLE</li>
<li>竞争锁失败 ,t线程从WAITING–&gt;BOLCKED</li>
</ul>
</li>
<li>当前线程调用t.join() 从RUNNABLE–&gt;WAITING 在t线程对象的监视器上等待</li>
<li>调用LockSupport.unpark(目标线程)或调用线程的interrupt() 会让线程从WAITING–&gt;RUNNABLE</li>
</ul>
<p>RUNNABLE&lt;–&gt;TIMED_WAITING</p>
<ul>
<li>调用obj.wait(long n)方法使 t线程从RUNNABLE–&gt;TIMED_WAITING</li>
<li>t线程等待时间超过了n毫秒或调用obj.notify(),obj.notifyAll(),t.interrupt()时<ul>
<li>竞争锁成功 ,t线程从TIMED_WAITING–&gt;RUNNABLE</li>
<li>竞争锁失败 ,t线程从TIMED_WAITING–&gt;BOLCKED</li>
</ul>
</li>
<li>当前线程调用t.join(long n) 从RUNNABLE–&gt;TIMED_WAITING 在t线程对象的监视器上等待</li>
<li>当前线程调用t.join(long n)  且等待时间超过了n毫秒 或t线程运行结束 或调用了当前线程的interrupt()时 当前线程从TIMED_WAITING–&gt;RUNNABL</li>
<li>当前线程调用Thread.sleep(long n)从RUNNABLE–&gt;TIMED_WAITING </li>
<li>当前线程调用Thread.sleep(long n)  且等待时间超过了n毫秒 当前线程从TIMED_WAITING–&gt;RUNNABL</li>
<li>当前线程调用LockSupport.parkNanos(long nanos）或LockSupport.parkUntil(long millis)时，当前线程从RUNNABLE–&gt;TIMED_WAITING</li>
<li>调用LockSupport.unpark(目标线程）或调用了线程的interrupt()，或是等待超时，会让目标线程从TIMED WAITING–&gt;RUNNABLE</li>
</ul>
<p>RUNNABLE&lt;–&gt;BLOCKED</p>
<ul>
<li>t线程用synchronized(obj)获取了对象锁时如果竞争失败，从RUNNABLE –&gt;BLOCKED</li>
<li>持obj锁线程的同步代码块执行完毕，会唤醒该对象上所有BLOCKED的线程重新竞争，如果其中t线程竞争成功，从BLOCKED –&gt;RUNNABLE，其它失败的线程仍然BLOCKED</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h3><p>t1终止t2之前 给t2一个    料理后事的机会</p>
<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.main&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;stop**********&quot;</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(currentThread.isInterrupted())&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//重新设计标记  如果不重新设置标记当抛出异常后会清除打断标记 会使循环继续执行下去</span></span><br><span class="line">                    currentThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201119104501196.png" alt="image-20201119104501196"></p>
<h1 id="并发之共享模型"><a href="#并发之共享模型" class="headerlink" title="并发之共享模型"></a>并发之共享模型</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>临界区：存在对共享资源的多线程读写操作的一段代码</p>
<p>竞态条件：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件</p>
<p>下面这段代码就发生了竞态条件</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201007102759353.png" alt="image-20201007102759353"></p>
<p>synchronized采用互斥的方法 让同一时刻之多有一个线程可以持有对象锁 可以解决上下文切换</p>
<p>java中互斥和同步都可以采用synchronized关键字完成 但是他们有区别</p>
<ul>
<li>互斥时为了防止临界区的竞态条件发生 同一时刻只能有一个线程执行临界区代码</li>
<li>同步是由于线程执行的先后顺序不同 需要一个线程等待其他线程运行到某个点</li>
</ul>
<p>这段代码中synchronized用对象锁保证了临界区内代码的原子性，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008070032289.png" alt="image-20201008070032289"></p>
<p><strong>方法上的synchronized</strong></p>
<p>加在普通方法上相当于锁住了this对象</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008070352538.png" alt="image-20201008070352538"></p>
<p>锁在静态方法上相当锁住这个类对象</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008070429129.png" alt="image-20201008070429129"></p>
<p>这段代码分别锁住了this和类对象 不存在互斥</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008082011946.png" alt="image-20201008082011946"></p>
<h2 id="变量的线程安全分析"><a href="#变量的线程安全分析" class="headerlink" title="变量的线程安全分析"></a>变量的线程安全分析</h2><p><strong>成员变量和静态变量是否线程安全</strong></p>
<ul>
<li>如果它们被共享了，根据它们的状态是否能够改变，分两种情况<ul>
<li>如果只有读操作，则线程安全</li>
<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>
</ul>
</li>
</ul>
<p><strong>局部变量是否线程安全</strong></p>
<ul>
<li>局部变量是线程安全的</li>
<li>但局部变量引用的对象则未必<ul>
<li>如果该对象没有逃离方法的作用访问，它是线程安全的</li>
<li>如果该对象逃离方法的作用范围，需要考虑线程安全</li>
</ul>
</li>
</ul>
<p><strong>局部变量的暴露引用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_NUMBER = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOOP_NUMBER = <span class="number">200</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadSafeSubClass test = <span class="keyword">new</span> ThreadSafeSubClass();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                test.method1(LOOP_NUMBER);</span><br><span class="line">            &#125;, <span class="string">&quot;Thread&quot;</span> + (i+<span class="number">1</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeSubClass</span> <span class="keyword">extends</span> <span class="title">ThreadSafe</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>method1中的list对象逃离了该方法的作用范围 主线程创建了两个新的线程执行method3 他们对list共享从而引发线程安全问题 </li>
<li>最好把method1用final修饰 method2和method3用private修饰，防止子类重写导致不可预知的错误</li>
</ul>
<h2 id="常见线程安全类"><a href="#常见线程安全类" class="headerlink" title="常见线程安全类"></a>常见线程安全类</h2><p>String,Integer,StringBuffer,Random,Vector,Hashtable,java.util.concurrent 包下的类 是线程安全的</p>
<p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable table = <span class="keyword">new</span> Hashtable();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"> table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"> table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<ul>
<li>他们的每个方法是原子的 但是他们多个方法的组合不是原子的</li>
</ul>
<p>不可变类如 integer string内部状态是不可变的 所以他们的方法都是线程安全的</p>
<h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>卖票：count是共享变量要给sell方法加上synchronized</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ExerciseSell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseSell</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟多人买票</span></span><br><span class="line">        TicketWindow window = <span class="keyword">new</span> TicketWindow(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有线程的集合</span></span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 卖出的票数统计</span></span><br><span class="line">        List&lt;Integer&gt; amountList = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 买票</span></span><br><span class="line">                <span class="keyword">int</span> amount = window.sell(random(<span class="number">5</span>));</span><br><span class="line">                <span class="comment">// 统计买票数</span></span><br><span class="line">                amountList.add(amount);</span><br><span class="line">            &#125;);</span><br><span class="line">            threadList.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threadList) &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计卖出的票数和剩余票数</span></span><br><span class="line">        log.debug(<span class="string">&quot;余票：&#123;&#125;&quot;</span>,window.getCount());</span><br><span class="line">        log.debug(<span class="string">&quot;卖出的票数：&#123;&#125;&quot;</span>, amountList.stream().mapToInt(i-&gt; i).sum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Random 为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机 1~5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(amount) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 售票窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketWindow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicketWindow</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取余票数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 售票</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">sell</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count &gt;= amount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.count -= amount;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>买票：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ExerciseTransfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseTransfer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Account a = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">        Account b = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                a.transfer(b, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                b.transfer(a, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        <span class="comment">// 查看转账2000次后的总金额</span></span><br><span class="line">        log.debug(<span class="string">&quot;total:&#123;&#125;&quot;</span>, (a.getMoney() + b.getMoney()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Random 为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机 1~100</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账</span></span><br><span class="line">    <span class="comment">//转账设计两个Account 如果只锁this不能保证target安全 如果同时锁住target和this可能会造成死锁 所以要锁Account.class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account target, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Account.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= amount) &#123;</span><br><span class="line">                <span class="keyword">this</span>.setMoney(<span class="keyword">this</span>.getMoney() - amount);</span><br><span class="line">                target.setMoney(target.getMoney() + amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Synchronized底层原理"><a href="#Synchronized底层原理" class="headerlink" title="Synchronized底层原理"></a>Synchronized底层原理</h2><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a><strong>Monitor</strong></h3><p>普通对象的java对象头</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008092654698.png" alt="image-20201008092654698"></p>
<p>其中Mark Word结构为</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008092720634.png" alt="image-20201008092720634"></p>
<p><strong>工作原理</strong></p>
<p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008092925731.png" alt="image-20201008092925731"></p>
<ul>
<li>刚开始 Monitor 中 Owner 为 null</li>
<li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一 个 Owner</li>
<li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入 EntryList BLOCKED</li>
<li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争是非公平的</li>
<li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲 wait-notify 时会分析</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</li>
<li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li>
</ul>
</blockquote>
<h3 id="Synchronized原理进阶"><a href="#Synchronized原理进阶" class="headerlink" title="Synchronized原理进阶"></a><strong>Synchronized原理进阶</strong></h3><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化。 轻量级锁对使用者是透明的，即语法仍然是 synchronized。</p>
<p>假设有两个方法同步块，利用同一个对象加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 A</span></span><br><span class="line"> method2();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line"> <span class="comment">// 同步块 B</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094008671.png" alt="image-20201008094008671"></p>
</li>
<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094025494.png" alt="image-20201008094025494"></p>
</li>
<li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094041073.png" alt="image-20201008094041073"></p>
</li>
<li><p>如果 cas 失败，有两种情况</p>
<ul>
<li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li>
<li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094107379.png" alt="image-20201008094107379"></p>
</li>
<li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094130830.png" alt="image-20201008094130830"></p>
</li>
<li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象 头</p>
<ul>
<li>成功，则解锁成功</li>
<li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li>
</ul>
</li>
</ul>
<h4 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h4><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有 竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>
<ul>
<li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁    <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094353567.png" alt="image-20201008094353567"></li>
<li>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程<ul>
<li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li>
<li>然后自己进入 Monitor 的 EntryList BLOCKED<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094425806.png" alt="image-20201008094425806"></li>
</ul>
</li>
<li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁 流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li>
</ul>
<h4 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步 块，释放了锁），这时当前线程就可以避免阻塞。</p>
<p>自选成功的情况</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094753865.png" alt="image-20201008094753865"></p>
<p>自旋失败的情况</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008094805115.png" alt="image-20201008094805115"></p>
<ul>
<li>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</li>
<li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会 高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能</li>
<li>Java 7 之后不能控制是否开启自旋功能</li>
</ul>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。 Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现 这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008120751217.png" alt="image-20201008120751217"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008120757859.png" alt="image-20201008120757859"></p>
<ul>
<li><p>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的 thread、epoch、age 都为 0</p>
</li>
<li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 - XX:BiasedLockingStartupDelay=0 来禁用延迟</p>
</li>
<li><p>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、 age 都为 0，第一次用到 hashcode 时才会赋值</p>
</li>
<li><p>但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被 撤销</p>
<ul>
<li>轻量级锁会在锁记录中记录 hashCode</li>
<li>重量级锁会在 Monitor 中记录 hashCode</li>
</ul>
</li>
<li><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p>
</li>
<li><p>只有重量级锁有wait&amp;notify等待机制  如果轻量级锁使用会升级为重量级锁</p>
<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008123003005.png" alt="image-20201008123003005"></li>
</ul>
</li>
</ul>
<h4 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h4><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的Thread ID，当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至 加锁线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">	Vector&lt;Dog&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"> 	Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"> 			Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line"> 			list.add(d);</span><br><span class="line"> 			<span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> 				log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="keyword">true</span>));</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"> 			list.notify();</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> 	t1.start();</span><br><span class="line"></span><br><span class="line"> 	Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"> 		<span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line"> 			<span class="keyword">try</span> &#123;</span><br><span class="line"> 				list.wait();</span><br><span class="line"> 			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> 				e.printStackTrace();</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		log.debug(<span class="string">&quot;===============&gt; &quot;</span>);</span><br><span class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"> 			Dog d = list.get(i);</span><br><span class="line"> 			log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="keyword">true</span>));</span><br><span class="line"> 			<span class="keyword">synchronized</span> (d) &#123;</span><br><span class="line"> 				log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="keyword">true</span>));</span><br><span class="line"> 			&#125;</span><br><span class="line"> 			log.debug(i + <span class="string">&quot;\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class="keyword">true</span>));</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"> 	t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这段代码先让t1把Dog对象添加到list中然后唤醒t2线程，d对象刚开始偏向t1 这时t2线程获取d的锁 重偏向锁被撤销 升级为轻量级锁</p>
<p>t1输出格式为</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008140023468.png" alt="image-20201008140023468"></p>
<p>t2线程前20轮循环输出格式为<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008140629193.png" alt="image-20201008140629193"></p>
<p>20轮之后 批量重定向 全部偏向t2</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008140747166.png" alt="image-20201008140747166"></p>
<h4 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h4><p>当一个偏向锁如果撤销次数到达40的时候就认为这个对象设计的有问题；那么JVM会把这个对象所对应的类所有的对象都撤销偏向锁；并且新实例化的对象也是不可偏向的</p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations=3)</span></span><br><span class="line"><span class="meta">@Measurement(iterations=5)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBenchmark</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"> 	<span class="meta">@Benchmark</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> 		x++;</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="meta">@Benchmark</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> 		Object o = <span class="keyword">new</span> Object();</span><br><span class="line"> 		<span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line"> 			x++;</span><br><span class="line">    	&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>JIT解释编译器会对代码进行优化 发现对象o不是共享对象 从而把synchronized去掉 所以a和b方法效率相同</li>
</ul>
<h2 id="wait-amp-notify原理"><a href="#wait-amp-notify原理" class="headerlink" title="wait&amp;notify原理"></a>wait&amp;notify原理</h2><p><strong>原理</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008143503042.png" alt="image-20201008143503042"></p>
<ul>
<li>Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet 变为 WAITING 状态</li>
<li>BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片</li>
<li>BLOCKED 线程会在 Owner 线程释放锁时唤醒</li>
<li>WAITING 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入 EntryList 重新竞争</li>
</ul>
<p>wait和notify都是线程间进行协作的手段 属于object对象的方法 必须获得此对象的锁 才能调用这些方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>wait和sleep的区别</strong></p>
<ul>
<li>sleep是Thread方法 wait是Object方法</li>
<li>sleep不需要强制和synchronized配合使用</li>
<li>sleep睡眠的时候不会释放锁对象 wait等待的时候会释放锁对象</li>
</ul>
<p><strong>虚假唤醒</strong>：当一个条件满足时，很多线程都被唤醒了，但是只有其中部分是有用的唤醒，其它的唤醒都是无用功 比如说买货，如果商品本来没有货物，突然进了一件商品，这是所有的线程都被唤醒了 但是只能一个人买，所以其他人都是假唤醒，获取不到对象的锁</p>
<h2 id="join原理"><a href="#join原理" class="headerlink" title="join原理"></a>join原理</h2><p><code>t1.join()</code>等价于下面这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (t1) &#123;</span><br><span class="line"> <span class="comment">// 调用者线程进入 t1 的 waitSet 等待, 直到 t1 运行结束</span></span><br><span class="line">	 <span class="keyword">while</span> (t1.isAlive()) &#123;</span><br><span class="line"> 		t1.wait(<span class="number">0</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="同步模式之保护性暂停"><a href="#同步模式之保护性暂停" class="headerlink" title="同步模式之保护性暂停"></a>同步模式之保护性暂停</h2><p> Guarded Suspension，用在一个线程等待另一个线程的执行结果</p>
<ul>
<li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个 GuardedObject</li>
<li>如果有结果不断从一个线程到另一个线程那么可以使用消息队列（见生产者/消费者）</li>
<li>JDK 中，join 的实现、Future 的实现，采用的就是此模式</li>
<li>因为要等待另一方的结果，因此归类到同步模式</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008144639714.png" alt="image-20201008144639714"></p>
<p>测试和实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestGuardedObject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGuardedObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GuardedObject guardedObject = <span class="keyword">new</span> GuardedObject();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; response = download();</span><br><span class="line">                log.debug(<span class="string">&quot;download complete...&quot;</span>);</span><br><span class="line">                guardedObject.complete(response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">        Object response = guardedObject.get();</span><br><span class="line">        log.debug(<span class="string">&quot;get response: [&#123;&#125;] lines&quot;</span>, ((List&lt;String&gt;) response).size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuardedObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 条件不满足则等待</span></span><br><span class="line">            <span class="keyword">while</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(Object response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 条件满足，通知等待线程</span></span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加超时功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestGuardedObjectV2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGuardedObjectV2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GuardedObjectV2 v2 = <span class="keyword">new</span> GuardedObjectV2();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            v2.complete(<span class="keyword">null</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            v2.complete(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Object response = v2.get(<span class="number">2500</span>);</span><br><span class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;get response: [&#123;&#125;] lines&quot;</span>, ((List&lt;String&gt;) response).size());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;can&#x27;t get response&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加超时处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.GuardedObjectV2&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuardedObjectV2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 1) 记录最初时间</span></span><br><span class="line">            <span class="keyword">long</span> last = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 2) 已经经历的时间</span></span><br><span class="line">            <span class="keyword">long</span> timePassed = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 4) 假设 millis 是 1000，结果在 400 时唤醒了，那么还有 600 要等</span></span><br><span class="line">                <span class="keyword">long</span> waitTime = millis - timePassed;</span><br><span class="line">                log.debug(<span class="string">&quot;waitTime: &#123;&#125;&quot;</span>, waitTime);</span><br><span class="line">                <span class="keyword">if</span> (waitTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;break...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(waitTime);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 3) 如果提前被唤醒，这时已经经历的时间假设为 400</span></span><br><span class="line">                timePassed = System.currentTimeMillis() - last;</span><br><span class="line">                log.debug(<span class="string">&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;</span>, timePassed, response == <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(Object response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 条件满足，通知等待线程</span></span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            log.debug(<span class="string">&quot;notify...&quot;</span>);</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008153226394.png" alt="image-20201008153226394"></p>
<h2 id="异步模式之生产者和消费者"><a href="#异步模式之生产者和消费者" class="headerlink" title="异步模式之生产者和消费者"></a>异步模式之生产者和消费者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test21&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test21</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = <span class="keyword">new</span> MessageQueue(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = i;</span><br><span class="line">            <span class="comment">//lambada表达式内部引用的变量必须是final的所以创建一个id赋值i</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                queue.put(<span class="keyword">new</span> Message(id , <span class="string">&quot;值&quot;</span>+id));</span><br><span class="line">            &#125;, <span class="string">&quot;生产者&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                Message message = queue.take();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;消费者&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息队列类 ， java 线程之间通信</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.MessageQueue&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消息的队列集合</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Message&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capcity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageQueue</span><span class="params">(<span class="keyword">int</span> capcity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capcity = capcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查队列是否为空：空的话就wait</span></span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="keyword">while</span>(list.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;队列为空, 消费者线程等待&quot;</span>);</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从队列头部获取消息并返回</span></span><br><span class="line">            Message message = list.removeFirst();</span><br><span class="line">            log.debug(<span class="string">&quot;已消费消息 &#123;&#125;&quot;</span>, message);</span><br><span class="line">            list.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="comment">// 检查对象是否已满</span></span><br><span class="line">            <span class="keyword">while</span>(list.size() == capcity) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;队列已满, 生产者线程等待&quot;</span>);</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将消息加入队列尾部</span></span><br><span class="line">            list.addLast(message);</span><br><span class="line">            log.debug(<span class="string">&quot;已生产消息 &#123;&#125;&quot;</span>, message);</span><br><span class="line">            list.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(<span class="keyword">int</span> id, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="park-amp-unpark"><a href="#park-amp-unpark" class="headerlink" title="park&amp;unpark"></a>park&amp;unpark</h2><p>LockSupport.park：暂停当前线程  LockSupporst.unpark：恢复某个线程的暂停</p>
<p>与Object的wait&amp;notify对比</p>
<ul>
<li>park unpark不用配合Object Monitor使用</li>
<li>以线程为单位唤醒和堵塞线程 notify之能随机唤醒一个线程 notifyAll唤醒所有线程 不精确</li>
<li>park&amp;unpark可以先unpark wait&amp;notify不能先notify</li>
</ul>
<p>原理</p>
<p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex 打个比喻</p>
<ul>
<li>线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷。_counter 就好比背包中 的备用干粮（0 为耗尽，1 为充足）</li>
<li>调用 park 就是要看需不需要停下来歇息<ul>
<li>如果备用干粮耗尽，那么钻进帐篷歇息</li>
<li>如果备用干粮耗尽，那么钻进帐篷歇息</li>
</ul>
</li>
<li>调用 unpark，就好比令干粮充足<ul>
<li>如果这时线程还在帐篷，就唤醒让他继续前进</li>
<li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留继续前进<ul>
<li>因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="活跃性"><a href="#活跃性" class="headerlink" title="活跃性"></a>活跃性</h2><p>死锁解决方法：按顺序为对象加锁</p>
<p>活锁：出现在两个线程互相改变对方的结束条件 最后谁也无法结束 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestLiveLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLiveLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望减到 0 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sleep(<span class="number">0.2</span>);</span><br><span class="line">                count--;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望超过 20 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                sleep(<span class="number">0.2</span>);</span><br><span class="line">                count++;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>活锁解决方法：执行时间交错开 比如把sleep时间设置为随机数</p>
<p>饥饿：一个线程由于优先级过低 始终得不到cpu调度执行 也不能结束 </p>
<p>可以用ReentrantLock解决死锁和饥饿</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a><strong>ReentrantLock</strong></h2><p>相对于 synchronized 它具备如下特点 可中断 可以设置超时时间 可以设置为公平锁 支持多个条件变量</p>
<p> 与 synchronized 一样，都支持可重入</p>
<p>基本语法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 获取锁</span><br><span class="line">reentrantLock.lock();</span><br><span class="line">try &#123;</span><br><span class="line"> 	<span class="regexp">//</span> 临界区</span><br><span class="line">&#125; finally &#123;</span><br><span class="line"> 	<span class="regexp">//</span> 释放锁</span><br><span class="line">	 reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a><strong>可重入</strong></h3><p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁 如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestReentrant&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReentrant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method1&quot;</span>);</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method2&quot;</span>);</span><br><span class="line">            method3();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;execute method3&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="可打断锁"><a href="#可打断锁" class="headerlink" title="可打断锁"></a><strong>可打断锁</strong></h3><p>可以避免死锁</p>
<p>lockInterruptibly() 方法的作用：如果当前线程未被中断则获得锁,如果当前线程被中断则出现异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestInterrupt&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterrupt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动...&quot;</span>);</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            t1.interrupt();</span><br><span class="line">            log.debug(<span class="string">&quot;执行打断&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放了锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.debug(<span class="string">&quot;等锁的过程中被打断&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            t1.interrupt();</span><br><span class="line">            log.debug(<span class="string">&quot;执行打断&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test2方法的t1.interrupt()并没有真正进行打断</p>
<p>test1中在lock.lockInterruptibly()打断了锁</p>
<h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>trylock返回值是bool类型 参数是等待时间 可以不加参数 表示立即尝试获取锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestTimeout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimeout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;获取等待 1s 后失败，返回&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;启动...&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!lock.tryLock()) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获取立刻失败，返回&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>锁超时解决哲学家就餐问题 对比下图中两个类的代码<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201008162100263.png" alt="image-20201008162100263"></p>
<h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>ReentrantLock 默认是不公平的 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; running...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;t&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1s 之后去争抢锁</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; running...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;强行插入&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>强行插入线程总是在t+i线程后输出</p>
<p>公平锁一般没有必要，会降低并发度</p>
<h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待</p>
<p>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p>
<ul>
<li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li>
<li>而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</li>
</ul>
<p>使用要点</p>
<ul>
<li>await 前需要获得锁 。await 执行后，会释放锁，进入 conditionObject 等待</li>
<li>await 的线程被唤醒（或打断、或超时）重新竞争 lock 锁。 竞争 lock 锁成功后，从 await 后继续执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestCondition&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCondition</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition waitCigaretteQueue = lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> Condition waitbreakfastQueue = lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasCigrette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasBreakfast = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> (!hasCigrette) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitCigaretteQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;等到了它的烟&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">while</span> (!hasBreakfast) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitbreakfastQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;等到了它的早餐&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        sendBreakfast();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        sendCigarette();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendCigarette</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送烟来了&quot;</span>);</span><br><span class="line">            hasCigrette = <span class="keyword">true</span>;</span><br><span class="line">            waitCigaretteQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendBreakfast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送早餐来了&quot;</span>);</span><br><span class="line">            hasBreakfast = <span class="keyword">true</span>;</span><br><span class="line">            waitbreakfastQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同步模式之顺序控制"><a href="#同步模式之顺序控制" class="headerlink" title="同步模式之顺序控制"></a>同步模式之顺序控制</h2><h3 id="固定运行顺序"><a href="#固定运行顺序" class="headerlink" title="固定运行顺序"></a>固定运行顺序</h3><p>比如：必须先打印再打印1</p>
<p><strong>wait&amp;notify</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test25&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test25</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">// 表示 t2 是否运行过</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> t2runned = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!t2runned) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                t2runned = <span class="keyword">true</span>;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>park&amp;unpark</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test26&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test26</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交替输出"><a href="#交替输出" class="headerlink" title="交替输出"></a>交替输出</h3><p>线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出 abcabcabcabcabc 怎么实现</p>
<p><strong>wait&amp;notify</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test27&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test27</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WaitNotify wn = <span class="keyword">new</span> WaitNotify(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出内容       等待标记     下一个标记</span></span><br><span class="line"><span class="comment">   a           1             2</span></span><br><span class="line"><span class="comment">   b           2             3</span></span><br><span class="line"><span class="comment">   c           3             1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等待标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag; <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitNotify</span><span class="params">(<span class="keyword">int</span> flag, <span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印               a           1             2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, <span class="keyword">int</span> waitFlag, <span class="keyword">int</span> nextFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(flag != waitFlag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>lock条件变量版</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test30</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AwaitSignal awaitSignal = <span class="keyword">new</span> AwaitSignal(<span class="number">5</span>);</span><br><span class="line">        Condition a = awaitSignal.newCondition();</span><br><span class="line">        Condition b = awaitSignal.newCondition();</span><br><span class="line">        Condition c = awaitSignal.newCondition();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;a&quot;</span>, a, b);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;b&quot;</span>, b, c);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            awaitSignal.print(<span class="string">&quot;c&quot;</span>, c, a);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        awaitSignal.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开始...&quot;</span>);</span><br><span class="line">            a.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            awaitSignal.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwaitSignal</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AwaitSignal</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//            参数1 打印内容， 参数2 进入哪一间休息室, 参数3 下一间休息室</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Condition current, Condition next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//当前线程等待</span></span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>park&amp;unpark</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test31&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test31</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Thread t1;</span><br><span class="line">    <span class="keyword">static</span> Thread t2;</span><br><span class="line">    <span class="keyword">static</span> Thread t3;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParkUnpark pu = <span class="keyword">new</span> ParkUnpark(<span class="number">5</span>);</span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            pu.print(<span class="string">&quot;a&quot;</span>, t2);</span><br><span class="line">        &#125;);</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            pu.print(<span class="string">&quot;b&quot;</span>, t3);</span><br><span class="line">        &#125;);</span><br><span class="line">        t3 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            pu.print(<span class="string">&quot;c&quot;</span>, t1);</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkUnpark</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParkUnpark</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Thread next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            LockSupport.unpark(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="共享模型之内存"><a href="#共享模型之内存" class="headerlink" title="共享模型之内存"></a>共享模型之内存</h1><p>JMM 即 Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。</p>
<p>JMM 体现在以下几个方面</p>
<ul>
<li>原子性 - 保证指令不会受到线程上下文切换的影响</li>
<li>可见性 - 保证指令不会受 cpu 缓存的影响</li>
<li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li>
</ul>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>先来看一个现象，main 线程对 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">	 Thread t = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"> 		<span class="keyword">while</span>(run)&#123;</span><br><span class="line">		 <span class="comment">// ....</span></span><br><span class="line">		 &#125;</span><br><span class="line"> 	&#125;);</span><br><span class="line"> 	t.start();</span><br><span class="line"> 	sleep(<span class="number">1</span>);</span><br><span class="line"> 	run = <span class="keyword">false</span>; <span class="comment">// 线程t不会如预想的停下来</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析一下：</p>
<ol>
<li>初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存。<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009090313012.png" alt="image-20201009090313012"></li>
<li>. 因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中， 减少对主存中 run 的访问，提高效率<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009090328610.png" alt="image-20201009090328610"></li>
<li>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量 的值，结果永远是旧值<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009090345109.png" alt="image-20201009090345109"></li>
</ol>
<p><strong>解决方法</strong></p>
<p>volatile（易变关键字）： 它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取 它的值，线程操作 volatile 变量都是直接操作主存</p>
<p>volatile仅用在一个线程写 多个线程读的情况 不能保证原子性 下面这个例子中volatile只能保证看到最新值 不能解决指令交错（不能保证原子性 ） synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点是synchronized 是属于重量级操作，性能相对更低</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009090702689.png" alt="image-20201009090702689"></p>
<p>如果在前面示例的死循环中加入 System.out.println() 会发现即使不加 volatile 修饰符，线程 t 也能正确看到对 run 变量的修改了，想一想为什么？</p>
<ul>
<li>查看System.out.println()源码 <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009090836508.png" alt="image-20201009090836508"></li>
</ul>
<h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><p>jvm在不影响正确性的前提下 可以调整语句的执行顺序 通过重排序和组合指令的各个阶段可以实现指令级并行</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009093156092.png" alt="image-20201009093156092"></p>
<p>这个例子 ready = true 和 num = 2 可能重排序 结果可能是4 0 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">            r.r1 = num + num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.r1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">        num = <span class="number">2</span>;</span><br><span class="line">        ready = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>改为volatile int num = 0可以禁止指令重排 加上volatile的变量相当于加了一个写屏障 这样num=2之前的语句都有可以禁用重排序</li>
</ul>
<h3 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a><strong>volatile原理</strong></h3><p>volatile 的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p>
<ul>
<li>对 volatile 变量的写指令后会加入写屏障</li>
<li>对 volatile 变量的读指令前会加入读屏障</li>
</ul>
<h4 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a><strong>保证可见性</strong></h4><p>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009093714075.png" alt="image-20201009093714075"></p>
<p>而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009093758082.png" alt="image-20201009093758082"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009094010904.png" alt="image-20201009094010904"></p>
<h4 id="保证有序性"><a href="#保证有序性" class="headerlink" title="保证有序性"></a>保证有序性</h4><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p>
<p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p>
<p> 但是不能解决指令交错</p>
<ul>
<li>写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证读跑到它前面去</li>
<li>读跑到它前面去 而有序性的保证也只是保证了本线程内相关代码不被重排序</li>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009094107401.png" alt="image-20201009094107401"></li>
</ul>
<h4 id="double-checked-locking-问题"><a href="#double-checked-locking-问题" class="headerlink" title="double-checked locking 问题"></a>double-checked locking 问题</h4><p><strong>单例模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"> 	 <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">	 <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"> 	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// t2</span></span><br><span class="line"> 			<span class="comment">// 首次访问会同步，而之后的使用没有 synchronized</span></span><br><span class="line">    	    <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line"> 				<span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// t1</span></span><br><span class="line"> 					INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"> 				&#125;</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="keyword">return</span> INSTANCE;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上的实现特点是：</p>
<ul>
<li>懒惰实例化</li>
<li>首次使用 getInstance() 才使用 synchronized 加锁，后续使用时无需加锁</li>
<li>有隐含的，但很关键的一点：第一个 if 使用了 INSTANCE 变量，是在同步块之外</li>
</ul>
<p>但在多线程环境下，上面的代码是有问题的，getInstance 方法对应的字节码为：</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009101445428.png" alt="image-20201009101445428"></p>
<p>其中</p>
<ul>
<li>17 表示创建对象，将对象引用入栈 // new Singleton</li>
<li>20 表示复制一份对象引用 // 引用地址</li>
<li>21 表示利用一个对象引用，调用构造方法</li>
<li>24 表示利用一个对象引用，赋值给 static INSTANCE</li>
</ul>
<p>也许 jvm 会优化为：先执行 24，再执行 21。如果两个线程 t1，t2 按如下时间序列执行：</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009101654313.png" alt="image-20201009101654313"></p>
<p>关键在于 0: getstatic 这行代码在 monitor 控制之外，它就像之前举例中不守规则的人，可以越过 monitor 读取 INSTANCE 变量的值</p>
<p>这时 t1 还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么 t2 拿到的是将是一个未初 始化完毕的单例</p>
<p>对 INSTANCE 使用 volatile 修饰即可，可以禁用指令重排，但要注意在 JDK 5 以上的版本的 volatile 才会真正有效</p>
<p>只有变量完全交给synchronized管理 才能保证变量的有序性 可见性 原子性 改例中INSTANCE也出现在了synchronized的外面 所以不能保证有序性</p>
<p><strong>解决</strong></p>
<p><code>private static volatile Singleton INSTANCE = null;</code></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009101943969.png" alt="image-20201009101943969"></p>
<p><strong>happens-before 规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结，抛</strong></p>
<p><strong>开以下 happens-before 规则，JMM 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</strong></p>
<ul>
<li>线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量的读可见<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102406598.png" alt="image-20201009102406598"></li>
</ul>
</li>
<li>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102435344.png" alt="image-20201009102435344"></li>
</ul>
</li>
<li>线程 start 前对变量的写，对该线程开始后对该变量的读可见<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102448814.png" alt="image-20201009102448814"></li>
</ul>
</li>
<li>线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其它线程调用 t1.isAlive() 或 t1.join()等待 它结束）<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102703740.png" alt="image-20201009102703740"></li>
</ul>
</li>
<li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过 t2.interrupted 或 t2.isInterrupted）<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102719322.png" alt="image-20201009102719322"></li>
</ul>
</li>
<li>对变量默认值（0，false，null）的写，对其它线程对该变量的读可见</li>
<li>具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z ，配合 volatile 的防指令重排，有下面的例子<ul>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102741448.png" alt="image-20201009102741448"></li>
</ul>
</li>
</ul>
<h2 id="线程安全单例习题"><a href="#线程安全单例习题" class="headerlink" title="线程安全单例习题"></a>线程安全单例习题</h2><ol>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102952571.png" alt="image-20201009102952571"></li>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102955672.png" alt="image-20201009102955672"></li>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009102958030.png" alt="image-20201009102958030">没有线程安全问题 synchronized把Singleton锁住了 缺点是锁粒度太大</li>
</ol>
<h2 id="设计模式-1"><a href="#设计模式-1" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="两阶段终止模式Volatile"><a href="#两阶段终止模式Volatile" class="headerlink" title="两阶段终止模式Volatile"></a>两阶段终止模式Volatile</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestTwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTwoPhaseTermination</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TPTVolatile t = <span class="keyword">new</span> TPTVolatile();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">        t.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TPTVolatile&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TPTVolatile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread current = Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span>(stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;将结果保存&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;监控线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>stop设置为真时 可能需要等Thread.sleep睡醒之后才能进行下一轮判断 使用interrupt进行打断 立即唤醒线程 如果不加interrupt会等待小于1s再料理后事</li>
</ul>
<h3 id="Balking"><a href="#Balking" class="headerlink" title="Balking"></a>Balking</h3><p>Balking （犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做 了，直接结束返回</p>
<p>比如：一个程序中只需要一个监控线程 如果创建监控线程时 发现已经有了就不用创建 直接返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination tpt = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        tpt.start();</span><br><span class="line">        tpt.start();</span><br><span class="line">        tpt.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Thread.sleep(3500);</span></span><br><span class="line"><span class="comment">        log.debug(&quot;停止监控&quot;);</span></span><br><span class="line"><span class="comment">        tpt.stop();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitorThread;</span><br><span class="line">    <span class="comment">// 停止标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 判断是否执行过 start 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> starting = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (starting) &#123; <span class="comment">// false</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            starting = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        monitorThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread current = Thread.currentThread();</span><br><span class="line">                <span class="comment">// 是否被打断</span></span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">        monitorThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对比一下保护性暂停模式：保护性暂停模式用在一个线程等待另一个线程的执行结果，当条件不满足时线程等待。</p>
</li>
<li><p>这里starting不能使用volatile 因为其不能保证原子性： 一个线程调用start之后 变量starting修改之前 还会有多个线程调用start且starting状态仍然为false从而创建多个监控线程</p>
</li>
</ul>
<h1 id="共享模型之无锁"><a href="#共享模型之无锁" class="headerlink" title="共享模型之无锁"></a>共享模型之无锁</h1><h2 id="CAS与volatie"><a href="#CAS与volatie" class="headerlink" title="CAS与volatie"></a>CAS与volatie</h2><h3 id="保护共享资源"><a href="#保护共享资源" class="headerlink" title="保护共享资源"></a><strong>保护共享资源</strong></h3><p>加锁实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountUnsafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountUnsafe</span><span class="params">(Integer balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无锁实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountCas</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountCas</span><span class="params">(<span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicInteger(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*while(true) &#123;</span></span><br><span class="line"><span class="comment">            // 获取余额的最新值</span></span><br><span class="line"><span class="comment">            int prev = balance.get();</span></span><br><span class="line"><span class="comment">            // 要修改的余额</span></span><br><span class="line"><span class="comment">            int next = prev - amount;</span></span><br><span class="line"><span class="comment">            // 真正修改 compareAndSet参数是修改前和修改后的值 如果修改成功返回true</span></span><br><span class="line"><span class="comment">            if(balance.compareAndSet(prev, next)) &#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        balance.getAndAdd(-<span class="number">1</span> * amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>AtomicInteger中方法compareAndSwap就是CAS 他是原子操作</p>
<p>实现</p>
<p>​    <img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009103823828.png" alt="image-20201009103823828"></p>
<pre><code>当前值与prev相同则修改为next 否则进入下一轮循环</code></pre>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009103958360.png" alt="image-20201009103958360"></p>
<blockquote>
<p>注意：</p>
<ul>
<li>其实 CAS 的底层是 lock cmpxchg 指令（X86 架构），在单核 CPU 和多核 CPU 下都能够保证【比较-交 换】的原子性。</li>
<li>在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕，再 开启总线。这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性，是原子 的。</li>
</ul>
</blockquote>
<h3 id="与volatile的关系"><a href="#与volatile的关系" class="headerlink" title="与volatile的关系"></a>与volatile的关系</h3><p>CAS 必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果</p>
<p>AtomicInteger源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效率分析"><a href="#效率分析" class="headerlink" title="效率分析"></a>效率分析</h3><p>为什么无锁效率高</p>
<ul>
<li>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时 候，发生上下文切换，进入阻塞。打个比喻</li>
<li>线程就好像高速跑道上的赛车，高速运行时，速度超快，一旦发生上下文切换，就好比赛车要减速、熄火， 等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大</li>
<li>但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，CPU 在这里就好比高速跑道，没有额外的跑 道，线程想高速运行也无从谈起，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还 是会导致上下文切换。</li>
</ul>
<h3 id="CAS特点"><a href="#CAS特点" class="headerlink" title="CAS特点"></a>CAS特点</h3><p>结合 CAS 和 volatile 可以实现无锁并发，适用于线程数少、多核 CPU 的场景下。</p>
<ul>
<li>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再 重试呗。</li>
<li>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想 改，我改完了解开锁，你们才有机会。</li>
<li>CAS 体现的是无锁并发、无阻塞并发，请仔细体会这两句话的意思<ul>
<li>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一</li>
<li>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li>
</ul>
</li>
</ul>
<h2 id="原子整数"><a href="#原子整数" class="headerlink" title="原子整数"></a>原子整数</h2><p>J.U.C并发包提供了 </p>
<ul>
<li>AtomicBoolean</li>
<li>AtomicInteger</li>
<li>AtomicLong</li>
</ul>
<p>updateAndGet方法：接收一个lambada作为参数（为了操作更灵活 可以进行各种计算）  更新当前值并返回 </p>
<p><code> i,updateAndGet(value -&gt; value * 10)</code></p>
<p>原理</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009105759472.png" alt="image-20201009105759472"></p>
<p>其他方法查看源码</p>
<h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h2><p>J.U.C并发包提供了:AtomicReference,AtomicMarkabkeReference,AtomicStampedReference</p>
<h3 id="Atomic-Reference"><a href="#Atomic-Reference" class="headerlink" title="Atomic Reference"></a>Atomic Reference</h3><p>使用和AtomicInteger差不多 适用于对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecimalAccountCas</span> <span class="keyword">implements</span> <span class="title">DecimalAccount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;BigDecimal&gt; balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecimalAccountCas</span><span class="params">(BigDecimal balance)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.balance = balance;</span></span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicReference&lt;&gt;(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(BigDecimal amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            BigDecimal prev = balance.get();</span><br><span class="line">            BigDecimal next = prev.subtract(amount);</span><br><span class="line">            <span class="keyword">if</span> (balance.compareAndSet(prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ABA问题</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009110359944.png" alt="image-20201009110359944"></p>
<p>主线程仅能判断出共享变量的值与最初值 A 是否相同，不能感知到这种从 A 改为 B 又 改回 A 的情况，如果主线程 希望：</p>
<p>​    只要有其它线程【动过了】共享变量，那么自己的 cas 就算失败，这时，仅比较值是不够的，需要再加一个版本号</p>
<h3 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a><strong>AtomicStampedReference</strong></h3><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009110459308.png" alt="image-20201009110459308"></p>
<p>AtomicStampedReference 可以给原子引用加上版本号，追踪原子引用整个的变化过程，如： A -&gt; B -&gt; A -&gt; C ，通过AtomicStampedReference，我们可以知道，引用变量中途被更改了几次。</p>
<p>但是有时候，并不关心引用变量更改了几次，只是单纯的关心是否更改过，所以就有了 AtomicMarkableReference</p>
<h3 id="AtomicMarkableReference"><a href="#AtomicMarkableReference" class="headerlink" title="AtomicMarkableReference"></a>AtomicMarkableReference</h3><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009110541875.png" alt="image-20201009110541875"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test38&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test38</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        GarbageBag bag = <span class="keyword">new</span> GarbageBag(<span class="string">&quot;装满了垃圾&quot;</span>);</span><br><span class="line">        <span class="comment">// 参数2 mark 可以看作一个标记，表示垃圾袋满了</span></span><br><span class="line">        AtomicMarkableReference&lt;GarbageBag&gt; ref = <span class="keyword">new</span> AtomicMarkableReference&lt;&gt;(bag, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        GarbageBag prev = ref.getReference();</span><br><span class="line">        log.debug(prev.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">            bag.setDesc(<span class="string">&quot;空垃圾袋&quot;</span>);</span><br><span class="line">            ref.compareAndSet(bag, bag, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            log.debug(bag.toString());</span><br><span class="line">        &#125;,<span class="string">&quot;保洁阿姨&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;想换一只新垃圾袋？&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> success = ref.compareAndSet(prev, <span class="keyword">new</span> GarbageBag(<span class="string">&quot;空垃圾袋&quot;</span>), <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;换了么？&quot;</span> + success);</span><br><span class="line">        log.debug(ref.getReference().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GarbageBag</span> </span>&#123;</span><br><span class="line">    String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GarbageBag</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">&quot; &quot;</span> + desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字段更新器"><a href="#字段更新器" class="headerlink" title="字段更新器"></a>字段更新器</h2><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009111719552.png" alt="image-20201009111719552"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Test40&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test40</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        AtomicReferenceFieldUpdater updater =</span><br><span class="line">                AtomicReferenceFieldUpdater.newUpdater(Student.class, String.class, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(updater.compareAndSet(stu, <span class="keyword">null</span>, <span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="原子累加器"><a href="#原子累加器" class="headerlink" title="原子累加器"></a>原子累加器</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test41</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(</span><br><span class="line">                    () -&gt; <span class="keyword">new</span> AtomicLong(<span class="number">0</span>),</span><br><span class="line">                    (adder) -&gt; adder.getAndIncrement()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(</span><br><span class="line">                    () -&gt; <span class="keyword">new</span> LongAdder(),</span><br><span class="line">                    adder -&gt; adder.increment()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    () -&gt; 结果    提供累加器对象</span></span><br><span class="line"><span class="comment">    (参数) -&gt;     执行累加操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Supplier&lt;T&gt; adderSupplier, Consumer&lt;T&gt; action)</span> </span>&#123;</span><br><span class="line">        T adder = adderSupplier.get();</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 4 个线程，每人累加 50 万</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            ts.add(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">500000</span>; j++) &#123;</span><br><span class="line">                    action.accept(adder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        ts.forEach(t -&gt; t.start());</span><br><span class="line">        ts.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(adder + <span class="string">&quot; cost:&quot;</span> + (end - start) / <span class="number">1000_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原子累加器相比普通的累加器会有性能提升：性能提升的原因很简单，就是在有竞争时，设置多个累加单元，Therad-0 累加 Cell[0]，而 Thread-1 累加 Cell[1]… 最后将结果汇总。这样它们在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性能。</p>
<h3 id="LongAdder原理"><a href="#LongAdder原理" class="headerlink" title="LongAdder原理"></a>LongAdder原理</h3><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009113023807.png" alt="image-20201009113023807"></p>
<p>无所实现为什么会有cellsBusy表示加锁</p>
<p>cellsBusy类似与cas锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cas锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockCas</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 0 没加锁</span></span><br><span class="line">    <span class="comment">// 1 加锁</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger state = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.compareAndSet(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;unlock...&quot;</span>);</span><br><span class="line">        state.set(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockCas lock = <span class="keyword">new</span> LockCas();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin...&quot;</span>);</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock...&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin...&quot;</span>);</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防止缓存行伪共享</span></span><br><span class="line"><span class="meta">@sun</span>.misc.Contended</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line"> 	Cell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">// 最重要的方法, 用来 cas 方式进行累加, prev 表示旧值, next 表示新值</span></span><br><span class="line">	 <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cas</span><span class="params">(<span class="keyword">long</span> prev, <span class="keyword">long</span> next)</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, prev, next);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="comment">// 省略不重要代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为 CPU 与 内存的速度差异很大，需要靠预读数据至缓存来提升效率。 而缓存以缓存行为单位，每个缓存行对应着一块内存，一般是 64 byte（8 个 long） 缓存的加入会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中 CPU 要保证数据的一致性，如果某个 CPU 核心更改了数据，其它 CPU 核心对应的整个缓存行必须失效。</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009131448068.png" alt="image-20201009131448068"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009131457185.png" alt="image-20201009131457185"></p>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>参考博客:<a href="https://blog.csdn.net/qpzkobe/article/details/82317640">https://blog.csdn.net/qpzkobe/article/details/82317640</a></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009135821600.png" alt="image-20201009135821600"></p>
<p><strong>add</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009140043473.png" alt="image-20201009140043473"></p>
<p><strong>longAccumulate</strong></p>
<p>cells不存在</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009141240221.png" alt="image-20201009141240221"></p>
<p>cell不存在</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009142309642.png" alt="image-20201009142309642"></p>
<p>每个线程刚进入 longAccumulate 时，会尝试对应一个 cell 对象（找到一个坑位）</p>
<p>cell存在</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009142407423.png" alt="image-20201009142407423"></p>
<p>获取最终结果通过sum方法</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201009144223193.png" alt="image-20201009144223193"></p>
<h2 id="unsafe方法"><a href="#unsafe方法" class="headerlink" title="unsafe方法"></a>unsafe方法</h2><p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeAccessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cas相关方法<strong>：线程安全的修改对象的属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUnsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取unsafe</span></span><br><span class="line">        Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 1. 获取域的偏移地址</span></span><br><span class="line">        <span class="keyword">long</span> idOffset = unsafe.objectFieldOffset(Teacher.class.getDeclaredField(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="keyword">long</span> nameOffset = unsafe.objectFieldOffset(Teacher.class.getDeclaredField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        <span class="comment">// 2. 执行 cas 操作</span></span><br><span class="line">        unsafe.compareAndSwapInt(t, idOffset, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        unsafe.compareAndSwapObject(t, nameOffset, <span class="keyword">null</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 验证</span></span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模拟实现AtomicInteger</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test42</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account.demo(<span class="keyword">new</span> MyAtomicInteger(<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAtomicInteger</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNSAFE = UnsafeAccessor.getUnsafe();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = UNSAFE.objectFieldOffset(MyAtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> prev = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">int</span> next = prev - amount;</span><br><span class="line">            <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAtomicInteger</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        decrement(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="共享模型之不可变"><a href="#共享模型之不可变" class="headerlink" title="共享模型之不可变"></a>共享模型之不可变</h1><h2 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h2><p><strong>不可变类的使用</strong></p>
<p>下面的代码在运行时，由于 SimpleDateFormat 不是线程安全的 有很大几率出现 java.lang.NumberFormatException 或者出现不正确的日期解析结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sdf) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, sdf.parse(<span class="string">&quot;1951-04-21&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;&#123;&#125;&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一个对象在不能够修改其内部状态（属性），那么它就是线程安全的，因为不存在并发修改啊！这样的对象在 Java 中有很多，例如在 Java 8 后，提供了一个新的日期格式化类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter stf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        TemporalAccessor parse = stf.parse(<span class="string">&quot;1951-04-21&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, parse);</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性用 final 修饰保证了该属性是只读的，不能修改</li>
<li>类用 final 修饰保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性</li>
</ul>
<p><strong>不可变对象的设计：保护性拷贝</strong></p>
<p>使用字符串时，也有一些跟修改相关的方法，比如 substring 等，那么下面就看一看这些方法是 如何实现的，就以 substring 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		 <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">int</span> subLen = value.length - beginIndex;</span><br><span class="line"> 	<span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line"> 		<span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="keyword">this</span> : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其内部是调用 String 的构造方法创建了一个新字符串，再进入这个构造看看，是否对 final char[] value 做出 了修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line"> 		<span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"> 		<span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line"> 			<span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line"> 			<span class="keyword">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line"> 			<span class="keyword">return</span>;</span><br><span class="line"> 		&#125;</span><br><span class="line">	 &#125;</span><br><span class="line"> 	<span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">		 <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果发现也没有，构造新字符串对象时，会生成新的 char[] value，对内容进行复制 。这种通过创建副本对象来避 免共享的手段称之为<strong>保护性拷贝</strong></p>
<h2 id="设计模式之享元模式"><a href="#设计模式之享元模式" class="headerlink" title="设计模式之享元模式"></a>设计模式之享元模式</h2><p>不可变类使用保护性拷贝虽然实现了线程安全但是对象创建过于频繁 一般不可变对象都关联一个享元模式</p>
<h3 id="体现"><a href="#体现" class="headerlink" title="体现"></a><strong>体现</strong></h3><p>在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 valueOf 方法，例如 Long 的 valueOf 会缓存 -128~127 之间的 Long 对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对 象：</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201011110138604.png" alt="image-20201011110138604"></p>
<p>包装类 String BigDecimal BigInteger也体现了享元模式</p>
<p>为什么在之前的例子中BigDecimal要用AtimocInteger保护起来？</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">private AtomicReference&lt;BigDecimal&gt; balance<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>因为 BigDecimal单个方法是原子的但是方法的组合不是原子的 不能保证线程安全</p>
<h3 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h3><p><strong>分析</strong></p>
<p>例如：一个线上商城应用，QPS 达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。 这时 预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约 了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压垮数据库。</p>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pool pool = <span class="keyword">new</span> Pool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                Connection conn = pool.borrow();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                pool.free(conn);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Pool&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 连接池大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> poolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 连接对象数组</span></span><br><span class="line">    <span class="keyword">private</span> Connection[] connections;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 连接状态数组 0 表示空闲， 1 表示繁忙</span></span><br><span class="line">    <span class="comment">//这里不能使用普通数组 因为它不是线程安全的</span></span><br><span class="line">    <span class="keyword">private</span> AtomicIntegerArray states;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 构造方法初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pool</span><span class="params">(<span class="keyword">int</span> poolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.poolSize = poolSize;</span><br><span class="line">        <span class="keyword">this</span>.connections = <span class="keyword">new</span> Connection[poolSize];</span><br><span class="line">        <span class="keyword">this</span>.states = <span class="keyword">new</span> AtomicIntegerArray(<span class="keyword">new</span> <span class="keyword">int</span>[poolSize]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            connections[i] = <span class="keyword">new</span> MockConnection(<span class="string">&quot;连接&quot;</span> + (i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 借连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">borrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">                <span class="comment">// 获取空闲连接</span></span><br><span class="line">                <span class="keyword">if</span>(states.get(i) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (states.compareAndSet(i, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;borrow &#123;&#125;&quot;</span>, connections[i]);</span><br><span class="line">                        <span class="keyword">return</span> connections[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没有空闲连接，当前线程进入等待</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 归还连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (connections[i] == conn) &#123;</span><br><span class="line">                <span class="comment">//线程使用者归还连接不会发生线程竞争</span></span><br><span class="line">                states.set(i, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;free &#123;&#125;&quot;</span>, conn);</span><br><span class="line">                    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MockConnection</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MockConnection&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fianl原理"><a href="#fianl原理" class="headerlink" title="fianl原理"></a>fianl原理</h2><p><strong>设置final的原理</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201011115151905.png" alt="image-20201011115151905"></p>
<p><strong>获取final的原理</strong></p>
<p>被final修饰的变量在栈内存中 如果其他类要使用final变量 直接复制一份 没被final修饰的变量需要通过字节码指令getStatic获取 </p>
<p>数字比较小的变量在栈内存中 超过短整形的最大值在常量池中 如果不加final修饰就在堆中 读取效率较低</p>
<h1 id="共享模型之工具"><a href="#共享模型之工具" class="headerlink" title="共享模型之工具"></a>共享模型之工具</h1><h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201012134450306.png" alt="image-20201012134450306"></p>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestPool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(<span class="number">1</span>,</span><br><span class="line">                <span class="number">1000</span>, TimeUnit.MILLISECONDS, <span class="number">1</span>, (queue, task)-&gt;&#123;</span><br><span class="line">            <span class="comment">// 1. 死等</span></span><br><span class="line"><span class="comment">//            queue.put(task);</span></span><br><span class="line">            <span class="comment">// 2) 带超时等待</span></span><br><span class="line"><span class="comment">//            queue.offer(task, 1500, TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="comment">// 3) 让调用者放弃任务执行：队列满了没有做任何操作</span></span><br><span class="line"><span class="comment">//            log.debug(&quot;放弃&#123;&#125;&quot;, task);</span></span><br><span class="line">            <span class="comment">// 4) 让调用者抛出异常 抛出异常的线程之后的线程都不会被执行</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;任务执行失败 &quot; + task);</span></span><br><span class="line">            <span class="comment">// 5) 让调用者自己执行任务</span></span><br><span class="line">            task.run();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, j);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 拒绝策略</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RejectPolicy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reject</span><span class="params">(BlockingQueue&lt;T&gt; queue, T task)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程集合</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> coreSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取任务时的超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeUnit timeUnit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当任务数没有超过 coreSize 时，直接交给 worker 对象执行</span></span><br><span class="line">        <span class="comment">// 如果任务数超过 coreSize 时，加入任务队列暂存</span></span><br><span class="line">        <span class="keyword">synchronized</span> (workers) &#123;</span><br><span class="line">            <span class="keyword">if</span>(workers.size() &lt; coreSize) &#123;</span><br><span class="line">                Worker worker = <span class="keyword">new</span> Worker(task);</span><br><span class="line">                log.debug(<span class="string">&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;</span>, worker, task);</span><br><span class="line">                workers.add(worker);</span><br><span class="line">                worker.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                taskQueue.put(task);</span></span><br><span class="line">                <span class="comment">// 1) 死等</span></span><br><span class="line">                <span class="comment">// 2) 带超时等待</span></span><br><span class="line">                <span class="comment">// 3) 让调用者放弃任务执行</span></span><br><span class="line">                <span class="comment">// 4) 让调用者抛出异常</span></span><br><span class="line">                <span class="comment">// 5) 让调用者自己执行任务</span></span><br><span class="line">                <span class="comment">//有以上多种情况 决策权交给线程使用者 而不是写死在线程池的代码中 把具体操作抽象成一个接口</span></span><br><span class="line">                taskQueue.tryPut(rejectPolicy, task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">(<span class="keyword">int</span> coreSize, <span class="keyword">long</span> timeout, TimeUnit timeUnit, <span class="keyword">int</span> queueCapcity, RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coreSize = coreSize;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">        <span class="keyword">this</span>.timeUnit = timeUnit;</span><br><span class="line">        <span class="keyword">this</span>.taskQueue = <span class="keyword">new</span> BlockingQueue&lt;&gt;(queueCapcity);</span><br><span class="line">        <span class="keyword">this</span>.rejectPolicy = rejectPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Runnable task;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            <span class="comment">// 1) 当 task 不为空，执行任务</span></span><br><span class="line">            <span class="comment">// 2) 当 task 执行完毕，再接着从任务队列获取任务并执行</span></span><br><span class="line"><span class="comment">//            while(task != null || (task = taskQueue.take()) != null) &#123;</span></span><br><span class="line">            <span class="keyword">while</span>(task != <span class="keyword">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;正在执行...&#123;&#125;&quot;</span>, task);</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (workers) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;worker 被移除&#123;&#125;&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">                workers.remove(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.BlockingQueue&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 任务队列</span></span><br><span class="line">    <span class="keyword">private</span> Deque&lt;T&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 锁：防止对任务的争抢</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 生产者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition fullWaitSet = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 消费者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition emptyWaitSet = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capcity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueue</span><span class="params">(<span class="keyword">int</span> capcity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capcity = capcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升级版的take：带超时阻塞获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将 timeout 统一转换为 纳秒</span></span><br><span class="line">            <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 返回值是剩余时间</span></span><br><span class="line">                    <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//等待时间-已经经过的时间 返回结果是剩余时间</span></span><br><span class="line">                    nanos = emptyWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emptyWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T task)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capcity) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class="line">                    fullWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 升级版的put：带超时时间阻塞添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T task, <span class="keyword">long</span> timeout, TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> nanos = timeUnit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capcity) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class="line">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.size();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">tryPut</span><span class="params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断队列是否满</span></span><br><span class="line">            <span class="keyword">if</span>(queue.size() == capcity) &#123;</span><br><span class="line">                rejectPolicy.reject(<span class="keyword">this</span>, task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 有空闲</span></span><br><span class="line">                log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">                queue.addLast(task);</span><br><span class="line">                emptyWaitSet.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BlockQueue中四个方法 其中两个是另两个方法的升级 加入了超时功能 第五个方法是为了提高程序的灵活性 传入了自定义的接口RejectPolicy</p>
<p>ThreadPool中的execute会调用worker中的start方法 从而执行线程的run方法 </p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201013132726928.png" alt="image-20201013132726928"></p>
<h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201013132841414.png" alt="image-20201013132841414"></p>
<p>这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作 进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c 为旧值， ctlOf 返回结果为新值</span></span><br><span class="line">ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))));</span><br><span class="line"><span class="comment">// rs 为高 3 位代表线程池状态， wc 为低 29 位代表线程个数，ctl 是合并它们</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201013172228794.png" alt="image-20201013172228794"></p>
<p>工作方式</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201013172338562.png" alt="image-20201013172338562"></p>
<ul>
<li>线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。</li>
<li>当线程数达到 corePoolSize 并没有线程空闲，这时再加入任务，新加的任务会被加入workQueue 队列排 队，直到有空闲的线程。</li>
<li>如果队列选择了有界队列，那么任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线 程来救急</li>
<li>如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。拒绝策略 jdk 提供了 4 种实现，其它 著名框架也提供了实现<ul>
<li>AbortPolicy 让调用者抛出 RejectedExecutionException 异常，这是默认策略</li>
<li>CallerRunsPolicy 让调用者运行任务</li>
<li>DiscardPolicy 放弃本次任务</li>
<li>DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之</li>
<li>Dubbo 的实现，在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方 便定位问题</li>
<li>Netty 的实现，是创建一个新线程来执行任务</li>
<li>ActiveMQ 的实现，带超时等待（60s）尝试放入队列，类似我们之前自定义的拒绝策略</li>
<li>PinPoint 的实现，它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略</li>
<li><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201013175333736.png" alt="image-20201013175333736"></li>
</ul>
</li>
<li>当高峰过去后，超过corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由 keepAliveTime 和 unit 来控制</li>
</ul>
<p>根据这个构造方法，JDK Executors 类中提供了众多工厂方法来创建各种用途的线程池</p>
<h3 id="创建线程池的工厂方法"><a href="#创建线程池的工厂方法" class="headerlink" title="创建线程池的工厂方法"></a>创建线程池的工厂方法</h3><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p>适用于任务量已知，相对耗时的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line"> 								  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line"> 								  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间</li>
<li>阻塞队列是无界的，可以放任意数量的任务</li>
</ul>
<p>可以传入一个工厂方法 自定义线程名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger t = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r,<span class="string">&quot;mypool&quot;</span>+t.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line"> 								   <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line"> 								   <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点:整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线 程。 适合任务数比较密集，但每个任务执行时间较短的情况</p>
<ul>
<li>核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，意味着<ul>
<li>全部都是救急线程（60s 后可以回收）</li>
<li>救急线程可以无限创建</li>
</ul>
</li>
<li>队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的（一手交钱、一手交 货）</li>
</ul>
<h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程 也不会被释放。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line"> 		(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line"> 								<span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">								<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>区别：</p>
<ul>
<li><p>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一个线程，保证池的正常工作</p>
</li>
<li><p>Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改</p>
<ul>
<li>FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因 此不能调用 ThreadPoolExecutor 中特有的方法</li>
</ul>
</li>
<li><p>Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改</p>
<ul>
<li>对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改</li>
</ul>
</li>
</ul>
<h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><p>Future是一个接口，他提供给了我们方法来检测当前的任务是否已经结束，还可以等待任务结束并且拿到一个结果，通过调用Future的get（）方法可以当任务结束后返回一个结果值，如果工作没有结束，则会阻塞当前线程，直到任务执行完毕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行任务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line"><span class="comment">// 提交任务 task，用返回值 Future 获得任务执行结果 Collable与Runnable的区别是有返回值</span></span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line"> 		<span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，带超时时间</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line"> 								<span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line"> 		<span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"><span class="comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params"> 				<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function"> 		<span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br></pre></td></tr></table></figure>

<p>创建只有一个线程的线程池调用下面的提交方法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ExecutorService<span class="built_in"> pool </span>= Executors.newFixedThreadPool(1);</span><br></pre></td></tr></table></figure>

<p>submit</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(ExecutorService pool)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    Future&lt;String&gt; future = pool.submit(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, future.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>invokeAll</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ExecutorService pool)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    List&lt;Future&lt;String&gt;&gt; futures = pool.invokeAll(Arrays.asList(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    futures.forEach( f -&gt;  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, f.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>invokeAny</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ExecutorService pool)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    String result = pool.invokeAny(Arrays.asList(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin 1&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;end 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin 2&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;end 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;begin 3&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;end 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ));</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><p>shutdown：线程池状态变为 SHUTDOWN - </p>
<ul>
<li><p>不会接收新任务 - 但已提交任务会执行完 - </p>
</li>
<li><p>阻塞队列中的线程也能执行完成</p>
</li>
<li><p>此方法不会阻塞调用线程的执行 执行shutdown后不会堵塞主线程的其他代码</p>
</li>
</ul>
<p>shutdownNow：线程池状态变为 STOP - 不会接收新任务 - 会将队列中的任务返回 - 并用 interrupt 的方式中断正在执行的任务</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201014154942351.png" alt="image-20201014154942351"></p>
<h3 id="任务调度线程池"><a href="#任务调度线程池" class="headerlink" title="任务调度线程池"></a>任务调度线程池</h3><p><strong>Timer的缺点</strong></p>
<p>在『任务调度线程池』功能加入之前，可以使用 java.util.Timer 来实现定时功能，Timer 的优点在于简单易用，但 由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个 任务的延迟或异常都将会影响到之后的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">    TimerTask task1 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task 1&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//如果任务一出现了异常 任务二得不到执行</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    TimerTask task2 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">    <span class="comment">//使用 timer 添加两个任务，希望它们都在 1s 后执行</span></span><br><span class="line">    <span class="comment">//但由于 timer 内只有一个线程来顺序执行队列中的任务，因此『任务1』的延时，影响了『任务2』的执行</span></span><br><span class="line">    timer.schedule(task1, <span class="number">1000</span>);</span><br><span class="line">    timer.schedule(task2, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ScheduledExecutorService改写</strong></p>
<p>延迟执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建的是固定大小的线程池 参数是核心数</span></span><br><span class="line">ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ScheduledExecutorService pool)</span> </span>&#123;</span><br><span class="line">    pool.schedule(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    pool.schedule(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;task2&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一个参数是任务对象 第二个参数是延迟执行的时间 第三个参数是时间单位</p>
</li>
<li><p>第一个任务出现异常不会影响第二个线程的执行</p>
<p>定时执行：确保任务之间的执行不会重叠</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">    <span class="comment">//以固定速率执行任务 第二个参数是初始延迟时间 第三个参数是间隔时间</span></span><br><span class="line">    pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">        <span class="comment">//如果任务本身的执行时间&gt;间隔时间 则需要等待任务执行结束 在执行下一个任务 相当于两个任务紧挨着执行 没有间隔时间</span></span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要实现 无论任务执行多长时间  两个任务之间总是有间隔时间 可以用scheduleWithFixedDelay() </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">    <span class="comment">//从任务结束时间开始间隔1s</span></span><br><span class="line">    pool.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="正确处理线程池异常"><a href="#正确处理线程池异常" class="headerlink" title="正确处理线程池异常"></a>正确处理线程池异常</h3><p>主动捕获异常</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015132406145.png" alt="image-20201015132406145"></p>
<p>使用future</p>
<p>​    submit会返回future 如果有异常会get到异常信息</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015132434527.png" alt="image-20201015132434527"></p>
<h3 id="线程池应用-定时执行任务"><a href="#线程池应用-定时执行任务" class="headerlink" title="线程池应用-定时执行任务"></a>线程池应用-定时执行任务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如何让每周四 18:00:00 定时执行任务？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  获取当前时间</span></span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    System.out.println(now);</span><br><span class="line">    <span class="comment">// 获取周四时间</span></span><br><span class="line">    LocalDateTime time = now.withHour(<span class="number">18</span>).withMinute(<span class="number">0</span>).withSecond(<span class="number">0</span>).withNano(<span class="number">0</span>).with(DayOfWeek.THURSDAY);</span><br><span class="line">    <span class="comment">// 如果 当前时间 &gt; 本周周四，必须找到下周周四</span></span><br><span class="line">    <span class="keyword">if</span>(now.compareTo(time) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        time = time.plusWeeks(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(time);</span><br><span class="line">    <span class="comment">// initailDelay 代表当前时间和周四的时间差</span></span><br><span class="line">    <span class="comment">// period 一周的间隔时间</span></span><br><span class="line">    <span class="keyword">long</span> initailDelay = Duration.between(now, time).toMillis();</span><br><span class="line">    <span class="keyword">long</span> period = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>;</span><br><span class="line">    ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">    &#125;, initailDelay, period, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tomcat线程池"><a href="#Tomcat线程池" class="headerlink" title="Tomcat线程池"></a>Tomcat线程池</h3><p>用到线程池的地方</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015133655910.png" alt="image-20201015133655910"></p>
<ul>
<li>LimitLatch 用来限流，可以控制最大连接个数，类似 J.U.C 中的 Semaphore 后面再讲</li>
<li>Acceptor 只负责【接收新的 socket 连接】</li>
<li>Poller 只负责监听 socket channel 是否有【可读的 I/O 事件】</li>
<li>一旦可读，封装一个任务对象（socketProcessor），提交给 Executor 线程池处理</li>
<li>Executor 线程池中的工作线程最终负责【处理请求】</li>
</ul>
<p>Tomcat 线程池扩展了 ThreadPoolExecutor，行为稍有不同 如果总线程数达到 maximumPoolSize 这时不会立刻抛 RejectedExecutionException 异常 而是再次尝试将任务放入队列，如果还失败，才抛出 RejectedExecutionException 异常</p>
<p>connector配置</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015134557594.png" alt="image-20201015134557594"></p>
<p>Executor 线程配置</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015134611144.png" alt="image-20201015134611144"></p>
<h2 id="ForkJoin线程池"><a href="#ForkJoin线程池" class="headerlink" title="ForkJoin线程池"></a>ForkJoin线程池</h2><p><strong>概念</strong></p>
<p>Fork/Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的 cpu 密集型 运算</p>
<p>所谓的任务拆分，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计 算，如归并排序、斐波那契数列、都可以用分治思想进行求解</p>
<p>Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运 算效率</p>
<p>Fork/Join 默认会创建与 cpu 核心数大小相同的线程池</p>
<p><strong>使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">System.out.println(pool.invoke(<span class="keyword">new</span> AddTask1(<span class="number">5</span>)));</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AddTask&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTask1</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddTask1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> + n + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;join() &#123;&#125;&quot;</span>, n);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        AddTask1 t1 = <span class="keyword">new</span> AddTask1(n - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让另一个线程执行t1</span></span><br><span class="line">        t1.fork();</span><br><span class="line">        log.debug(<span class="string">&quot;fork() &#123;&#125; + &#123;&#125;&quot;</span>, n, t1);</span><br><span class="line">        <span class="keyword">int</span> result = n + t1.join();</span><br><span class="line">        log.debug(<span class="string">&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, n, t1, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015143826045.png" alt="image-20201015143826045"></p>
<p>这种拆分方式 一个线程需要依赖另一个线程的结果 并发度不高</p>
<p><strong>任务拆分和优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AddTask&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTask2</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddTask2</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> + begin + <span class="string">&quot;,&quot;</span> + end + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只剩下最后一个数字 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;join() &#123;&#125;&quot;</span>, begin);</span><br><span class="line">            <span class="keyword">return</span> begin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这剩下两个数组 没必要拆分</span></span><br><span class="line">        <span class="keyword">if</span> (end - begin == <span class="number">1</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, begin, end, end + begin);</span><br><span class="line">            <span class="keyword">return</span> end + begin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (end + begin) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        AddTask2 t1 = <span class="keyword">new</span> AddTask2(begin, mid - <span class="number">1</span>);</span><br><span class="line">        t1.fork();</span><br><span class="line">        AddTask2 t2 = <span class="keyword">new</span> AddTask2(mid + <span class="number">1</span>, end);</span><br><span class="line">        t2.fork();</span><br><span class="line">        log.debug(<span class="string">&quot;fork() &#123;&#125; + &#123;&#125; + &#123;&#125; = ?&quot;</span>, mid, t1, t2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = mid + t1.join() + t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;join() &#123;&#125; + &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, mid, t1, t2, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015143959262.png" alt="image-20201015143959262"></p>
<h2 id="异步模式之工作线程"><a href="#异步模式之工作线程" class="headerlink" title="异步模式之工作线程"></a>异步模式之工作线程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>让有限的工作线程（Worker Thread）来轮流异步处理无限多的任务。也可以将其归类为分工模式，它的典型实现 就是线程池，也体现了经典设计模式中的享元模式。</p>
<p>例如，海底捞的服务员（线程），轮流处理每位客人的点餐（任务），如果为每位客人都配一名专属的服务员，那 么成本就太高了（对比另一种多线程设计模式：Thread-Per-Message）</p>
<p>注意，不同任务类型应该使用不同的线程池，这样能够避免饥饿，并能提升效率</p>
<p>例如，如果一个餐馆的工人既要招呼客人（任务类型A），又要到后厨做菜（任务类型B）显然效率不咋地，分成 服务员（线程池A）与厨师（线程池B）更为合理，当然你能想到更细致的分工</p>
<h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>固定大小线程池会有饥饿现象</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015112749881.png" alt="image-20201015112749881"></p>
<p>这段代码就会发生死锁 thread1 和thread2 都在处理点餐 </p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015113443373.png" alt="image-20201015113443373"></p>
<p>解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService waiterPool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">    ExecutorService cookPool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    waiterPool.execute(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;处理点餐...&quot;</span>);</span><br><span class="line">        Future&lt;String&gt; f = cookPool.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> cooking();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;上菜: &#123;&#125;&quot;</span>, f.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    waiterPool.execute(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;处理点餐...&quot;</span>);</span><br><span class="line">        Future&lt;String&gt; f = cookPool.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> cooking();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;上菜: &#123;&#125;&quot;</span>, f.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>waiterPool处理点餐  cookPool处理做菜</li>
</ul>
<h3 id="创建多少线程池合适"><a href="#创建多少线程池合适" class="headerlink" title="创建多少线程池合适"></a>创建多少线程池合适</h3><p>过小会导致程序不能充分地利用系统资源、容易导致饥饿。过大会导致更多的线程上下文切换，占用更多内存</p>
<p>cpu密集型计算</p>
<p>通常采用 cpu 核数 + 1 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因 导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费</p>
<p>I/O密集型运算</p>
<p>CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用 CPU 资源，但当你执行 I/O 操作时、远程 RPC 调用时，包括进行数据库操作时，这时候 CPU 就闲下来了，你可以利用多线程提高它的利用率。</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015114019841.png" alt="image-20201015114019841"></p>
<h1 id="J-U-C"><a href="#J-U-C" class="headerlink" title="J.U.C"></a>J.U.C</h1><h2 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架 </p>
<p>特点： </p>
<ul>
<li>用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 <ul>
<li>getState - 获取 state 状态 </li>
<li>setState - 设置 state 状态 </li>
<li>compareAndSetState - cas 机制设置 state 状态 </li>
<li>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源 </li>
</ul>
</li>
<li>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList </li>
<li>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet </li>
</ul>
<p>子类主要实现这样一些方法（默认抛出 UnsupportedOperationException） tryAcquire tryRelease tryAcquireShared tryReleaseShared isHeldExclusively</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015145114472.png" alt="image-20201015145114472"></p>
<h3 id="自定义锁"><a href="#自定义锁" class="headerlink" title="自定义锁"></a>自定义锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义锁（不可重入锁）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不可重入锁 同步器类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MySync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">//如果时可重入锁需要用arg做一些操作</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 加上了锁，并设置 owner 为当前线程</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//变量state被volatie修饰 exclusiveOwnerThread不是 所以setState操作放在后面</span></span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// 是否持有独占锁</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MySync sync = <span class="keyword">new</span> MySync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 加锁（不成功会进入等待队列）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 加锁，可打断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 尝试加锁（一次）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 尝试加锁，带超时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//release内部会调用tryRelease方法 并使用unpark唤醒阻塞的线程</span></span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 创建条件变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestAqs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAqs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLock lock = <span class="keyword">new</span> MyLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="comment">//因为是不可重入的 所以不能重复上锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;locking...&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;unlocking...&quot;</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;locking...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;unlocking...&quot;</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reentrantlock"><a href="#Reentrantlock" class="headerlink" title="Reentrantlock"></a>Reentrantlock</h2><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015153928781.png" alt="image-20201015153928781"></p>
<h3 id="非公平锁实现原理"><a href="#非公平锁实现原理" class="headerlink" title="非公平锁实现原理"></a>非公平锁实现原理</h3><p><strong>加锁解锁流程</strong> </p>
<p>从构造器开始看 默认为非公平锁实现</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015154044967.png" alt="image-20201015154044967"></p>
<p>NonfairSync 继承自 AQS</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015154738799.png" alt="image-20201015154738799"></p>
<p>没有竞争时：执行if里面的语句</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015154530955.png" alt="image-20201015154530955"></p>
<p>第一个竞争出现时：执行else中的语句</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015154541060.png" alt="image-20201015154541060"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015155146781.png" alt="image-20201015155146781"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015154924620.png" alt="image-20201015154924620"></p>
<p>Thread-1 执行了</p>
<ol>
<li>Thread-1 执行了</li>
<li>进入 tryAcquire 逻辑，这时 state 已经是1，结果仍然失败</li>
<li>接下来进入 addWaiter 逻辑，构造 Node 队列<ul>
<li>图中黄色三角表示该 Node 的 waitStatus 状态，其中 0 为默认正常状态</li>
<li>Node 的创建是懒惰的</li>
<li>其中第一个 Node 称为 Dummy（哑元）或哨兵，用来占位，并不关联线程</li>
</ul>
</li>
<li>当前线程进入 acquireQueued 逻辑<ol>
<li>acquireQueued 会在一个死循环中不断尝试获得锁，失败后进入 park 阻塞</li>
<li>如果自己是紧邻着 head（排第二位），那么再次 tryAcquire 尝试获取锁，当然这时 state 仍为 1，失败</li>
<li>进入 shouldParkAfterFailedAcquire 逻辑，将前驱 node，即 head 的 waitStatus 改为 -1，这次返回 false waitStatus为-1的节点有职责唤醒他的后继节点</li>
<li>shouldParkAfterFailedAcquire 执行完毕回到 acquireQueued ，再次 tryAcquire 尝试获取锁，当然这时 state 仍为 1，失败</li>
<li>当再次进入 shouldParkAfterFailedAcquire 时，这时因为其前驱 node 的 waitStatus 已经是 -1，这次返回 true</li>
<li>进入 parkAndCheckInterrupt 该方法调用Thread-1 park（灰色表示）</li>
</ol>
</li>
</ol>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160031729.png" alt="image-20201015160031729"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160041428.png" alt="image-20201015160041428"></p>
<p>再次有多个线程经历上述过程竞争失败，变成这个样子</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160443088.png" alt="image-20201015160443088"></p>
<p>Thread-0 释放锁，进入 tryRelease 流程，如果成功</p>
<ul>
<li>设置 exclusiveOwnerThread 为 null</li>
<li>state = 0</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160611118.png" alt="image-20201015160611118"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160810148.png" alt="image-20201015160810148"></p>
<p>当前队列不为 null，并且 head 的 waitStatus = -1，进入 unparkSuccessor 流程 找到队列中离 head 最近的一个 Node（没取消的），unpark 恢复其运行，本例中即为 Thread-1 回到 Thread-1 的 acquireQueued 流程</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015160912517.png" alt="image-20201015160912517"></p>
<p>如果加锁成功（没有竞争），会设置</p>
<ul>
<li>如果加锁成功（没有竞争），会设置</li>
<li>head 指向刚刚 Thread-1 所在的 Node，该 Node 清空 Thread</li>
<li>原本的 head 因为从链表断开，而可被垃圾回收</li>
</ul>
<p>如果这时候有其它线程来竞争（非公平的体现），例如这时有 Thread-4 来了</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015161010623.png" alt="image-20201015161010623"></p>
<p>如果不巧又被 Thread-4 占了先</p>
<ul>
<li>Thread-4 被设置为 exclusiveOwnerThread，state = 1</li>
<li>Thread-1 再次进入 acquireQueued 流程，获取锁失败，重新进入 park 阻塞</li>
</ul>
<h3 id="可重入原理"><a href="#可重入原理" class="headerlink" title="可重入原理"></a>可重入原理</h3><p>重入时使state++ 解锁是state– 只有当state为0时才能释放锁</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015162708378.png" alt="image-20201015162708378"></p>
<h3 id="可打断原理"><a href="#可打断原理" class="headerlink" title="可打断原理"></a>可打断原理</h3><p><strong>不可打断模式</strong></p>
<p>在此模式下，即使它被打断，仍会驻留在 AQS 队列中，一直要等到获得锁后方能得知自己被打断了</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015163928389.png" alt="image-20201015163928389"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015163949552.png" alt="image-20201015163949552"></p>
<p><strong>可打断模式</strong></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015164253563.png" alt="image-20201015164253563"></p>
<h3 id="公平锁原理"><a href="#公平锁原理" class="headerlink" title="公平锁原理"></a>公平锁原理</h3><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015164714844.png" alt="image-20201015164714844"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015164722055.png" alt="image-20201015164722055"></p>
<h3 id="条件变量实现原理"><a href="#条件变量实现原理" class="headerlink" title="条件变量实现原理"></a>条件变量实现原理</h3><p>每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject</p>
<h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015165427358.png" alt="image-20201015165427358"></p>
<p>开始 Thread-0 持有锁，调用 await，进入 ConditionObject 的 addConditionWaiter 流程 创建新的 Node 状态为 -2（Node.CONDITION），关联 Thread-0，加入等待队列尾部</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015165638415.png" alt="image-20201015165638415"></p>
<p>接下来进入 AQS 的 fullyRelease 流程，释放同步器上的锁</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015165648663.png" alt="image-20201015165648663"></p>
<p>unpark AQS 队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么 Thread-1 竞争成功</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015165659089.png" alt="image-20201015165659089"></p>
<p>park 阻塞 Thread-0</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201015165715106.png" alt="image-20201015165715106"></p>
<h4 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果不是锁的持有者 失败</span></span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把当前节点从ConditionObject中断开</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="keyword">null</span>)</span><br><span class="line">            lastWaiter = <span class="keyword">null</span>;</span><br><span class="line">        first.nextWaiter = <span class="keyword">null</span>; </span><br><span class="line"><span class="comment">//把节点转移到NonfairSync队列 如果失败（超时 打断等原因）或者下一个节点也为null 则再次执行循环 找下一个可用的node进行唤醒</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</span><br><span class="line">             (first = firstWaiter) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尝试把 状态码改为0</span></span><br><span class="line">    <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	<span class="comment">//把节点加入到等待队列尾部 成功的话 返回前驱节点</span></span><br><span class="line">    Node p = enq(node);</span><br><span class="line">    <span class="comment">//检查前驱节点状态并改为-1</span></span><br><span class="line">    <span class="keyword">int</span> ws = p.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line">        LockSupport.unpark(node.thread);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>假设 Thread-1 要来唤醒 Thread-0</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016093458861.png" alt="image-20201016093458861"></p>
<p>进入 ConditionObject 的 doSignal 流程，取得等待队列中第一个 Node，即 Thread-0 所在 Node</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016093731362.png" alt="image-20201016093731362"></p>
<p>执行 transferForSignal 流程，将该 Node 加入 AQS 队列尾部，将 Thread-0 的 waitStatus 改为 0，Thread-3 的 waitStatus 改为 -1</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016093741693.png" alt="image-20201016093741693"></p>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><h3 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>当读操作远远高于写操作时，这时候使用 读写锁 让 读-读 可以并发，提高性能。 类似于数据库中的 </p>
<p>select … from … lock in share mode</p>
<p>提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestReadWriteLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        DataContainer dataContainer = <span class="keyword">new</span> DataContainer();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            dataContainer.read();</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            dataContainer.read();</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.DataContainer&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rw = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="comment">//创建读写锁</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock.ReadLock r = rw.readLock();</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock.WriteLock w = rw.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;获取读锁...&quot;</span>);</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;读取&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放读锁...&quot;</span>);</span><br><span class="line">            r.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;获取写锁...&quot;</span>);</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;写入&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放写锁...&quot;</span>);</span><br><span class="line">            w.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>读读可以并发 读写和写写不行</li>
</ul>
<p>注意事项</p>
<ul>
<li><p>读锁不支持条件变量</p>
</li>
<li><p>重入时升级不支持：即持有读锁的情况下去获取写锁，会导致获取写锁永久等待<img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016102323111.png" alt="image-20201016102323111"></p>
</li>
<li><p>重入时降级支持：即持有写锁的情况下去获取读锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</span><br><span class="line">    Object data;</span><br><span class="line">    <span class="comment">// 是否有效，如果失效，需要重新计算 data</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</span><br><span class="line">    <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rwl.readLock().lock();</span><br><span class="line">        <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">            <span class="comment">// 获取写锁前必须释放读锁</span></span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 双重判断 因为上一重判断没受到线程安全保护判断是否有其它线程已经获取了写锁、更新了缓存, 避免重复更新</span></span><br><span class="line">                <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">                    data = ...</span><br><span class="line">                        cacheValid = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 降级为读锁, 释放写锁, 这样能够让其它线程读取缓存</span></span><br><span class="line">                rwl.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                 rwl.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自己用完数据, 释放读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            use(data);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>读写锁用的是同一个 Sycn 同步器，因此等待队列、state 等也是同一个</p>
<p>下面以给t1上写锁 t2上读锁为例</p>
<p> t1 成功上锁，流程与 ReentrantLock 加锁相比没有特殊之处，不同是写锁状态占了 state 的低 16 位，而读锁 使用的是 state 的高 16 位</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111343872.png" alt="image-20201016111343872"></p>
<p>t2 执行 r.lock，这时进入读锁的 sync.acquireShared(1) 流程，首先会进入 tryAcquireShared 流程。如果有写 锁占据，那么 tryAcquireShared 返回 -1 表示失败</p>
<ul>
<li>tryAcquireShared 返回值表示<ul>
<li>-1 表示失败</li>
<li>0 表示成功，但后继节点不会继续唤醒</li>
<li>正数表示成功，而且数值是还有几个后继节点需要唤醒，读写锁返回 1</li>
</ul>
</li>
</ul>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111504812.png" alt="image-20201016111504812"></p>
<p>这时会进入 sync.doAcquireShared(1) 流程，首先也是调用 addWaiter 添加节点，不同之处在于节点被设置为 Node.SHARED 模式而非 Node.EXCLUSIVE 模式，注意此时 t2 仍处于活跃状态</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111557407.png" alt="image-20201016111557407"></p>
<p>t2 会看看自己的节点是不是老二，如果是，还会再次调用 tryAcquireShared(1) 来尝试获取锁</p>
<p>如果没有成功，在 doAcquireShared 内 for (;;) 循环一次，把前驱节点的 waitStatus 改为 -1，再 for (;;) 循环一 次尝试 tryAcquireShared(1) 如果还不成功，那么在 parkAndCheckInterrupt() 处 park</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111633691.png" alt="image-20201016111633691"></p>
<p>假设又有 t3 加读锁和 t4 加写锁，这期间 t1 仍然持有锁，就变成了下面的样子</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111716318.png" alt="image-20201016111716318"></p>
<p>当t1 w.unlock() 会走到写锁的 sync.release(1) 流程，调用 sync.tryRelease(1) 成功，变成下面的样子</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111813803.png" alt="image-20201016111813803"></p>
<p>接下来执行唤醒流程 sync.unparkSuccessor，即让老二恢复运行，这时 t2 在 doAcquireShared 内 parkAndCheckInterrupt() 处恢复运行</p>
<p>这回再来一次 for (;;) 执行 tryAcquireShared 成功则让读锁计数加一</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111833404.png" alt="image-20201016111833404"></p>
<p>这时 t2 已经恢复运行，接下来 t2 调用 setHeadAndPropagate(node, 1)，它原本所在节点被置为头节点</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111844940.png" alt="image-20201016111844940"></p>
<p>事情还没完，在 setHeadAndPropagate 方法内还会检查下一个节点是否是 shared，如果是则调用 doReleaseShared() 将 head 的状态从 -1 改为 0 并唤醒老二，这时 t3 在 doAcquireShared 内 parkAndCheckInterrupt() 处恢复运行</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016111951965.png" alt="image-20201016111951965"></p>
<p>这回再来一次 for (;;) 执行 tryAcquireShared 成功则让读锁计数加一</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016112006195.png" alt="image-20201016112006195"></p>
<p>这时 t3 已经恢复运行，接下来 t3 调用 setHeadAndPropagate(node, 1)，它原本所在节点被置为头节点</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016112018317.png" alt="image-20201016112018317"></p>
<p>下一个节点不是 shared 了，因此不会继续唤醒 t4 所在节点</p>
<p>当t2 r.unlock，t3 r.unlock</p>
<p>t2 进入 sync.releaseShared(1) 中，调用 tryReleaseShared(1) 让计数减一，但由于计数还不为零</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016112122059.png" alt="image-20201016112122059"></p>
<p>t3 进入 sync.releaseShared(1) 中，调用 tryReleaseShared(1) 让计数减一，这回计数为零了，进入 doReleaseShared() 将头节点从 -1 改为 0 并唤醒老二，即</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016112140459.png" alt="image-20201016112140459"></p>
<p>之后 t4 在 acquireQueued 中 parkAndCheckInterrupt 处恢复运行，再次 for (;;) 这次自己是老二，并且没有其他 竞争，tryAcquire(1) 成功，修改头结点，流程结束</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016112241250.png" alt="image-20201016112241250"></p>
<h3 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h3><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>该类自 JDK 8 加入，是为了进一步优化读性能，它的特点是在使用读锁、写锁时都必须配合【戳】使用</p>
<p>加解读锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.readLock();</span><br><span class="line">lock.unlockRead(stamp);</span><br></pre></td></tr></table></figure>

<p>加解写锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">lock.unlockWrite(stamp)</span><br></pre></td></tr></table></figure>

<p>乐观读，StampedLock 支持 tryOptimisticRead() 方法（乐观读），读取完毕后需要做一次 戳校验 如果校验通 过，表示这期间确实没有写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line"><span class="comment">// 验戳</span></span><br><span class="line"><span class="keyword">if</span>(!lock.validate(stamp))&#123;</span><br><span class="line"> <span class="comment">// 锁升级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStampedLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DataContainerStamped dataContainer = <span class="keyword">new</span> DataContainerStamped(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            dataContainer.read(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        sleep(<span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            dataContainer.read(<span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.DataContainerStamped&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataContainerStamped</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataContainerStamped</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> readTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line">        log.debug(<span class="string">&quot;optimistic read locking...&#123;&#125;&quot;</span>, stamp);</span><br><span class="line">        sleep(readTime);</span><br><span class="line">        <span class="comment">//戳验证成功返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (lock.validate(stamp)) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;read finish...&#123;&#125;, data:&#123;&#125;&quot;</span>, stamp, data);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 戳失效：锁升级 - 读锁</span></span><br><span class="line">        log.debug(<span class="string">&quot;updating to read lock... &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stamp = lock.readLock();</span><br><span class="line">            log.debug(<span class="string">&quot;read lock &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">            sleep(readTime);</span><br><span class="line">            log.debug(<span class="string">&quot;read finish...&#123;&#125;, data:&#123;&#125;&quot;</span>, stamp, data);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;read unlock &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">            lock.unlockRead(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> newData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">        log.debug(<span class="string">&quot;write lock &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">this</span>.data = newData;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;write unlock &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不支持可重入 不支持条件变量</p>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>信号量，用来限制能同时访问共享资源的线程上限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建 semaphore 对象</span></span><br><span class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 10个线程同时运行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应用</p>
<ul>
<li>使用 Semaphore 限流，在访问高峰期时，让请求线程阻塞，高峰期过去再释放许可，当然它只适合限制单机 线程数量，并且仅是限制线程数，而不是限制资源数</li>
<li>用 Semaphore 实现简单连接池，对比『享元模式』下的实现（用wait notify），性能和可读性显然更好</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 连接池大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> poolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 连接对象数组</span></span><br><span class="line">    <span class="keyword">private</span> Connection[] connections;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 连接状态数组 0 表示空闲， 1 表示繁忙</span></span><br><span class="line">    <span class="keyword">private</span> AtomicIntegerArray states;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 构造方法初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pool</span><span class="params">(<span class="keyword">int</span> poolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.poolSize = poolSize;</span><br><span class="line">        <span class="comment">// 让许可数与资源数一致</span></span><br><span class="line">        <span class="keyword">this</span>.semaphore = <span class="keyword">new</span> Semaphore(poolSize);</span><br><span class="line">        <span class="keyword">this</span>.connections = <span class="keyword">new</span> Connection[poolSize];</span><br><span class="line">        <span class="keyword">this</span>.states = <span class="keyword">new</span> AtomicIntegerArray(<span class="keyword">new</span> <span class="keyword">int</span>[poolSize]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            connections[i] = <span class="keyword">new</span> MockConnection(<span class="string">&quot;连接&quot;</span> + (i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 借连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">borrow</span><span class="params">()</span> </span>&#123;<span class="comment">// t1, t2, t3</span></span><br><span class="line">        <span class="comment">// 获取许可</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire(); <span class="comment">// 没有许可的线程，在此等待</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取空闲连接</span></span><br><span class="line">            <span class="keyword">if</span>(states.get(i) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (states.compareAndSet(i, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;borrow &#123;&#125;&quot;</span>, connections[i]);</span><br><span class="line">                    <span class="keyword">return</span> connections[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不会执行到这里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6. 归还连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (connections[i] == conn) &#123;</span><br><span class="line">                states.set(i, <span class="number">0</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;free &#123;&#125;&quot;</span>, conn);</span><br><span class="line">                semaphore.release();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>Semaphore 有点像一个停车场，permits 就好像停车位数量，当线程获得了 permits 就像是获得了停车位，然后 停车场显示空余车位减一，刚开始，permits（state）为 3，这时 5 个线程来获取资源</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016135138148.png" alt="image-20201016135138148"></p>
<p>假设其中 Thread-1，Thread-2，Thread-4 cas 竞争成功，而 Thread-0 和 Thread-3 竞争失败，进入 AQS 队列 park 阻塞</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016135148361.png" alt="image-20201016135148361"></p>
<p>这时 Thread-4 释放了 permits，状态如下</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016135222036.png" alt="image-20201016135222036"></p>
<p>接下来 Thread-0 竞争成功，permits 再次设置为 0，设置自己为 head 节点，断开原来的 head 节点，unpark 接 下来的 Thread-3 节点，但由于 permits 是 0，因此 Thread-3 在尝试不成功后再次进入 park 状态</p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016135246328.png" alt="image-20201016135246328"></p>
<ul>
<li>查看acquire和release的源码</li>
</ul>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><p>用来进行线程同步协作，等待所有线程完成倒计时。 其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">    service.submit(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;begin...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        latch.countDown();</span><br><span class="line">        log.debug(<span class="string">&quot;end...&#123;&#125;&quot;</span>, latch.getCount());</span><br><span class="line">    &#125;);</span><br><span class="line">    service.submit(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;begin...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1.5</span>);</span><br><span class="line">        latch.countDown();</span><br><span class="line">        log.debug(<span class="string">&quot;end...&#123;&#125;&quot;</span>, latch.getCount());</span><br><span class="line">    &#125;);</span><br><span class="line">    service.submit(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;begin...&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        latch.countDown();</span><br><span class="line">        log.debug(<span class="string">&quot;end...&#123;&#125;&quot;</span>, latch.getCount());</span><br><span class="line">    &#125;);</span><br><span class="line">    service.submit(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">            latch.await();</span><br><span class="line">            log.debug(<span class="string">&quot;wait end...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>模拟王者荣耀是个人加载完毕进入游戏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    AtomicInteger num = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>, (r) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;t&quot;</span> + num.getAndIncrement());</span><br><span class="line">    &#125;);</span><br><span class="line">    CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">    String[] all = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    Random r = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = j;</span><br><span class="line">        service.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(r.nextInt(<span class="number">100</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                all[x] = Thread.currentThread().getName() + <span class="string">&quot;(&quot;</span> + (i + <span class="string">&quot;%&quot;</span>) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                System.out.print(<span class="string">&quot;\r&quot;</span> + Arrays.toString(all));</span><br><span class="line">            &#125;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    latch.await();</span><br><span class="line">    System.out.println(<span class="string">&quot;\n游戏开始...&quot;</span>);</span><br><span class="line">    service.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p> 循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置『计数个数』，每个线程执 行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行</p>
<p>CountDownLatch不可重用 次数减到0的时候 需要重新创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//当tast1 and tast2 都执行完毕时 执行第二个参数里的代码</span></span><br><span class="line">    <span class="comment">//线程数最好和任务数保持一致 如果线程数设置为3 由于task2执行时间为2s task1执行时间为1s </span></span><br><span class="line">    <span class="comment">//任务执行顺序是 tast1 tast2 tst1 最终两个tast1先执行完 把parties减为0 </span></span><br><span class="line">    CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">2</span>, ()-&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;task1, task2 finish...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; <span class="comment">// task1  task2  task1</span></span><br><span class="line">        <span class="comment">//每轮循环都会重置CyclicBarrier的第一个参数</span></span><br><span class="line">        service.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task1 begin...&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等到第一个参数减为0时和其他任务一起执行</span></span><br><span class="line">                barrier.await(); <span class="comment">// 2-1=1</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        service.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task2 begin...&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await(); <span class="comment">// 1-1=0</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    service.shutdown();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程安全集合类"><a href="#线程安全集合类" class="headerlink" title="线程安全集合类"></a>线程安全集合类</h2><p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016145715240.png" alt="image-20201016145715240"></p>
<p><img src="/2020/10/05/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/log\source_posts\并发编程\image-20201016145748941.png" alt="image-20201016145748941"></p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Debug</title>
    <url>/2020/11/08/DeBug/</url>
    <content><![CDATA[<p>centos 7 docker 启动一个web服务的时候 启动报错</p>
<p>WARNING: IPv4 forwarding is disabled. Networking will not work.</p>
<p>在宿主机上修改配置文件 <code>/usr/lib/sysctl.d/00-system.conf</code> 追加  <code>net.ipv4.ip_forward=1</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt;<span class="regexp">/usr/</span>lib<span class="regexp">/sysctl.d/</span><span class="number">00</span>-system.conf</span><br></pre></td></tr></table></figure>

<p>重启network和docker服务</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl restart<span class="built_in"> network </span>&amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>bug</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB</title>
    <url>/2020/11/23/MongoDB/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">27017:27017</span> -v &lt;LocalDirectoryPath&gt;<span class="symbol">:/data/db</span> --name docker_mongodb -d mongo</span><br></pre></td></tr></table></figure>

<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>数据库：存放集合的仓库</p>
<p>集合：类似于数组 存放文档</p>
<p>文档：文档是数据库中最小的单位</p>
<p>数据库和集合不需要手动创建 当创建的文档所在的集合或数据库不存在会自动创建（在第一次往里插入文档的时候创建）</p>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>show dbs：显示当前所有数据库</p>
<p>use 数据库名：进入到指定数据库中</p>
<p>db：显示当前所在的数据库</p>
<p>show collections：显示数据库的所有集合</p>
<h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><p>insert：同时插入多条或一条数据（如果插入一条去掉[]）</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">db.students.insert([</span><br><span class="line">	&#123;<span class="attr">name:</span><span class="string">&quot;bob&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name:</span><span class="string">&quot;jack&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name:</span><span class="string">&quot;rose&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name:</span><span class="string">&quot;tom&quot;</span>,<span class="attr">age:</span><span class="number">23</span>,<span class="attr">gender:</span><span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<ul>
<li>自动生成一个字段_id该字段由ObjectId()生成 可以自己指定</li>
</ul>
<p>insertOne：插入一条数据</p>
<p>insertMany：插入多条数据</p>
<h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>find:查询集合所有文档 可以接收一个文档作为条件参数                  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>(&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>findOne：查询集合中符合条件的第一个文档 返回的是一个文档替换</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.findOne</span>(&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;)<span class="selector-class">.name</span></span><br></pre></td></tr></table></figure>

<p>count和length</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.count</span>()</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.length</span>()</span><br></pre></td></tr></table></figure>

<h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><p>update:第一个参数为查询条件 第二个参数为新替换  默认情况下会使用新替换替换旧替换 如果想只替换指定的属性 需要使用修改操作符$set</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">	&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;,</span><br><span class="line">	&#123;$<span class="attribute">set</span>:&#123;</span><br><span class="line">		<span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>,</span><br><span class="line">		<span class="attribute">age</span>:<span class="number">121</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>$unset可以删除指定属性</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">	&#123;<span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>&#125;,</span><br><span class="line">	&#123;$<span class="attribute">unset</span>:&#123;</span><br><span class="line">		<span class="attribute">age</span>:<span class="number">1</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>updateOne:删除第一个符合条件的文档</p>
<p>updateMany:删除所有符合条件的文档</p>
<p>update默认是只修改一个 如果想修改多个 需要增加属性</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.update</span>(</span><br><span class="line">	&#123;<span class="attribute">name</span>:<span class="string">&quot;bob&quot;</span>&#125;,</span><br><span class="line">	&#123;$<span class="attribute">set</span>:&#123;</span><br><span class="line">		<span class="attribute">name</span>:<span class="string">&quot;bao&quot;</span>,</span><br><span class="line">		<span class="attribute">age</span>:<span class="number">121</span>&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attribute">multi</span>:true</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>很少调用删除方法 一般进行逻辑删除</p>
<p>remove:默认删除所有符合条件的文档 如果有第二个参数且为true则只删除一个 如果传入空参则删除所有文档</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>(&#123;<span class="attribute">age</span>:<span class="number">121</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>removeOne:删除一个</p>
<p>removeMany:删除多个</p>
<p>db.集合名.drop():删除集合</p>
<p>db.dropDatabase():删除当下的数据库</p>
<h2 id="sort-投影"><a href="#sort-投影" class="headerlink" title="sort 投影"></a>sort 投影</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:<span class="number">1</span>&#125;) <span class="comment">//升序</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:-<span class="number">1</span>&#125;) <span class="comment">//降序</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;<span class="attribute">age</span>:<span class="number">1</span>,<span class="attribute">sal</span>:<span class="number">1</span>&#125;) <span class="comment">//按多个条件进行排序</span></span><br></pre></td></tr></table></figure>

<p>find可以传入第二个参数设置查询结果的投影(只显示指定的字段)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>(&#123;&#125;,&#123;<span class="attribute">name</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>mongoose是nodeJS提供连接 mongodb的一个库.遵循的是一种, 模板式方法, 能够对你输入的数据进行自动处理</p>
<p>mongoose提供了几个新的对象</p>
<ul>
<li>Schema：定义了约束数据库的文档结构</li>
<li>Model：表示集合中的所有文档，对应collection</li>
<li>Document：表示集合中的具体文档</li>
</ul>
<p>安装:npm i mongoose –save</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">//链接数据库 如果端口是默认端口可以省略</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://192.168.52.131/test&quot;</span> )</span><br><span class="line"><span class="comment">//监视连接状态 mongoose.connection.once(&quot;open&quot;,function()&#123;&#125;) , mongoose.connection.once(&quot;close&quot;,function()&#123;&#125;)</span></span><br><span class="line">mongoose.connection.once(<span class="string">&quot;open&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库 链接成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//断开数据库</span></span><br><span class="line">mongoose.disconnect()</span><br><span class="line"></span><br><span class="line">mongoose.connection.once(<span class="string">&quot;close&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库 链接断开&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Schema和Model"><a href="#Schema和Model" class="headerlink" title="Schema和Model"></a>Schema和Model</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"><span class="comment">//链接数据库 如果端口是默认端口可以省略</span></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://192.168.52.131/test&quot;</span> )</span><br><span class="line"><span class="comment">//创建schema对象</span></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> studentSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    gender: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建model:第一个参数是映射的数据库中的集合名,可以将集合名自动变为复数可以是student</span></span><br><span class="line"><span class="keyword">let</span> studentModel = mongoose.model(<span class="string">&quot;students&quot;</span>,studentSchema)</span><br><span class="line"><span class="comment">//操作文档</span></span><br><span class="line">studentModel.create(&#123;<span class="attr">name</span>:<span class="string">&quot;zhao&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">gender</span>:<span class="string">&quot;female&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;插入成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="model的方法"><a href="#model的方法" class="headerlink" title="model的方法"></a>model的方法</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201125235035148.png" alt="image-20201125235035148"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询:docs是查询到的集合 project有两种形式(&quot;name -age&quot;),&#123;name:1,age:0&#125;</span></span><br><span class="line"><span class="comment">//skip是跳过几个文档 limit是显示几个文档</span></span><br><span class="line"><span class="comment">//返回一个docs</span></span><br><span class="line">studentModel.find(&#123;<span class="attr">age</span>:<span class="number">23</span>&#125;,<span class="string">&quot;name age&quot;</span>,&#123;<span class="attr">skip</span>:<span class="number">1</span>,<span class="attr">limit</span>:<span class="number">1</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(docs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">studentModel.find(<span class="string">&quot;5fbe5d6c575e000016001b71&quot;</span>,<span class="string">&quot;name age&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(doc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126000554126.png" alt="image-20201126000554126"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">studentModel.updateOne(&#123;<span class="attr">name</span>:<span class="string">&quot;zhao&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">100</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;更新成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126000636656.png" alt="image-20201126000636656"></p>
<p>查询文档数量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">studentModel.count(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="document的方法"><a href="#document的方法" class="headerlink" title="document的方法"></a>document的方法</h2><p><img src="/2020/11/23/MongoDB/log\source_posts\MongoDB\image-20201126001448733.png" alt="image-20201126001448733"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个document</span></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> studentModel(&#123;</span><br><span class="line">    name:<span class="string">&quot;zhao&quot;</span>,</span><br><span class="line">    age:<span class="number">21</span>,</span><br><span class="line">    gender: <span class="string">&quot;female&quot;</span></span><br><span class="line">&#125;)moku</span><br><span class="line">student.save()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">studentModel.findOne(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="comment">//修改1</span></span><br><span class="line">        doc.update(&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">28</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;修改成功&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//修改2</span></span><br><span class="line">        doc.age = <span class="number">12</span></span><br><span class="line">        doc.save()</span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        doc.remove(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>直接使用doc删除属性是删不掉的 需要用toObject转换成对象 在删除</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="meta">doc</span> = <span class="meta">doc</span>.toObject()</span><br><span class="line">delete <span class="meta">doc</span>.age</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网练习题笔记</title>
    <url>/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="希尔排序是不是一种稳定的排序方法？"><a href="#希尔排序是不是一种稳定的排序方法？" class="headerlink" title="希尔排序是不是一种稳定的排序方法？"></a>希尔排序是不是一种稳定的排序方法？</h2><p>答：由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<p><a href="https://www.cnblogs.com/chengxiao/p/6104371.html">图解算法之希尔排序</a></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><a href="https://blog.csdn.net/qq_34840129/article/details/80619761?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">前中后序遍历</a></p>
<ul>
<li><p>前序遍历：根左右</p>
</li>
<li><p>中序遍历：左根右</p>
</li>
<li><p>后序遍历：左右根</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/adminabcd/article/details/46672759?utm_medium=distribute.pc_relevant_t0.none-task-blog-searchFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-searchFromBaidu-1.control">n个节点的二叉树有多少种形态</a></p>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><a href="https://baijiahao.baidu.com/s?id=1618548971082312617&wfr=spider&for=pc">关于IP地址、网络地址、子网掩码、广播地址的理解</a></p>
<p><a href="https://blog.csdn.net/u014465934/article/details/81146443">子网掩码、网络地址、广播地址的计算</a></p>
<p>面试问题</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_41910694/article/details/91960815">https://blog.csdn.net/weixin_41910694/article/details/91960815</a></li>
<li><a href="https://blog.csdn.net/qq_39322743/article/details/79700863">https://blog.csdn.net/qq_39322743/article/details/79700863</a></li>
</ul>
<p>RIP基础知识</p>
<ul>
<li><a href="https://cshihong.blog.csdn.net/article/details/80503512?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control">https://cshihong.blog.csdn.net/article/details/80503512?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control</a></li>
<li><a href="https://bingw.blog.csdn.net/article/details/53346473?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">https://bingw.blog.csdn.net/article/details/53346473?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control</a></li>
</ul>
<p>CRC校验原理</p>
<ul>
<li><a href="https://blog.csdn.net/qiaobt/article/details/81661345">https://blog.csdn.net/qiaobt/article/details/81661345</a></li>
</ul>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p><a href="https://blog.csdn.net/starlh35/article/details/76445267?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control">并发操作会带来哪些数据不一致性</a>:<strong>丢失的修改、不可重复读、读脏数据、幻影读</strong>（幻影读在一些资料中往往与不可重复读归为一类）。</p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>问：写个的sql查询语句，如有一张表示英语口语练习每个学员的学时的表a，字段有 studentid(学号) name(可重复) grade(年级) hours（学时），找出那些学时高于他们同一年级的平均学时的学生。</p>
<p>答：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">table</span>  a <span class="keyword">left</span>  <span class="keyword">join</span>  (<span class="keyword">SELECT</span> grade,<span class="keyword">AVG</span>(<span class="keyword">hours</span>) <span class="keyword">as</span> <span class="keyword">hours</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade) <span class="keyword">as</span> b <span class="keyword">on</span> a.grade=b.grade <span class="keyword">where</span>   a.hours&gt;b.hours <span class="keyword">AND</span> a.grade=b.grade</span><br></pre></td></tr></table></figure>

<p>问：<a href="https://blog.csdn.net/qq_35571554/article/details/82796278">说下你对索引的理解，以及数据库索引的数据结构，为什么会被设计为b树或者B+树</a></p>
<p>答：索引用于提升数据库的查找速度。 主要从树的高度、降低磁盘io两方面展开</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BaseClass</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> 	&#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;I’m BaseClass class&quot;</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">	 <span class="keyword">static</span> &#123;</span><br><span class="line"> 	    System.out.println(<span class="string">&quot;static BaseClass&quot;</span>);</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> 	&#123;</span><br><span class="line">		 System.out.println(<span class="string">&quot;I’m Base class&quot;</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">	 <span class="keyword">static</span> &#123;</span><br><span class="line"> 		System.out.println(<span class="string">&quot;static Base&quot;</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">new</span> Base();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>执行顺序为：父类静态代码块 -&gt;子类静态代码块 -&gt;父类非静态代码块 -&gt; 父类构造函数 -&gt; 子类非静态代码块 -&gt; 子类构造函数。</p>
<ol start="2">
<li>对象空间被收集掉之后，会执行该对象的finalize方法(×)：一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用其finalize()方法， 并且在<strong>下一次</strong>垃圾回收动作发生时，才会<strong>真正的</strong>回收对象占用的内存</li>
</ol>
<ol start="3">
<li><strong>包的作用</strong></li>
</ol>
<ul>
<li>1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li>
<li>2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li>
<li>3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li>
</ul>
<p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。</p>
<ol start="4">
<li>java中 %是取余运算最后符号和第1个值一样</li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228162626849.png" alt="image-20201228162626849"></li>
</ol>
<p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228162636766.png" alt="image-20201228162636766"></p>
<ol start="6">
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163509069.png" alt="image-20201228163509069"></li>
</ol>
<p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163617276.png" alt="image-20201228163617276"></p>
<p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163529004.png" alt="image-20201228163529004"></p>
<ol start="7">
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228163800403.png" alt="image-20201228163800403"></li>
</ol>
<p>我们在执行URL u =new URL(“<a href="http://www.123.com/">http://www.123.com</a>“);这句话的时候确实要抛出异常，但是这个异常属于IOException，不管网址是否存在，最后都会返回该网址的一个连接，打印出来就是该网址。</p>
<ol start="8">
<li><a href="https://blog.csdn.net/liangyihuai/article/details/83106584">CyclicBarrier和CountDownLatch都可以让一组线程等待其他线程。前者是让一组线程相互等待到某一个状态再执行。后者是一个线程等待其他线程结束再执行。</a></li>
</ol>
<p><strong>Callable中的call比Runnable中的run厉害就厉害在有返回值和可以抛出异常。同时这个返回值和线程池一起用的时候可以返回一个异步对象Future。</strong></p>
<ol start="9">
<li><p>java8中，忽略内部接口的情况，不能用来修饰interface里的方法的修饰符有:private , protected</p>
</li>
<li><p>抽象方法只可以被public 和 protected修饰；</p>
</li>
<li><p>重载与方法的返回值类型与访问权限无关</p>
</li>
<li><p>线程私有：虚拟机栈，程序计数器，本地方法栈  共享:java堆，方法区</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164700773.png" alt="image-20201228164700773"></p>
</li>
</ol>
<ul>
<li>声明的时候不能指定大小</li>
</ul>
<ol start="14">
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164913519.png" alt="image-20201228164913519"></li>
</ol>
<p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20201228164946718.png" alt="image-20201228164946718"></p>
<ol start="15">
<li><p>java运算符优先级：<a href="http://c.biancheng.net/view/794.html">http://c.biancheng.net/view/794.html</a></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105170242902.png" alt="image-20210105170242902"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105170252150.png" alt="image-20210105170252150"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171431976.png" alt="image-20210105171431976"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171440894.png" alt="image-20210105171440894"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105171937623.png" alt="image-20210105171937623"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105172313366.png" alt="image-20210105172313366"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105172515143.png" alt="image-20210105172515143"></p>
<ol>
<li><pre><code class="java">public static void main(String[] args) &#123;
    String str = &quot;12,3&quot;;
    String str2 = &quot;123&quot;;
    System.out.print(str.split(&quot;,&quot;).length);//2
    //String split 这个方法默认返回一个数组，如果没有找到分隔符，会把整个字符串当成一个长度为1的字符串数组返回到结果
    System.out.print(str2.split(&quot;,&quot;).length);//2
&#125;</code></pre>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173044278.png" alt="image-20210105173044278"></p>
<ol>
<li>注意equal和==的区别</li>
</ol>
</li>
<li><p>接口中的属性默认是private static final</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173343910.png" alt="image-20210105173343910"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173635738.png" alt="image-20210105173635738"></p>
<ol>
<li>数组元素在内存中是一个接着一个线性存放的，通过第一个元素就能访问随后的元素，避免了数据覆盖的可能性，和数据类型覆盖并没有关系。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105173752455.png" alt="image-20210105173752455"></p>
<ol>
<li><p>这类多态问题中，无论向上或向下转型，都记住一句话就可以了。</p>
<p><strong>编译看左边，运行看右边。</strong>意思编译时候，看左边有没有该方法，运行的时候结果看 <strong>new</strong> 的对象是谁，就调用的谁。</p>
</li>
</ol>
</li>
<li><p>单例模式中，两个基本要点是:构造函数私有,唯一实例</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174349947.png" alt="image-20210105174349947"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174358254.png" alt="image-20210105174358254"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174542394.png" alt="image-20210105174542394"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174601119.png" alt="image-20210105174601119"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210105174723561.png" alt="image-20210105174723561"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211441331.png" alt="image-20210106211441331"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211458214.png" alt="image-20210106211458214"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211835788.png" alt="image-20210106211835788"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106211852176.png" alt="image-20210106211852176"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106212423016.png" alt="image-20210106212423016"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106212429344.png" alt="image-20210106212429344"></li>
<li>A B D是并发编程的锁机制相关，Future是一个线程任务的返回结果的‘欠条’。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213047691.png" alt="image-20210106213047691"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213058066.png" alt="image-20210106213058066"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106213443483.png" alt="image-20210106213443483"></p>
<ol>
<li>second中v.i = <code>20</code>;已经改变v指向的对象中的值 所以first最后一行打印的应该是20</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214233706.png" alt="image-20210106214233706"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214323629.png" alt="image-20210106214323629"></li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214330068.png" alt="image-20210106214330068"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214433699.png" alt="image-20210106214433699"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214444017.png" alt="image-20210106214444017"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214547104.png" alt="image-20210106214547104"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214552994.png" alt="image-20210106214552994"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210106214614323.png" alt="image-20210106214614323"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171020455.png" alt="image-20210107171020455"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171509591.png" alt="image-20210107171509591"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171510385.png" alt="image-20210107171510385">z<img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107171513513.png" alt="image-20210107171513513"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107172001632.png" alt="image-20210107172001632"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107172012758.png" alt="image-20210107172012758"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107174912026.png" alt="image-20210107174912026"></p>
<ol>
<li>Square没有重写equal方法 判断的还是两个引用是否相等</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107175344971.png" alt="image-20210107175344971"></p>
<ol>
<li>接口方法默认是public abstract的，且实现该接口的类中对应的方法的可见性不能小于接口方法的可见性，因此也只能是public的。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180458042.png" alt="image-20210107180458042"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180503469.png" alt="image-20210107180503469"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180943624.png" alt="image-20210107180943624"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107180950765.png" alt="image-20210107180950765"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184059579.png" alt="image-20210107184059579"></p>
<ol>
<li>（1）是一个普通方法</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184205583.png" alt="image-20210107184205583"></p>
<ol>
<li>Java中静态变量只能在类主体中定义，不能在方法中定义。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107184306702.png" alt="image-20210107184306702"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107194106028.png" alt="image-20210107194106028"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107194132761.png" alt="image-20210107194132761"></li>
</ol>
</li>
<li><p>正则表达式的学习</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107202231599.png" alt="image-20210107202231599"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210107202501184.png" alt="image-20210107202501184"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109175818399.png" alt="image-20210109175818399"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109175910347.png" alt="image-20210109175910347"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180045460.png" alt="image-20210109180045460"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180301821.png" alt="image-20210109180301821"></p>
<ol>
<li>子类可以不是abstract</li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180518044.png" alt="image-20210109180518044"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180552071.png" alt="image-20210109180552071"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180557485.png" alt="image-20210109180557485"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109180719868.png" alt="image-20210109180719868"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181346678.png" alt="image-20210109181346678"></p>
<ol>
<li>读取路径是request做的</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181704154.png" alt="image-20210109181704154"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109181727290.png" alt="image-20210109181727290"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182209631.png" alt="image-20210109182209631"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182215903.png" alt="image-20210109182215903"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182505921.png" alt="image-20210109182505921"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109182834824.png" alt="image-20210109182834824"></p>
<ol>
<li><img src="file://D:/log/source/_posts/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/image-20210109182834824.png?lastModify=1610188297" alt="image-20210109182834824"><ol>
<li>实例变量是在类声明的内部但是在类的其他成员方法之外声明的</li>
<li>类的成员变量包括实例变量和类变量（静态变量）,成员方法包括实例方法和类方法（静态方法）</li>
</ol>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109183322635.png" alt="image-20210109183322635"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210109183337878.png" alt="image-20210109183337878"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110184406346.png" alt="image-20210110184406346"></p>
<ol>
<li>A、abstract修饰的类，不可实例化，所以需要子类去继承，然后重写其中的抽象方法。但是final修饰类是不可继承的。两者属性相冲。</li>
<li>D、static不可以修饰非static的属性，因为类加载的时候，static属性比非static先初始化，那么一个存在的总不能访问一个没有存在的吧。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185014750.png" alt="image-20210110185014750"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185023277.png" alt="image-20210110185023277"></li>
</ol>
</li>
<li><p>重载和重写的区别</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185211470.png" alt="image-20210110185211470"></p>
<ol>
<li>服务器就创建了一个application</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110185442964.png" alt="image-20210110185442964"></p>
<ol>
<li>java的赋值运算有返回值 赋什么值就返回什么值</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110190014730.png" alt="image-20210110190014730"></p>
<ol>
<li>子类可以继承父类的全部数据域和方法，但是这里继承代表的是“拥有”，即：只是拥有父类的全部数据域和方法，但不具备对某些私有数据域或私有方法的使用权（调用）。</li>
</ol>
</li>
<li><p>实现多线程的方法：继承Thread类 实现Runnable接口 实现Callable接口</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110190522958.png" alt="image-20210110190522958"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110191027017.png" alt="image-20210110191027017"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210110191154675.png" alt="image-20210110191154675"></p>
<ol>
<li><img src="https://uploadfiles.nowcoder.com/images/20180701/3807435_1530425536125_D49BCBCCF82CF58C566E12F1E3130070" alt="img"></li>
</ol>
</li>
<li><p>session中存储属性：session.setAttribute(“key”，”value”)</p>
</li>
<li><p>Sting,StringBuilder,StringBuffer</p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115165852224.png" alt="image-20210115165852224"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170023661.png" alt="image-20210115170023661"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170037923.png" alt="image-20210115170037923"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115170304923.png" alt="image-20210115170304923"></p>
<ol>
<li>因为String是被final修饰的类，所以本身的内容是不会改变的，相当于基本数据类型的值传递，在changge方法中给str赋值了“test”，相当于重新创建了一个string类型的变量</li>
<li>注意String str = “test”; 和 String str = new String(“test”);的区别</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115171538415.png" alt="image-20210115171538415"></p>
<ol>
<li><strong>如果try，finally语句里均有return，忽略try的return，而使用finally的return.</strong></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172030479.png" alt="image-20210115172030479"></p>
<ol>
<li>java object默认的基本方法中没有copy()，含有如下方法：getClass(), hashCode(), equals(), clone(), toString(), notify(), notifyAll(), wait(), finalize()</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172236655.png" alt="image-20210115172236655"></p>
<ol>
<li>导入java.util.*不能读取其子目录的类，因为如果java.util里面有个a类，java.util.regex里面也有个a类，我们若是要调用a类的方法或属性时，应该使用哪个a类呢。所以也应该选C</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172352568.png" alt="image-20210115172352568"></p>
<ol>
<li><p>首先 super.getClass() 是父类的getClass（）方法，其父类是Date，它的getClass（）方法是继承自Object类而且没有重写，</p>
<p>所以就是调用<strong>object的getClass（）方法。而看一下getclass的方法解释如下图</strong></p>
<p><img src="https://uploadfiles.nowcoder.com/images/20160722/579609_1469158660593_072774B6B658B3603E1AA7198722775C"></p>
<p><strong>所以可以知道是返回当前运行时的类。</strong></p>
</li>
<li><p>在调用getName()方法而getName()是：包名+类名**</p>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172522217.png" alt="image-20210115172522217"></p>
<ol>
<li>web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如JAVA中的Tomcat容器，ASP的IIS或PWS都是这样的容器。一个服务器可以多个容器。</li>
<li>servlet是运行在服务器端的小应用程序，是接收网络服务的请求和产生响应的一种方式。servlet的功能：接受http请求，产生动态http响应。</li>
</ol>
</li>
<li><p>true flase null不是关键字</p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172819184.png" alt="image-20210115172819184"></p>
<ol>
<li><p>Jsp只会在客户端第一次发请求的时候被编译，之后的请求不会再编译，同时tomcat能自动检测jsp变更与否，变更则再进行编译。</p>
<p>第一次编译并初始化时调用： init() ；销毁调用： destroy() 。在整个jsp生命周期中均只调用一次。 </p>
<p>service()方法是接收请求，返回响应的方法。每次请求都执行一次，该方法被HttpServlet封装为doGet和doPost方法</p>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115172950347.png" alt="image-20210115172950347"></p>
<ol>
<li>ab相同 cd相同</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115173104765.png" alt="image-20210115173104765"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210115173119227.png" alt="image-20210115173119227"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162100847.png" alt="image-20210116162100847"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162408021.png" alt="image-20210116162408021"></p>
<ol>
<li>不能有两个public类 子类不能访问父类的私有变量</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116162521133.png" alt="image-20210116162521133"></p>
<ol>
<li>EOFException：当输入过程中意外到达文件或流的末尾时，抛出此异常。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163034404.png" alt="image-20210116163034404"></p>
<ol>
<li>枚举类有三个实例，故调用三次构造方法，打印三次It is a account type</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163256251.png" alt="image-20210116163256251"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210116163328489.png" alt="image-20210116163328489"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161309975.png" alt="image-20210117161309975"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117160613840.png" alt="image-20210117160613840"></p>
<ol>
<li><p><strong>（1）从速度上看：System.arraycopy &gt; clone &gt; Arrays.copyOf &gt; for</strong><br><strong>（2）for的速度之所以最慢是因为下标表示法每次都从起点开始寻位到指定下标处（现代编译器应该对其有进行优化，改为指针），另外就是它每一次循环都要判断一次是否达到数组最大长度和进行一次额外的记录下标值的加法运算。</strong> </p>
<p>（3）System.arraycopy:native方法+jvm手写函数 在jvm中预写好速度最快</p>
<p>（4）clone:native方法但并未手写 需要jni转换 速度其次</p>
<p><strong>（5）查看Arrays.copyOf的源码可以发现，它其实本质上是调用了System.arraycopy。之所以时间差距比较大，是因为很大一部分开销全花在了Math.min函数上了。</strong></p>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161051627.png" alt="image-20210117161051627"></p>
<ol>
<li><strong>由于replaceAll方法的第一个参数是一个正则表达式，而”.”在正则表达式中表示任何字符，所以会把前面字符串的所有字符都替换成”/“。如果想替换的只是”.”，那么久要写成”\.”</strong></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161540388.png" alt="image-20210117161540388"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117161724389.png" alt="image-20210117161724389"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162000840.png" alt="image-20210117162000840"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162008056.png" alt="image-20210117162008056"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162150331.png" alt="image-20210117162150331"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162201796.png" alt="image-20210117162201796"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210117162552290.png" alt="image-20210117162552290"></p>
<ol>
<li><p>主要考核了这几个知识点：</p>
<p>1.静态内部类才可以声明静态方法</p>
<p>2.静态方法不可以使用非静态变量</p>
<p>3.抽象方法不可以有函数体 </p>
</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162446809.png" alt="image-20210122162446809"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162647241.png" alt="image-20210122162647241"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162653784.png" alt="image-20210122162653784"></li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162702612.png" alt="image-20210122162702612"></li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162709782.png" alt="image-20210122162709782"></li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162716157.png" alt="image-20210122162716157"></li>
<li>只有A可以指定字符集、</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162912805.png" alt="image-20210122162912805"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122162922723.png" alt="image-20210122162922723"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163014350.png" alt="image-20210122163014350"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163035993.png" alt="image-20210122163035993"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163405991.png" alt="image-20210122163405991"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163427923.png" alt="image-20210122163427923"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163637223.png" alt="image-20210122163637223"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163642864.png" alt="image-20210122163642864"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163758860.png" alt="image-20210122163758860"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122163810456.png" alt="image-20210122163810456"></li>
</ol>
</li>
<li><p>重载与重写：<a href="https://blog.csdn.net/wintershii/article/details/80558739">https://blog.csdn.net/wintershii/article/details/80558739</a></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210122164017658.png" alt="image-20210122164017658"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123124816263.png" alt="image-20210123124816263"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123124930710.png" alt="image-20210123124930710"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125045033.png" alt="image-20210123125045033"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125057445.png" alt="image-20210123125057445"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125247316.png" alt="image-20210123125247316"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125319422.png" alt="image-20210123125319422"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125346966.png" alt="image-20210123125346966"></p>
<ol>
<li>运行异常，可以通过java虚拟机来自行处理。非运行异常，我们应该捕获或者抛出</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125435657.png" alt="image-20210123125435657"></p>
<ol>
<li>length得到的是字符，不是字节。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125624618.png" alt="image-20210123125624618"></p>
<ol>
<li>request.getAttribute()方法返回request范围内存在的对象，而request.getParameter()方法是获取http提交过来的数据。</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123125952795.png" alt="image-20210123125952795"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130011892.png" alt="image-20210123130011892"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130033328.png" alt="image-20210123130033328"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130135614.png" alt="image-20210123130135614"></li>
<li>java是自动管理内存的，通常情况下程序运行到稳定状态，内存大小也达到一个 基本稳定的值但是内存泄露导致Gc不能回收泄露的垃圾，内存不断变大.最终超出内存界限，抛出OutOfMemoryExpection</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130334531.png" alt="image-20210123130334531"></p>
<ol>
<li>分母为0 为运行时异常，jvm帮我们捕获，无需代码里面显式捕获</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130740493.png" alt="image-20210123130740493"></p>
<ol>
<li>A：方法抛出异常是throws B：throw用于抛出异常 C也是错的</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123130914569.png" alt="image-20210123130914569"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131316466.png" alt="image-20210123131316466"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131326280.png" alt="image-20210123131326280"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131427089.png" alt="image-20210123131427089"></p>
<ol>
<li>字符流和字节流每次读入的字节数是不确定的，可能相同也可能不相同；字符流和字节流都有缓冲流</li>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210123131506629.png" alt="image-20210123131506629"></li>
</ol>
</li>
<li><p>IO流关系图</p>
<ol>
<li><img src="http://uploadfiles.nowcoder.com/images/20150328/138512_1427527478646_1.png" alt="img"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185021408.png" alt="image-20210128185021408"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185249478.png" alt="image-20210128185249478"></p>
<ol>
<li>​    既然求最小整数，那肯定先想到负数，则最高位（符号位）一定为1，原码中肯定是1所在的位数越高，值越小，而补码是由原码取反加1得到的，则在补码中1所在的位数一定要越低，即补码为1000 0011；由补码求得原码：1111 1101=-(64+32+16+8+4+1)=-125;</li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185532442.png" alt="image-20210128185532442"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185546647.png" alt="image-20210128185546647"></li>
</ol>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185714149.png" alt="image-20210128185714149"></p>
</li>
<li><p><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185825903.png" alt="image-20210128185825903"></p>
<ol>
<li><img src="/2020/11/23/%E7%89%9B%E5%AE%A2%E7%BD%91%E7%BB%83%E4%B9%A0%E9%A2%98%E7%AC%94%E8%AE%B0/log\source_posts\牛客网练习题笔记\image-20210128185832411.png" alt="image-20210128185832411"></li>
</ol>
</li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>mybatis官方文档笔记</title>
    <url>/2020/11/27/mybatis%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="配置xml"><a href="#配置xml" class="headerlink" title="配置xml"></a>配置xml</h1><h2 id="读取property顺序"><a href="#读取property顺序" class="headerlink" title="读取property顺序"></a>读取property顺序</h2><p>If a property exists in more than one of these places, MyBatis loads them in the following order:</p>
<ul>
<li><p>官方文档</p>
<ul>
<li>Properties specified in the body of the properties element are read first,</li>
<li>Properties loaded from the classpath resource or url attributes of the properties element are read second, and override any duplicate properties already specified,</li>
<li>Properties passed as a method parameter are read last, and override any duplicate properties that may have been loaded from the properties body and the resource/url attributes.</li>
</ul>
</li>
<li><p>翻译</p>
<ul>
<li>当使用占位符给某个属性赋值时，这个属性会去找properties属性下是否有同名的子属性property</li>
<li>接着去找在xml中引入的resource或url中相同名称的属性值。</li>
<li>最后，如果在创建SqlSessionFactory时，SqlSessionFactoryBuilder有引入新的文件，文件中含有相同的属性名称，则之前设定的值都会被覆盖。</li>
</ul>
</li>
</ul>
<h2 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a>指定默认值</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username:ut_user&#125;&quot;</span>/&gt;</span> <span class="comment">&lt;!-- If &#x27;username&#x27; property not present, username become &#x27;ut_user&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This feature is disabled by default. If you specify a default value into placeholder, you should be enable this feature by adding a special property as follow:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- Enable this feature --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这将与SQL定义上的<code>&quot;:&quot;</code>属性键（例如<code>db:username</code>）或OGNL表达式的三元运算符（例如）中的字符冲突<code>$&#123;tableName != null ? tableName : &#39;global_constants&#39;&#125;</code>。如果使用任何一个并想要默认属性值，则必须通过添加以下特殊属性来更改默认值分隔符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span> <span class="attr">value</span>=<span class="string">&quot;?:&quot;</span>/&gt;</span> <span class="comment">&lt;!-- Change default value of separator --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db:username?:ut_user&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringSecurity_02</title>
    <url>/2020/12/27/SpringSecurity-02/</url>
    <content><![CDATA[<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>springSecurity本质是一个过滤器链</p>
<ul>
<li>FilterSercurityInterceptor：是一个方法级的权限过滤器，基本位于过滤器的最底层</li>
<li>ExceptionTranslationFilter：是个异常过滤器，用来处理在认证授权过程中抛出的异常</li>
<li>UsernamePasswordAuthenticationFilter：对/login的post请求进行拦截 检验表单中用户名和密码</li>
</ul>
<h1 id="web权限方案"><a href="#web权限方案" class="headerlink" title="web权限方案"></a>web权限方案</h1><h2 id="设置登陆的用户名和密码"><a href="#设置登陆的用户名和密码" class="headerlink" title="设置登陆的用户名和密码"></a>设置登陆的用户名和密码</h2><p>有以下三种方法</p>
<p><strong>设置配置文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">bob</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p><strong>配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();       			 	</span><br><span class="line">       auth.inMemoryAuthentication().withUser(<span class="string">&quot;rose&quot;</span>).password(encoder.encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不加这个方法会报错：There is no PasswordEncoder mapped for the id &quot;null&quot;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义编写实现类</strong></p>
<p>如果配置类和配置文件中没有配置用户名和密码就会去UserDetailsService中查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建配置类 设置使用哪个userDetailsService</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyUserDetailsSerivce userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写实现类 返回user对象</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsSerivce</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;rose&quot;</span>,<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从数据库中查询用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMpper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsSerivce</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMpper userMpper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        User user = userMpper.selectOne(userQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(),<span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()),auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义用户登录页面"><a href="#自定义用户登录页面" class="headerlink" title="自定义用户登录页面"></a>自定义用户登录页面</h2><p>在SecurityConfig中添加配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin().loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)<span class="comment">//登录访问路径 表单内容被提交到这个页面里</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()</span><br><span class="line">            .and().authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;test/hello&quot;</span>,<span class="string">&quot;/user/login&quot;</span>).permitAll() <span class="comment">//设置哪些路径可以直接访问 不需要认证</span></span><br><span class="line">            .anyRequest().authenticated() <span class="comment">//所有请求都可以访问</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">login.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/usr/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usrname&quot;</span>&gt;</span></span><br><span class="line">        密 码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基于权限访问控制"><a href="#基于权限访问控制" class="headerlink" title="基于权限访问控制"></a>基于权限访问控制</h2><p>在配置类中配置访问页面所需的权限</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20201228103253888.png" alt="image-20201228103253888"></p>
<ul>
<li>多个权限之间用·,·分割 使用hasAnyAuthority 有任何一个权限即可访问</li>
</ul>
<p>在UserDetailsService中对查询到的user添加权限</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20201228103340701.png" alt="image-20201228103340701"></p>
<h2 id="基于角色访问控制"><a href="#基于角色访问控制" class="headerlink" title="基于角色访问控制"></a>基于角色访问控制</h2><p>角色包含权限 权限更加细化</p>
<p>配置与权限类似 自动配置会为角色添加前缀ROLE_，也有hasAnyRole</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">antMatchers</span><span class="params">(<span class="string">&quot;/test/index&quot;</span>)</span></span>.hasRole(<span class="string">&quot;SALE&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">List&lt;GrantedAuthority&gt; auths = <span class="module-access"><span class="module"><span class="identifier">AuthorityUtils</span>.</span></span>comma<span class="constructor">SeparatedStringToAuthorityList(<span class="string">&quot;admin,ROLE_SALE&quot;</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="自定义没有权限的跳转页面-403"><a href="#自定义没有权限的跳转页面-403" class="headerlink" title="自定义没有权限的跳转页面(403)"></a>自定义没有权限的跳转页面(403)</h2><p>自定义一个unauth.html</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20201228104727619.png" alt="image-20201228104727619"></p>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><p>使用注解要开启注解功能：在启动类上添加注解@EnableGlobalMethodSecurity(securedEnabled=true)</p>
<p><strong>@Secured</strong></p>
<p>开启注解功能：在启动类或配置类上添加注解@EnableGlobalMethodSecurity(securedEnabled=true)</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20201228105139639.png" alt="image-20201228105139639"></p>
<p><strong>@PreAuthorize</strong>：进入方法前的权限认证 </p>
<p>开启注解功能：在启动类或配置类上添加注解@EnableGlobalMethodSecurity(prePostEnabled=true)</p>
<p>相对应的是@PostAuthorize在方法执行后进行验证 适合验证带有返回值的权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure>

<p><strong>@PreFilter</strong>：在权限验证前对数据进行过滤 对应的是@PostFilter对返回结果进行过滤</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20201228130317808.png" alt="image-20201228130317808"></p>
<h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103160735176.png" alt="image-20210103160735176"></p>
<p>创建一个success.html当访问成功时跳转到此页面 点击超链接时注销并跳转到/test/hello</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103160806031.png" alt="image-20210103160806031"></p>
<h2 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h2><p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103162338839.png" alt="image-20210103162338839"></p>
<p>创建一张表</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103162636969.png" alt="image-20210103162636969"></p>
<p>在配置类中进行配置</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103163006995.png" alt="image-20210103163006995"></p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103163206337.png" alt="image-20210103163206337"></p>
<p>修改登录页面</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103163450990.png" alt="image-20210103163450990"></p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>spring security的csrf默认是开启的 会针对post put delete patch 方法进行防护</p>
<p>配置需要忽略的url</p>
<p><img src="/2020/12/27/SpringSecurity-02/log\source_posts\SpringSecurity-02\image-20210103170027037.png" alt="image-20210103170027037"></p>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2020/12/28/leetcode/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(x))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(x),i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/</a></p>
<p>解法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> m = nums2.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = n + m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> aStart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bStart = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= sum / <span class="number">2</span>;i++)&#123;</span><br><span class="line">            left = right;</span><br><span class="line">            <span class="keyword">if</span>(aStart &lt; n &amp;&amp; (bStart &gt;= m || nums1[aStart] &lt; nums2[bStart]))&#123;</span><br><span class="line">                right = nums1[aStart++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = nums2[bStart++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            ans = (left + right) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解法二：使用二分法 假设我们要找第 <code>k</code> 小数，我们可以每次循环排除掉 <code>k/2</code> 个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> m = nums2.length;</span><br><span class="line">    <span class="keyword">int</span> left = (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> right = (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span> end1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> end2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. 盛最多水的容器</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/">https://leetcode-cn.com/problems/container-with-most-water/solution/container-with-most-water-shuang-zhi-zhen-fa-yi-do/</a></p>
<p>消除状态：每次都移动较短的板 水槽面积才可能变大 若移动长板 下个水槽的面积一定小于当前水槽面积。所以无论是移动短板或者长板，我们都只关注移动后的新短板会不会变长，而每次移动的木板都只有三种情况，比原短板短，比原短板长，与原短板相等；如向内移动长板，对于新的木板：1.比原短板短，则新短板更短。2.与原短板相等或者比原短板长，则新短板不变。所以，向内移动长板，一定不能使新短板变长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> j = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            res = height[i] &gt; height[j] ? Math.max(res,(j - i) * height[j--]) : Math.max(res, (j - i) * height[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/">https://leetcode-cn.com/problems/3sum/solution/3sumpai-xu-shuang-zhi-zhen-yi-dong-by-jyd/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//固定 3 个指针中最左（最小）数字的指针 k，双指针 i，j 分设在数组索引 (k, len(nums)) 两端，通过双指针交替向中间移动，记录对于每个固定指针 k 的所有满足 nums[k] + nums[i] + nums[j] == 0 的 i,j 组合：</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;nums.length - <span class="number">2</span>;k++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nums[k] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">//防止重复</span></span><br><span class="line">          <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; nums[k] == nums[k-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">int</span> i = k + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">              <span class="keyword">int</span> sum = nums[i] + nums[k] + nums[j];</span><br><span class="line">              <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="comment">//防止重复</span></span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == nums[++i]);</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == nums[--j]);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(nums[i],nums[j],nums[k])));</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == nums[++i]);</span><br><span class="line">                  <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == nums[--j]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度O(n^2)</p>
<h2 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode-cn.com/problems/next-permutation/">31. 下一个排列</a></h2><p>参考答案：官方解题</p>
<p>以排列 [4,5,2,6,3,1][4,5,2,6,3,1] 为例：</p>
<p>我们能找到的符合条件的一对「较小数」与「较大数」的组合为 22 与 33，满足「较小数」尽量靠右，而「较大数」尽可能小。</p>
<p>当我们完成交换后排列变为 [4,5,3,6,2,1][4,5,3,6,2,1]，此时我们可以重排「较小数」右边的序列，序列变为 [4,5,3,1,2,6][4,5,3,1,2,6]。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//如果是倒序的数组 i的值为-1 直接reserve</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j])&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;   </span><br><span class="line">            swap(nums ,i ,j);</span><br><span class="line">        &#125;</span><br><span class="line">        reserve(nums, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> i ,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            swap(nums,i++,j--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h2><p>参考答案：官方解题</p>
<p>有序数组就考虑使用二分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>] == target ? <span class="number">0</span> : -<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="comment">//如果左面是有序的</span></span><br><span class="line">            <span class="comment">//为什么是&lt;=:(l+r)/2是把小数部分都省去了的结果，因此当l=0,r=1时会出现l==(l+r)/2。nums[left]&lt;nums[mid]，虽然可以判断出mid左边是升序的，但当mid=0时，就会到了else中，而else中mid右边有序的，不可能成立，所以要在这个位置加个等号。</span></span><br><span class="line">            <span class="keyword">if</span>(nums[left] &lt;= nums[mid])&#123;</span><br><span class="line">                <span class="comment">//如果target在这个范围内</span></span><br><span class="line">                <span class="keyword">if</span>(nums[left] &lt;= target&amp;&amp;nums[mid] &gt;= target)&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//如果右面是有序的</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target &amp;&amp; nums[right] &gt;= target)&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right = mid -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/si-lu-hen-jian-dan-xi-jie-fei-mo-gui-de-er-fen-cha/">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/si-lu-hen-jian-dan-xi-jie-fei-mo-gui-de-er-fen-cha/</a></p>
<p>参考博客：<a href="https://www.zhihu.com/question/36132386/answer/712269942">https://www.zhihu.com/question/36132386/answer/712269942</a></p>
<p>​                   <a href="https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/xs41qg/">https://leetcode-cn.com/leetbook/read/learning-algorithms-with-leetcode/xs41qg/</a></p>
<p>​                   <a href="https://blog.csdn.net/shaomingmin/article/details/105901635">https://blog.csdn.net/shaomingmin/article/details/105901635</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> firstPosition = FindFirstPosition(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(firstPosition == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lastPosition = FindLastPosition(nums,target);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;firstPosition,lastPosition&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FindFirstPosition</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为是闭区间且循环终止条件是 `&lt;` 所以nums[left]被漏掉 需要做一次特殊判断</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left] == target) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FindLastPosition</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FindLastPosition方法中需要上取整的原因</p>
<p><img src="/2020/12/28/leetcode/log\source_posts\leetcode\image-20210104141114097.png" alt="image-20210104141114097"></p>
<h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/">39. 组合总和</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/">https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/</a></p>
<p>代码1：无剪枝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates,target,<span class="number">0</span>,len,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates,<span class="keyword">int</span> target,<span class="keyword">int</span> begin,<span class="keyword">int</span> len,Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin;i &lt; len;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            <span class="comment">//数组元素可以重复使用所以begin还是i</span></span><br><span class="line">            dfs(candidates,target-candidates[i],i,len,path,res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>剪枝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = candidates.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//剪枝的前提是排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        Deque&lt;Integer&gt; path = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        dfs(candidates,target,<span class="number">0</span>,len,path,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates,<span class="keyword">int</span> target,<span class="keyword">int</span> begin,<span class="keyword">int</span> len,Deque&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>)</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = begin;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="comment">//目标值比当前数组值小 则进行剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(target &lt; candidates[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            dfs(candidates,target-candidates[i],i,len,path,res);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/">48. 旋转图像</a></h2><p>参考解题；<a href="https://leetcode-cn.com/problems/rotate-image/solution/ji-qiao-ti-zai-zeng-song-yi-wei-xing-shi-377z/">https://leetcode-cn.com/problems/rotate-image/solution/ji-qiao-ti-zai-zeng-song-yi-wei-xing-shi-377z/</a></p>
<p>答案中拓展了一维数组旋转的方法</p>
<p><img src="/2020/12/28/leetcode/log\source_posts\leetcode\image-20210106135604308.png" alt="image-20210106135604308"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][n - <span class="number">1</span> - j];</span><br><span class="line">                matrix[i][n - <span class="number">1</span> - j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/hua-jie-suan-fa-53-zui-da-zi-xu-he-by-guanpengchn/">https://leetcode-cn.com/problems/maximum-subarray/solution/hua-jie-suan-fa-53-zui-da-zi-xu-he-by-guanpengchn/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum += num;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum = num;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode-cn.com/problems/jump-game/">55. 跳跃游戏</a></h2><p>参考解题：<a href="https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/">https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/</a></p>
<ol>
<li>如果某一个作为 <strong>起跳点</strong> 的格子可以跳跃的距离是 3，那么表示后面 3 个格子都可以作为 <strong>起跳点</strong>。</li>
<li>可以对每一个能作为 <strong>起跳点</strong> 的格子都尝试跳一次，把 <strong>能跳到最远的距离</strong> 不断更新。</li>
<li>如果可以一直跳到最后，就成功了。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; i) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; nums.length - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k = Math.max(k,nums[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode-cn.com/problems/merge-intervals/">56. 合并区间</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/">https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        Arrays.sort(intervals,<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; merged = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; intervals.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(merged.size() == <span class="number">0</span> || merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] &lt; left)&#123;</span><br><span class="line">                merged.add(intervals[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>] = Math.max(right,merged.get(merged.size() - <span class="number">1</span>)[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> merged.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[merged.size()][]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径</a></h2><p>参考答案：<a href="https://leetcode-cn.com/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/">https://leetcode-cn.com/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(arr,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">                arr[j] += arr[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>pig_note</title>
    <url>/2021/01/25/pig-note/</url>
    <content><![CDATA[<h1 id="getway"><a href="#getway" class="headerlink" title="getway"></a>getway</h1><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>PigRequestGlobalFilter,对全部的微服务提供了安全过滤（这个后边会讲）和全局StripPrefix=1配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PigRequestGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1. 清洗请求头中from 参数</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      因为部分内部feign调用 是没有token的,例如定时任务去调用upms的接口，所以需要在请求头中加了from in的标志</span></span><br><span class="line"><span class="comment">      ,upms看到这个from就放行了，但外部可能会人工恶意传入 所以网关要给清洗掉</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      ServerHttpRequest request = exchange.getRequest().mutate()</span><br><span class="line">            .headers(httpHeaders -&gt; httpHeaders.remove(SecurityConstants.FROM)).build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 重写StripPrefix(截取前缀)=1 : 假如我们通过 Spring Cloud Gateway 访问/aaa/bbb/ccc/ddd的时候如果StripPrefix=2</span></span><br><span class="line">      <span class="comment">// 那么当网关服务向后转发请求时，会去掉/aaa/bbb 微服务收到的就是/ccc/ddd</span></span><br><span class="line">      <span class="comment">// 记录修改前的url</span></span><br><span class="line">      addOriginalRequestUrl(exchange, request.getURI());</span><br><span class="line">      String rawPath = request.getURI().getRawPath(); <span class="comment">// /auth/oauth/token</span></span><br><span class="line">      String newPath = <span class="string">&quot;/&quot;</span> + Arrays.stream(StringUtils.tokenizeToStringArray(rawPath, <span class="string">&quot;/&quot;</span>)).skip(<span class="number">1L</span>)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;/&quot;</span>));  <span class="comment">// /oauth/token</span></span><br><span class="line">      ServerHttpRequest newRequest = request.mutate().path(newPath).build();</span><br><span class="line">      exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, newRequest.getURI());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> chain.filter(exchange.mutate().request(newRequest.mutate().build()).build());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网关降级"><a href="#网关降级" class="headerlink" title="网关降级"></a>网关降级</h2><p>以UMPS路由配置为例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">locator:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment">#UPMS 模块</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pig-upms</span>      <span class="comment"># 唯一的服务ID</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://pig-upms</span> <span class="comment"># 注册中心的服务名称，实现负载均衡</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/admin/**</span>  <span class="comment">#所有业务的请求前缀</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span>           <span class="comment">#断路器降级策略</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">&#x27;forward:/fallback&#x27;</span> <span class="comment"># 降级接口的地址</span></span><br></pre></td></tr></table></figure>

<p>Spring Cloud Gateway 会自动寻找配置Hystrix的Filter，这个功能是内置的，然后回调我们提供的fallbackUr</p>
<p>降级入口。这里的意思类似于SpringMVC 定义一个 @GetMapping(“/fallback”) 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterFunctionConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HystrixFallbackHandler hystrixFallbackHandler;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ImageCodeHandler imageCodeHandler;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RouterFunction <span class="title">routerFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route(</span><br><span class="line">      RequestPredicates.path(<span class="string">&quot;/fallback&quot;</span>)</span><br><span class="line">        .and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), hystrixFallbackHandler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="auth"><a href="#auth" class="headerlink" title="auth"></a>auth</h1><p>Spring Security Oauth2 以redis的方式存储Token</p>
]]></content>
  </entry>
  <entry>
    <title>mysql分区表</title>
    <url>/2020/12/01/mysql%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="MySQL分区表介绍"><a href="#MySQL分区表介绍" class="headerlink" title="MySQL分区表介绍"></a>MySQL分区表介绍</h3><p>分区是一种表的设计模式，正确的分区可以极大地提升数据库的查询效率，完成更高质量的SQL编程。但是如果错误地使用分区，那么分区可能带来毁灭性的的结果。</p>
<p>分区功能并不是在存储引擎层完成的，因此不只有InnoDB存储引擎支持分区，常见的存储引擎MyISAM、NDB等都支持分区。但是并不是所有的存储引擎都支持，如CSV、FEDORATED、MERGE等就不支持分区。在使用此分区功能前，应该对选择的存储引擎对分区的支持有所了解。</p>
<p>MySQL数据库在5.1版本时添加了对分区的支持，分区的过程是将一个表或索引分解为多个更小、更可管理的部分。就访问数据库的应用而言，从逻辑上讲，只有一个表或一个索引，但是在物理上这个表或索引可能由数十个物理分区组成。每个分区都是独立的对象，可以独自处理，也可以作为一个更大对象的一部分进行处理。</p>
<p>MySQL数据库支持的分区类型为水平分区（指将同一个表中不同行的记录分配到不同的物理文件中），并不支持垂直分区（指将同一表中不同列的记录分配到不同的物理文件中）。此外，MySQL数据库的分区是局部分区索引，一个分区中既存放了数据又存放了索引。而全局分区是指，数据存放在各个分区中，但是所有数据的索引放在一个对象中。目前，MySQL数据库还不支持全局分区。</p>
<p>有时候可能会有这么一种误区，只要启用了分区，数据库就会运行的更快。这个结论结论是存在很多问题的，就经验来看，分区可能会给某些SQL语句性能带来提高，但是分区主要用于数据库高可用性的管理。在OLTP应用中，对于分区的使用应该非常小心，总之，如果只是一味地使用分区，而不理解分区是如何工作的，也不清楚你的应用如何使用分区，那么分区极有可能会对性能产生负面的影响。</p>
<h3 id="MySQL分区类型"><a href="#MySQL分区类型" class="headerlink" title="MySQL分区类型"></a>MySQL分区类型</h3><h4 id="RANGE分区"><a href="#RANGE分区" class="headerlink" title="RANGE分区"></a>RANGE分区</h4><p>我们介绍的第一种分区类型是RANGE分区，也是最常用的一种分区类型，基于属于一个给定连续区间的列值，把多行分配给分区。</p>
<p>这些区间要连续且不能相互重叠，使用VALUES LESS THAN操作符来进行定义。下面创建一个以id列为区间分区表，当id小于10时，数据插入p0分区；当id大于等于10小于20时，数据插入p1分区。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t( <span class="keyword">id</span> <span class="built_in">int</span>) <span class="keyword">ENGINE</span>= <span class="keyword">INNODB</span> <span class="keyword">PARTITION</span> <span class="keyword">by</span> <span class="keyword">range</span>(<span class="keyword">id</span>)(</span><br><span class="line">	<span class="keyword">PARTITION</span> p0 <span class="keyword">values</span> <span class="keyword">less</span> <span class="keyword">than</span>(<span class="number">10</span>), </span><br><span class="line">	<span class="keyword">PARTITION</span> p1 <span class="keyword">values</span> <span class="keyword">less</span> <span class="keyword">than</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>接着插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t VALUES(8);</span><br><span class="line">insert into t VALUES(12);</span><br><span class="line">insert into t VALUES(34); #当插入一个不在分区中定义的值时，MySQL数据库会抛出一个异常</span><br></pre></td></tr></table></figure>

<p>因为表t根据id进行分区，所以数据是根据列id的值的范围存放在不同的物理文件中的，可以通过查询information_schema架构下的partitions表来查看每个分区的具体信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.&#96;PARTITIONS&#96; where table_schema&#x3D;database() and table_name &#x3D; &#39;t&#39;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/01/mysql%E5%88%86%E5%8C%BA%E8%A1%A8/mysql%E5%88%86%E5%8C%BA%E8%A1%A8%5Cimage-20201201144224230.png" alt="image-20201201144224230"></p>
<p>我们可以对分区添加一个MAXVALUE值的分区，MAXVALUE可以理解为正无穷，因此所有大于等于20且小于MAXVALUE的值被放入p2分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t add PARTITION(PARTITION p2 values less than MAXVALUE);</span><br></pre></td></tr></table></figure>

<p><strong>举例</strong></p>
<p>创建一个表并根据年份创建分区 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table sales(money int UNSIGNED not null, date datetime) ENGINE&#x3D;INNODB PARTITION by range(year(date))(</span><br><span class="line">	PARTITION p2014 values less than (2015),</span><br><span class="line">	PARTITION p2015 values less than (2016),</span><br><span class="line">	PARTITION p2016 values less than (2017));</span><br></pre></td></tr></table></figure>

<p>插入记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into sales select 100,&#39;2013-01-01&#39;;</span><br><span class="line">insert into sales select 200,&#39;2013-01-02&#39;;</span><br><span class="line">insert into sales select 200,&#39;2014-03-01&#39;;</span><br><span class="line">insert into sales select 200,&#39;2015-03-01&#39;;</span><br></pre></td></tr></table></figure>

<p>这样创建的好处就是便于对sales这张表的管理。如果我们要删除2015年的数据，不需要执行delete from sales where date&gt;=’2015-01-01′ and dater&lt;= ‘2016-01-01’，只需要删除2015年所在的分区即可。</p>
<p>这样创建的另一个好处就是可以加快某些查询操作，如果我们只需要查询2015年整年的销售额，可以这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN PARTITIONS select * from sales where date &gt;&#x3D; &#39;2014-01-01&#39; and date &lt;&#x3D; &#39;2014-12-31&#39;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/01/mysql%E5%88%86%E5%8C%BA%E8%A1%A8/mysql%E5%88%86%E5%8C%BA%E8%A1%A8%5Cimage-20201201145433295.png" alt="image-20201201145433295"></p>
<p>通过explain partitions命令我们可以发现，在上述语句中，SQL优化只需要去搜索p2014这个分区，而不会去搜索所有的分区，称为分区修剪（partition pruning），故查询的速度得到了大幅度的提升。需要注意的是，如果执行下列语句，结果是一样的，但是优化器的选择可能又会不同了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN PARTITIONS select * from sales where date &gt;&#x3D; &#39;2014-01-01&#39; and date &lt;&#x3D; &#39;2015-01-01&#39;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/01/mysql%E5%88%86%E5%8C%BA%E8%A1%A8/mysql%E5%88%86%E5%8C%BA%E8%A1%A8%5Cimage-20201201145604610.png" alt="image-20201201145604610"></p>
<p>这次条件改为date&lt;=’ 2015-01-01’而不是date&lt;=’2014-12-31’时，优化器会选择搜索两个分区，这是我们不希望看到的，因此对于启用分区，应该根据分区的特性来编写最优的SQL。</p>
<p>在进行分区时，如果出现“This partition function is not allowed”的错误提示，则你可能使用了非支持函数。MySQL 5.6支持的partition函数：<a href="http://dev.mysql.com/doc/refman/5.6/en/partitioning-limitations-functions.html">http://dev.mysql.com/doc/refman/5.6/en/partitioning-limitations-functions.html</a></p>
<p>另外，需要注意一点的时，对于RANGE分区的查询，优化器只能对YEAR()，TO_YEAR()，TO_SECONDS()，UNIX_TIMESTAMP()这类函数进行优化选择，如果你使用了其他的函数或方法编写了符合分区特性的SQL语句，就不一定能够使用查询优化，所以再编写SQL语句时尽量测试。</p>
<h4 id="LIST分区"><a href="#LIST分区" class="headerlink" title="LIST分区"></a>LIST分区</h4><p>LIST分区和RANGE分区类似，区别在于LIST分区是基于列值匹配一个离散值集合中的某个值来进行选择，而非连续的。</p>
<p>LIST分区通过使用“PARTITION BY LIST(expr)”来实现，其中“expr” 是某列值或一个基于某个列值、并返回一个整数值的表达式，然后通过“VALUES IN (value_list)”的方式来定义每个分区，其中“value_list”是一个通过逗号分隔的整数列表。</p>
<p>假定有20个音像店，分布在4个有经销权的地区</p>
<p>不同于RANGE分区中定义的VALUES LESS THAN语句，LIST分区使用VALUES IN，因为每个分区的值是离散的，因此只能定义值。按照属于同一个地区商店的行保存在同一个分区中的方式来分割表，可以使用下面的“CREATE TABLE”语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table staff(id int not null,fname VARCHAR(30),lname VARCHAR(30),hired date not null default &#39;1970-01-01&#39;,separated date not null default &#39;9999-12-31&#39;,job_code int,store_id int) PARTITION by list(store_id) (PARTITION pNorth values in(3,5,6,9,17),PARTITION pEast values in(1,2,10,11,19,20),partition pWest values in(4,12,	13,14,18),PARTITION pCentral values in(7,8,15,16));</span><br></pre></td></tr></table></figure>

<p>这使得在表中增加或删除指定地区的雇员记录变得容易起来。例如，假定西区的所有音像店都卖给了其他公司。那么与在西区音像店工作雇员相关的所有记录（行）可以使用“ALTER TABLE employees DROP PARTITION pWest；”来进行删除，它与具有同样作用的DELETE （删除）查询“DELETE query DELETE FROM employees WHERE store_id IN (4,12,13,14,18)；”比起来，要有效得多。</p>
<p>【要点】如果试图插入列值（或分区表达式的返回值）不在分区值列表中的一行时，那么“INSERT”查询将失败并报错。</p>
<h4 id="HASH分区"><a href="#HASH分区" class="headerlink" title="HASH分区"></a>HASH分区</h4><p>HASH分区的目的是将数据均匀地分布到预先定义的各个分区中，保证各分区的数据量大致都是一样的。在RANGE和LIST分区中，必须明确指定一个给定的列值或列值集合应该保存在哪个分区中；而在HASH分区中，MySQL自动完成这些工作，用户所要做的只是基于将要进行哈希分区的列值指定一个列值或表达式，以及指定被分区的表将要被分隔成的分区数量。</p>
<p>要使用HASH分区来分割一个表，要在CREATE TABLE 语句上添加一个“PARTITION BY HASH (expr)”子句，其中“expr”是一个返回一个整数的表达式。它可以仅仅是字段类型为MySQL 整型的一列的名字。此外，你很可能需要在后面再添加一个“PARTITIONS num”子句，其中num是一个非负的整数，它表示表将要被分割成分区的数量，如果没有包括一个PARTITIONS子句，那么分区的数量将默认为1。</p>
<p>创建表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table staff_hash(id int not null,lname VARCHAR(30),store_id int) PARTITION by hash(store_id) PARTITIONS 4;</span><br></pre></td></tr></table></figure>

<p>插入数据并查看分区信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into staff_hash values(1,&#39;bob&#39;,10);</span><br><span class="line">insert into staff_hash values(2,&#39;jack&#39;,20);</span><br><span class="line">insert into staff_hash values(3,&#39;roes&#39;,30);</span><br><span class="line"></span><br><span class="line">select * from information_schema.&#96;PARTITIONS&#96; where table_schema&#x3D;database() and table_name &#x3D; &#39;staff_hash&#39;</span><br></pre></td></tr></table></figure>

<p>可以看到插入的数据正是按照mod(store_id,4)这种方式来进行插入的。如果对于连续的值进行HASH分区，如自增主键，则可以较好地将数据进行平均分布。</p>
<h4 id="LINER-HASH"><a href="#LINER-HASH" class="headerlink" title="LINER_HASH"></a>LINER_HASH</h4><p>MySQL还支持线性哈希功能，它与常规哈希的区别在于，线性哈希功能使用的是一个线性的2的幂（powers-of-two）运算法则，而常规哈希使用的是求哈希函数值的模数。</p>
<p>线性哈希分区和常规哈希分区在语法上的唯一区别在于，在“PARTITION BY” 子句中添加“LINEAR”关键字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table staff_linear_hash(id int not null,lname VARCHAR(30),store_id int) PARTITION by linear hash(store_id) PARTITIONS 4;</span><br></pre></td></tr></table></figure>

<p>按照线性哈希分区的优点在于增加、删除、合并和拆分分区将变得更加快捷，有利于处理含有极其大量（1000吉）数据的表。它的缺点在于，与使用常规HASH分区得到的数据分布相比，各个分区间数据的分布不大可能均衡。</p>
<h4 id="KEY分区"><a href="#KEY分区" class="headerlink" title="KEY分区"></a>KEY分区</h4><p>KEY分区和HASH分区相似，不同之处在于HASH分区使用用户定义的函数进行分区，支持字符串HASH分区，KEY分区使用MySQL数据库提供的函数进行分区，这些函数基于与PASSWORD()一样的运算法则。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table staff_key(id int not null,lname VARCHAR(30),store_id int) PARTITION by linear key(store_id) PARTITIONS 4;</span><br></pre></td></tr></table></figure>

<p>在KEY分区中使用关键字LINEAR和在HASH分区中使用具有同样的作用，分区的编号是通过2的幂（powers-of-two）算法得到，而不是通过模数算法。</p>
<h4 id="COLUMNS"><a href="#COLUMNS" class="headerlink" title="COLUMNS"></a>COLUMNS</h4><p>在前面说了RANGE、LIST、HASH和KEY这四种分区中，分区的条件是：数据必须为整形（interger），如果不是整形，那应该需要通过函数将其转化为整形，如YEAR()，TO_DAYS()，MONTH()等函数。MySQL5.5版本开始支持COLUMNS分区，可视为RANGE分区和LIST分区的一种进化。COLUMNS分区可以直接使用非整形的数据进行分区，分区根据类型直接比较而得，不需要转化为整形。此外，RANGE COLUMNS分区可以对多个列的值进行分区。</p>
<p>COLUMNS分区支持以下的数据类型：</p>
<ul>
<li>所有的整形类型，如INT、SMALLINT、TINYINT和BIGINT。而FLOAT和DECIMAL则不予支持。</li>
<li>日期类型，如DATE何DATETIME。其余的日期类型不予支持。</li>
<li>字符串类型，如CHAR、VARCHAR、BINARY和VARBINARY。而BLOB和TEXT类型不予支持。</li>
</ul>
<p>对于日期类型的分区，我们不再需要YEAR()和TO_DATS()函数了，而直接可以使用COLUMNS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table sales_columns(money int UNSIGNED not null, date datetime) ENGINE&#x3D;INNODB PARTITION by range COLUMNS(date)(</span><br><span class="line">	PARTITION p2014 values less than (&#39;2014-12-31:00:00:00&#39;),</span><br><span class="line">	PARTITION p2015 values less than (&#39;2015-12-31:00:00:00&#39;),</span><br><span class="line">	PARTITION p2016 values less than (&#39;2016-12-31:00:00:00&#39;));</span><br></pre></td></tr></table></figure>

<p>Columns分区还支持多列分区</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成与容器管理</title>
    <url>/2021/01/04/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="创建私有仓库"><a href="#创建私有仓库" class="headerlink" title="创建私有仓库"></a>创建私有仓库</h1><p>拉取：docker pull registry</p>
<p>启动：docker run -di –name=registry -p 5000:5000 registry</p>
<p>修改配置文件daemon.json</p>
<p><img src="/2021/01/04/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/log\source_posts\持续集成与容器管理\image-20210104164950109.png" alt="image-20210104164950109"></p>
<p>上传镜像到本地仓库</p>
<p>docker tag jdk1.8 myImage/jdk1.8</p>
<p>docker push 192.168.52.131:5000 jdk1.8</p>
]]></content>
  </entry>
  <entry>
    <title>清除maven为下载成功的jar包</title>
    <url>/2021/01/12/%E6%B8%85%E9%99%A4maven%E4%B8%BA%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%E7%9A%84jar%E5%8C%85/</url>
    <content><![CDATA[<p>r</p>
<p>导入项目如果中途退出或者发生中断 刚下载一半的jar包会下载失败 需要手动清除</p>
<p>创建一个txt文件 把这段内容复制进入</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=D:\maven_repository</span><br><span class="line"><span class="comment">rem 正在搜索...</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem 搜索完毕</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p>修改文件后缀为.bat 点击运行</p>
]]></content>
  </entry>
  <entry>
    <title>springCloud_mall</title>
    <url>/2020/12/13/springCloud-mall/</url>
    <content><![CDATA[<h1 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h1><p>project:springboot_druid</p>
<p>Druid阿里巴巴开源的一个java数据库连接池，是Java语言中最好的数据库连接池，Druid能够提供强大的监控和扩展功能；集成它能够方便我们对数据库连接进行监控和分析</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.52.131:3306/mall?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Bbj0611..</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span> <span class="comment">#连接池初始化大小</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">10</span> <span class="comment">#最小空闲连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span> <span class="comment">#最大连接数</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span> <span class="comment">#不统计这些请求数据</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment">#访问监控网页的登录用户名和密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br></pre></td></tr></table></figure>

<h1 id="集成admin"><a href="#集成admin" class="headerlink" title="集成admin"></a>集成admin</h1><p>参考博客：<a href="https://www.cnblogs.com/forezp/p/10242004.html">https://www.cnblogs.com/forezp/p/10242004.html</a></p>
<h1 id="MINIO"><a href="#MINIO" class="headerlink" title="MINIO"></a>MINIO</h1><p>安装</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>dl.minio.org.cn<span class="regexp">/server/mi</span>nio<span class="regexp">/release/</span>linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">.<span class="regexp">/minio server /</span>data</span><br></pre></td></tr></table></figure>

<p>默认账号名和密码为:minioadmin</p>
<h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><p>下载地址:<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>解压后 启动：<code>sh startup.sh -m standalone</code></p>
<p>启动失败解决方法：<a href="https://www.cnblogs.com/rookiemzl/p/13814919.html">https://www.cnblogs.com/rookiemzl/p/13814919.html</a></p>
<p>访问地址： <a href="http://192.168.52.131:8848/nacos/">http://192.168.52.131:8848/nacos/</a></p>
<p>默认账号和密码：nacos</p>
<p><strong>nacos可以作为配置中心</strong></p>
<p>项目：springcloud-learning-&gt;nacos-config-client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个页面需要参数config.info 但是配置文件里没有</p>
<p>在nacos中创建一个配置</p>
<p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20201214094003249.png" alt="image-20201214094003249"></p>
<p>并在bootstarp中配置获取路径</p>
<p><img src="/2020/12/13/springCloud-mall/log\source_posts\springCloud-mall\image-20201214094027256.png" alt="image-20201214094027256"></p>
<h1 id="Gateway集成Oauth2-0"><a href="#Gateway集成Oauth2-0" class="headerlink" title="Gateway集成Oauth2.0"></a>Gateway集成Oauth2.0</h1><p><img src="https://pic4.zhimg.com/80/v2-93c28c22643361ecd5f265e33de6be03_1440w.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2020/12/01/redis/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><strong>redis-benchmark</strong>可以进行性能测试</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><strong>-h</strong></td>
<td>指定服务器主机名</td>
<td>127.0.0.1</td>
</tr>
<tr>
<td>2</td>
<td><strong>-p</strong></td>
<td>指定服务器端口</td>
<td>6379</td>
</tr>
<tr>
<td>3</td>
<td><strong>-s</strong></td>
<td>指定服务器 socket</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td><strong>-c</strong></td>
<td>指定并发连接数</td>
<td>50</td>
</tr>
<tr>
<td>5</td>
<td><strong>-n</strong></td>
<td>指定请求数</td>
<td>10000</td>
</tr>
<tr>
<td>6</td>
<td><strong>-d</strong></td>
<td>以字节的形式指定 SET/GET 值的数据大小</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><strong>-k</strong></td>
<td>1=keep alive 0=reconnect</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><strong>-r</strong></td>
<td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td><strong>-P</strong></td>
<td>通过管道传输 <numreq> 请求</numreq></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><strong>-q</strong></td>
<td>强制退出 redis。仅显示 query/sec 值</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td><strong>–csv</strong></td>
<td>以 CSV 格式输出</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td><strong>-l</strong></td>
<td>生成循环，永久执行测试</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td><strong>-t</strong></td>
<td>仅运行以逗号分隔的测试命令列表。</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td><strong>-I</strong></td>
<td>Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> -t <span class="keyword">set</span>,lpush -n <span class="number">10000</span> -q</span><br></pre></td></tr></table></figure>

<p>默认有16个数据库 可以使用select n 进行切换</p>
<p>清空当前数据库：flushdb</p>
<p>清空所有数据库：flushall</p>
<p>查看所有key：keys * </p>
<p>判断key是否存在：exists name</p>
<p>设置过期时间 单位秒：expire name n</p>
<p>查看key的剩余时间：ttl name</p>
<p>查看key的类型：type name</p>
<p>移动key到其他数据库：move name n</p>
<p>删除key：del name</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>数字和字符串都用String存储</p>
<p>append：追加字符串 没有的话新建一个</p>
<p>strlen：获取字符串长度</p>
<p>incr：自增 第二个参数可以指定步长 incr views 10</p>
<p>decr：自减 第二个参数可以指定步长</p>
<p>getrange：getrange name 0 3  如果最后一个参数是-1则获取整个字符串</p>
<p>setrange: setrange name 0 xx  | abcde-&gt;xxcde</p>
<p>setex：为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。setex name 10 bob</p>
<p>setnx：如果不存在才创建 setnx name bob </p>
<p>mget：批量获取值 mget k1 k2</p>
<p>mset：批量设置值 mset k1 v1 k2 v2</p>
<p>msetnx：原子性的 要么批量成功要么批量失败</p>
<p>设置对象：</p>
<pre><code>1. set user:1 &#123;name:zhangdan,age:3&#125; 获取：get user:1
 2. set user:1 &#123;name:zhangdan,age:3&#125;  获取：get user:1:name</code></pre>
<p>getset：返回旧值 设置新值 getset name bob</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>lpush(头插法)：从左端放入对应的是rpush(尾插法)</p>
<p>lrange：获取指定范围 如果最后一个参数是-1则获取全部</p>
<p>Lpop：移除头部元素 对应的是rpop</p>
<p>lindex：获取下标对应的元素</p>
<p>llen：返回列表长度</p>
<p>lrem：移除指定的值 第二个参数是移除的数量 lrm list 1 one 从头部开始移除</p>
<p>ltrim： ltrim list 0 3 只留下 下标0-3的元素</p>
<p>rpoplpush：rpoplpush list mylist  把list最右边的元素移除并添加到mylist中</p>
<p>lset：lset list [index] [new_value] 将指定下标的值替换为另一个</p>
<p>linsert：linsert list after/before “two” “world” 往two后面/前面插入world</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set中的值不能重复</p>
<p>sadd： 添加元素</p>
<p>smembers：查看集合中的元素</p>
<p>sismember：查看集合中是否有某个元素</p>
<p>scard：获取集合中的元素个数</p>
<p>srem：移除指定元素</p>
<p>srandmember：随机获取n个元素</p>
<p>spop：随机删除元素</p>
<p>smove：smove set1 set2 value1将指定值移动到另一个集合</p>
<p>sdiff：sdiff set1 set2查看set1中哪些元素set2中没有</p>
<p>sinter：两个集合的交集</p>
<p>sunion：两个集合的并集</p>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>存放的key是一个map</p>
<p>hset和hget：设置 获取元素 也有hmset和hmget</p>
<p>hdel：删除</p>
<p>hgetall：获取所有键值对</p>
<p>hlen：获取键值对数量</p>
<p>hkeys：只获取所有key</p>
<p>hvals：只获取所有value</p>
<p>hincrby ：hincrby hash age 5 </p>
<p>hsetnx</p>
<h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>是set的有序版本</p>
<p>zset：zset myset 1 bob </p>
<p>zrange</p>
<p>zrangebyscore：第二个和第三个参数指定范围 降序是zrevrangebyscore</p>
<p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202093438696.png" alt="image-20201202093438696"></p>
<p>zrem ：移除元素</p>
<p>zcard：获取有序集合中的个数</p>
<p>zcount：获取指定区间的成员数量</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>不保证原子性：Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p>
<p>没有隔离级别的概念</p>
<p>开启事务：multi</p>
<p>执行事务：exec</p>
<p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202100249565.png" alt="image-20201202100249565"></p>
<p>discard：取消事务 事务队列中的命令都不会被执行</p>
<p>​    <img src="/2020/12/01/redis/log\source_posts\redis\image-20201202100555522.png" alt="image-20201202100555522"></p>
<p>如果事务中出现编译型异常(代码有问题或者命令出错) 所有命令都不会执行 ，如果事务中出现运行时异常(get不存在的值) 其他命令可以正常执行</p>
<p><strong>redis实现乐观锁</strong></p>
<p>watch：监视一个元素 如果事务中有其他线程修改这个值 则事务执行失败 失败后可以使用unwatch取消监视 再次watch并开始事务</p>
<p>unwatch：取消所有的监视    </p>
<p>通过</p>
<h1 id="操作redis"><a href="#操作redis" class="headerlink" title="操作redis"></a>操作redis</h1><h2 id="通过jedis操作redis"><a href="#通过jedis操作redis" class="headerlink" title="通过jedis操作redis"></a>通过jedis操作redis</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.52.131&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;bob&quot;</span>);</span><br><span class="line">            multi.set(<span class="string">&quot;value2&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">            multi.get(<span class="string">&quot;value1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            multi.discard();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;value2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h2><p>引入依赖：spring-boot-starter-data-redis</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202104116611.png" alt="image-20201202104116611"></p>
<p>源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">      RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">      template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">      StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">      template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">      <span class="keyword">return</span> template;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Database index used by the connection factory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> database = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Connection URL. Overrides host, port, and password. User is ignored. Example:</span></span><br><span class="line"><span class="comment">    * redis://user:password@example.com:6379</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Redis server host.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String host = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Login password of the redis server.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Redis server port.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Whether to enable SSL support.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> ssl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Connection timeout.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Duration timeout;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Client name to be set on connections with CLIENT SETNAME.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> String clientName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Sentinel sentinel;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Cluster cluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushAll();</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">    String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义RedisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//配置具体的序列化方式</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><p>daemonize yes ：以守护进程的方式运行 默认是no 需要自己开启</p>
<p>pidfile /var/run/redis_6379.pid：如果以后台方式运行 需要制定pid文件</p>
<p>save 120 1：表示如果120s内至少有一条数据改动 则进行持久化</p>
<p>stop-writes-on-bgsave-error yes：持久化失败后 是否继续工作</p>
<p>rdbcompression yes：是否压缩rdb文件，需要消耗一些cpu资源</p>
<p>rdbchechsum yes：保存rdb文件的时候 进行错误的校验</p>
<p>dir ./：文件的保存目录 </p>
<p>maxclients：设置能连接上redis的最大客户端数</p>
<p>maxmemory：配置最大的内存容量</p>
<p>aof配置</p>
<p>​    appendonly  no ：默认不开启</p>
<p>​    appendfilename：持久化的文件名</p>
<p>​    appendfsync everysec：每秒执行 一次 同步 这1s可能会丢失数据</p>
<h1 id="持久化之RDB操作"><a href="#持久化之RDB操作" class="headerlink" title="持久化之RDB操作"></a>持久化之RDB操作</h1><p>流程：</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202233309973.png" alt="image-20201202233309973"></p>
<p>在指定时间间隔内将内存中的数据集快照写入磁盘，恢复时将快照文件直接读到内存中</p>
<p>Redis会单独创建 ( fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<p>触发机制：默认生成dump.rdb文件</p>
<ul>
<li>save的规则 满足的情况下 会自动触发rdb规则</li>
<li>执行flushdb命令时 会触发</li>
<li>退出redis 也会触发</li>
</ul>
<p>只需要将rdb文件放入到redis启动目录就行 redis启动的时候自动检查dump.rdb并回复其中的数据</p>
<p>通过命令 config get dir查看启动目录</p>
<h1 id="持久化之AOF操作"><a href="#持久化之AOF操作" class="headerlink" title="持久化之AOF操作"></a>持久化之AOF操作</h1><p>流程：</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201202234131430.png" alt="image-20201202234131430"></p>
<p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<p>Aof保存的是appendonely.aof文件 </p>
<p>默认是不开启的 需要手动开启</p>
<p>如果aof文件被修改 就会启动失败 可以进行修复redis-check-aof –fix appendonly.aof</p>
<p>优点</p>
<ul>
<li>每一个修改都会同步，文件完整性会更好</li>
<li>每秒同步一次，可能会丢失一秒的数据</li>
</ul>
<p>缺点</p>
<ul>
<li>aof数据文件远大于rdb 修复数据较慢</li>
<li>aof运行速率较慢</li>
</ul>
<p>如果aof大小超过了默认配置，会fork一个新的线程来将我们的文件进行重写，这里重写是为了将aof文件变得更小，降低文件占用空间，以便更快的被redis加载</p>
<p><strong>同时开启两种持久化方式</strong></p>
<ul>
<li>·在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢?作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li>
</ul>
<p><strong>性能建议</strong></p>
<ul>
<li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 9001这条规则。</li>
<li>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite的最后将 rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li>
<li>如果不Enable AOF，仅靠Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave 中的RDB文件，载入较新的那个，微博就是这种架构。</li>
</ul>
<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p><strong>流程</strong></p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203001310583.png" alt="image-20201203001310583"></p>
<p><strong>命令</strong></p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203001635483.png" alt="image-20201203001635483"></p>
<p><strong>测试</strong>：创建两个redis连接 一个订阅subscribe diantai 一个推送消息publish diantai hello </p>
<p><strong>底层实现</strong></p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203002602416.png" alt="image-20201203002602416"></p>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>数据的复制是单向的 只能从主机复制到从机 主节点可以有多个从节点 一个从节点只能由一个主节点</p>
<p>设置主人：slaveof ip port  (建议在配置文件中进行配置)  查看信息：info replication</p>
<p>从机不能写 只能读 主机中的信息和数据会自动保存到从机中</p>
<p><strong>复制原理</strong></p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203083755766.png" alt="image-20201203083755766"></p>
<p><strong>哨兵模式</strong></p>
<p>哨兵是一个独立的进程 ，作为进程 他会独立运行，其原理是哨兵通过发送命令，等待redis服务器响应，从而监控运行的多个redis实例</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203084635501.png" alt="image-20201203084635501"></p>
<p>当哨兵监控到master宕机 会自动将slave切换成master 然后通过发布订阅通知通知其他从服务器 修改配置文件 让他们切换主机</p>
<p>一个哨兵可能会出现问题 使用多个哨兵进行监控</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203084841536.png" alt="image-20201203084841536"></p>
<p>主观下线和客观下线</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203090416317.png" alt="image-20201203090416317"></p>
<p>配置哨兵配置文件sentinel.conf</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sentinel monitor myredis<span class="built_in"> ip port </span>1 #最后一个参数 是否进行重新投票</span><br></pre></td></tr></table></figure>

<p>启动哨兵：redis-sentinel /config/sentinel.conf</p>
<p>当主机宕机的时候 会自动挑选一个从机作为主机 宕机的主机修复后成为从机</p>
<h1 id="缓存穿透和雪崩"><a href="#缓存穿透和雪崩" class="headerlink" title="缓存穿透和雪崩"></a>缓存穿透和雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h2><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀!），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>
<p><strong>解决方法</strong></p>
<p><strong>布隆过滤器</strong>：是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合就舍弃，从而避免了对底层存储系统的查询压力</p>
<p><strong>缓存空对象</strong>：当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p>
<p><img src="/2020/12/01/redis/log\source_posts\redis\image-20201203094734020.png" alt="image-20201203094734020"></p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h2><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>
<p><strong>解决方案</strong></p>
<p>设置热点数据永不过期</p>
<p>加互斥锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h2><p>缓存雪崩是指在某一时间段，缓存集中过期失效，redis宕机</p>
<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>
<p><strong>解决方案</strong></p>
<p>高可用：搭建集群</p>
<p>限流降级：缓存失效后，通过加锁或队列来控制数据库写缓存的线程数量</p>
<p>数据预热：数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题总结</title>
    <url>/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>七层协议 五层协议 四层协议</strong> </p>
<p>应用层：通过应用进程之间的交互完成特定的网络应用</p>
<p><strong>运输层</strong>：为两台计算机之间进程的通信提供通用的数据传输服务</p>
<p>网络层：计算机网络中进行通讯的两个计算机之间的有很多数据链路和通讯子网，网络层负责找到合适的网间路由和链路节点，确保数据及时传输</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a><strong>三次握手</strong></h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210123145701309.png" alt="image-20210123145701309"></p>
<p><strong>为什么需要三次握手</strong></p>
<p>三次握手的最主要目的是保证连接是双工的，可靠更多的是通过重传机制来保证的。为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次握手。</p>
<p><strong>第2次握手传回了ACK，为什么还要传回SYN？</strong></p>
<p>接收端传回发送端所发送的ACK是为了告诉客户端，我接收到的信息确实就是你所发送的信号了，这表明从客户端到服务端的通信是正常的。而回传SYN则是为了建立并确认从服务端到客户端的通信</p>
<p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。 ACK(Acknowledgement）</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭</p>
<p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210123150815077.png" alt="image-20210123150815077"></p>
<p><strong>为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</strong></p>
<p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建连请求后，它可以把 ACK 和 SYN（ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的 FIN 报文通知时，它仅仅表示对方没有数据发送给你了，但是你还可以给对方发送数据，也有这么种可能，你还有一些数据在传给对方的途中，所以你不能立马关闭连接,也即你可能还需要把在传输途中的数据给对方之后，又或者，你还有一些数据需要传输给对方后，（再关闭连接）再发送FIN 报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN 报文多数情况下都是分开发送的。</p>
<p><strong>为什么 TIME_WAIT 状态还需要等 2MSL（Maximum Segment Lifetime）后才能返回到 CLOSED 状态？</strong></p>
<p>因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文</p>
<p><strong>如果已经建立了连接，但是客户端突然出现故障了怎么办？</strong></p>
<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
<h2 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210124134700276.png" alt="image-20210124134700276"></p>
<h2 id="tcp协议如何保证可靠传输"><a href="#tcp协议如何保证可靠传输" class="headerlink" title="tcp协议如何保证可靠传输"></a>tcp协议如何保证可靠传输</h2><ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块并为每一个包进行编号，接收方对数据包进行排序，丢弃重复的数据，把有序数据传送给应用层。</li>
<li><strong>校验和：</strong> TCP 将保持它首部和数据的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li><strong>流量控制：</strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP发送端不允许发送超过接收端缓冲区大小的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 利用滑动窗口实现流量控制。</li>
<li><strong>拥塞控制：</strong> 当网络拥塞时，减少数据的发送。</li>
<li><strong>ARQ协议：</strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li><strong>超时重传：</strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>
</ol>
<h2 id="ARQ协议"><a href="#ARQ协议" class="headerlink" title="ARQ协议"></a>ARQ协议</h2><p><strong>自动重传请求</strong>（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ包括停止等待ARQ协议和连续ARQ协议。</p>
<h3 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85arq%E5%8D%8F%E8%AE%AE">停止等待ARQ协议</a></h3><ul>
<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；</li>
<li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li>
</ul>
<p><strong>优点：</strong> 简单</p>
<p><strong>缺点：</strong> 信道利用率低，等待时间长</p>
<p><strong>1) 无差错情况:</strong></p>
<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>
<p><strong>2) 出现差错情况（超时重传）:</strong></p>
<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong> 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>
<p><strong>3) 确认丢失和确认迟到</strong></p>
<ul>
<li><strong>确认丢失</strong> ：确认消息在传输过程丢失。当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li>
<li><strong>确认迟到</strong> ：确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。</li>
</ul>
<h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a><a href="https://snailclimb.gitee.io/javaguide/#/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=%E8%BF%9E%E7%BB%ADarq%E5%8D%8F%E8%AE%AE">连续ARQ协议</a></h3><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<p><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</p>
<p><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p><a href="https://blog.csdn.net/qq_41431406/article/details/97926927">https://blog.csdn.net/qq_41431406/article/details/97926927</a></p>
<h2 id="从输入url到页面加载完成发生了什么"><a href="#从输入url到页面加载完成发生了什么" class="headerlink" title="从输入url到页面加载完成发生了什么"></a>从输入url到页面加载完成发生了什么</h2><p><a href="https://www.cnblogs.com/liutianzeng/p/10456865.html">https://www.cnblogs.com/liutianzeng/p/10456865.html</a></p>
<h2 id="同源策略和跨域"><a href="#同源策略和跨域" class="headerlink" title="同源策略和跨域"></a>同源策略和跨域</h2><p>同源策略：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong></p>
<p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源</p>
<p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>
<p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是*<strong>*浏览器施加的**</strong>安全限制。</p>
<p>跨域解决方法</p>
<p>例如<a href="http://www.123.com/index.html%E9%9C%80%E8%A6%81%E8%B0%83%E7%94%A8www.456.com/server.php%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%86%99%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3www.123.com/server.php%EF%BC%8C%E7%94%B1%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%9C%A8%E5%90%8E%E7%AB%AF%E5%8E%BB%E8%B0%83%E7%94%A8www.456.com/server.php%E5%B9%B6%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E8%BF%94%E5%9B%9E%E7%BB%99index.html%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%90%86%E7%9A%84%E6%A8%A1%E5%BC%8F%E3%80%82%E7%9B%B8%E5%BD%93%E4%BA%8E%E7%BB%95%E8%BF%87%E4%BA%86%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF%EF%BC%8C%E8%87%AA%E7%84%B6%E5%B0%B1%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E3%80%82">www.123.com/index.html需要调用www.456.com/server.php，可以写一个接口www.123.com/server.php，由这个接口在后端去调用www.456.com/server.php并拿到返回值，然后再返回给index.html，这就是一个代理的模式。相当于绕过了浏览器端，自然就不存在跨域问题。</a></p>
<h2 id="长连接和短链接"><a href="#长连接和短链接" class="headerlink" title="长连接和短链接"></a>长连接和短链接</h2><p><a href="https://www.cnblogs.com/gotodsp/p/6366163.html">https://www.cnblogs.com/gotodsp/p/6366163.html</a></p>
<h2 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h2><p><a href="https://blog.csdn.net/qq_28296925/article/details/80921585">https://blog.csdn.net/qq_28296925/article/details/80921585</a></p>
<h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><p>URI是：协议+主机（不含端口）+具体路径（不一定含文件）；URL是：协议+主机（默认是80，或是别的端口）+具体文件路径（还必须是对应到路径下面的具体文件名称）。所以URI是粗框架，URL是详细定位。。。比如URI：<a href="http://www.123.com/123/%EF%BC%8C%E8%AF%A5%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%8F%AF%E8%83%BD%E6%9C%89index.html%E5%92%8Cindex.htm%EF%BC%88%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%89%E3%80%82%E3%80%82%E3%80%82%E6%AF%94%E5%A6%82URL:http://www.123.com/123/index.html%EF%BC%88%E5%94%AF%E4%B8%80%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%89">http://www.123.com/123/，该目录下可能有index.html和index.htm（两个文件）。。。比如URL:http://www.123.com/123/index.html（唯一的文件）</a></p>
<h2 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h2><ol>
<li><p><strong>端口</strong> ：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</p>
</li>
<li><p>安全性和资源消耗：</p>
<p>HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。</p>
<ul>
<li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li>
<li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li>
</ul>
</li>
</ol>
<h2 id="带宽和吞吐量"><a href="#带宽和吞吐量" class="headerlink" title="带宽和吞吐量"></a>带宽和吞吐量</h2><p>两者的单位都是Mbps.当我们讨论通信链路的带宽时，一般是指链路上每秒所能传送的<a href="http://baike.baidu.com/view/3021024.htm">比特数</a>，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。我们可以说<a href="http://baike.baidu.com/view/848.htm">以太网</a>的带宽是10Mbps。但是，我们需要区分链路上的可用带宽（带宽）与实际链路中每秒所能传送的比特数（吞吐量）。我们倾向于用“吞吐量”一次来表示一个系统的测试性能。这样，因为实现受各种低效率因素的影响，所以由一段带宽为10Mbps的链路连接的一对节点可能只达到2Mbps的吞吐量。这样就意味着，一个主机上的应用能够以2Mbps的速度向另外的一个主机发送数据。</p>
<h2 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h2><p>A类地址(1~126)：网络号占前8位，以0开头，主机号占后24位。</p>
<p>B类地址(128~191)：网络号占前16位，以10开头，主机号占后16位。</p>
<p>C类地址(192~223)：网络号占前24位，以110开头，主机号占后8位。</p>
<p>D类地址(224~239)：以1110开头，保留位多播地址。</p>
<p>E类地址(240~255)：以1111开头，保留位今后使用。</p>
<h2 id="客户端不断进行请求链接会怎样？DDos-Distributed-Denial-of-Service-攻击？"><a href="#客户端不断进行请求链接会怎样？DDos-Distributed-Denial-of-Service-攻击？" class="headerlink" title="客户端不断进行请求链接会怎样？DDos(Distributed Denial of Service)攻击？"></a>客户端不断进行请求链接会怎样？DDos(Distributed Denial of Service)攻击？</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210126124355659.png" alt="image-20210126124355659"></p>
<h2 id="Get与POST的区别"><a href="#Get与POST的区别" class="headerlink" title="Get与POST的区别"></a>Get与POST的区别</h2><p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210126124446349.png" alt="image-20210126124446349"></p>
<h2 id="网络层的ARP协议工作原理"><a href="#网络层的ARP协议工作原理" class="headerlink" title="网络层的ARP协议工作原理"></a>网络层的ARP协议工作原理</h2><p>网络层的ARP协议完成了IP地址与物理地址的映射。首先，每台主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己ARP列表中是否存在该IP地址对应的MAC地址：如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p>
<h2 id="物理层的三个基本问题"><a href="#物理层的三个基本问题" class="headerlink" title="物理层的三个基本问题"></a>物理层的三个基本问题</h2><p><strong>封装成帧</strong>：在一段数据前后添加首部和尾部，其中包含控制信息 还起到帧定界的功能</p>
<p><img src="/2021/01/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/log\source_posts\面试题总结\image-20210127140125472.png" alt="image-20210127140125472"></p>
<ul>
<li>mtu：最大传送单元</li>
</ul>
<p><strong>透明传输</strong>：如果数据中出现像SOH，EOT这样的帧定界控制字符，使用转义符进行转移，接收端收到数据后再去掉转义符</p>
<p><strong>差错检测</strong>：<strong>使用循环冗余检测传输过程中是否有差错</strong></p>
<h2 id="粘包、拆包解决办法"><a href="#粘包、拆包解决办法" class="headerlink" title="粘包、拆包解决办法"></a><strong>粘包、拆包解决办法</strong></h2><ul>
<li><strong>消息定长：</strong>发送端将每个数据包封装为固定长度（不够的可以通过补 0 填充），这样接收端每次接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</li>
<li><strong>设置消息边界：</strong>服务端从网络流中按消息边界分离出消息内容。在包尾增加回车换行符进行分割，例如 FTP 协议。</li>
<li><strong>将消息分为消息头和消息体：</strong>消息头中包含表示消息总长度（或者消息体长度）的字段。</li>
<li>更复杂的应用层协议比如 Netty 中实现的一些协议都对粘包、拆包做了很好的处理。</li>
</ul>
<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="netty是什么-应用场景有哪些"><a href="#netty是什么-应用场景有哪些" class="headerlink" title="netty是什么?应用场景有哪些?"></a>netty是什么?应用场景有哪些?</h2><p>Netty 是一款基于 NIO开发的网络通信框架，对比于 BIO，他的并发性能得到了很大提高</p>
<p>Netty 主要用来做网络通信 :作为 RPC 框架的网络通信工具,实现一个自己的 HTTP 服务器,实现一个即时通讯系统 ,实现消息推送系统</p>
<h2 id="netty核心类"><a href="#netty核心类" class="headerlink" title="netty核心类"></a>netty核心类</h2><p>Bootstrap,</p>
<p>ChannelFuture：Netty 框架中所有的 I/O 操作都为异步的，因此我们需要 ChannelFuture 的 addListener()注册一个 ChannelFutureListener 监听事件，当操作执行成功或者失败时，监听就会自动触发返回结果。</p>
<p>Channel，</p>
<p>ChannelHandler：充当了所有处理入站和出站数据的逻辑容器。ChannelHandler 主要用来处理各种事件</p>
<p>ChannelPipeline：为 ChannelHandler 链提供了容器，当 channel 创建时，就会被自动分配到它专属的 ChannelPipeline</p>
<p>EventLoop：主要是配合 Channel 处理 I/O 操作，用来处理连接的生命周期中所发生的事情</p>
<h2 id="Netty-的特点是什么"><a href="#Netty-的特点是什么" class="headerlink" title="Netty 的特点是什么"></a>Netty 的特点是什么</h2><p>高并发：Netty 是一款基于 NIO（Nonblocking IO，非阻塞IO）开发的网络通信框架，对比于 BIO（Blocking I/O，阻塞IO），他的并发性能得到了很大提高。</p>
<p>传输快：Netty 的传输依赖于零拷贝特性，尽量减少不必要的内存拷贝，实现了更高效率的传输。</p>
<p>封装好：Netty 封装了 NIO 操作的很多细节，提供了易于使用调用接口。</p>
<h2 id="Netty-的零拷贝实现？"><a href="#Netty-的零拷贝实现？" class="headerlink" title="Netty 的零拷贝实现？"></a>Netty 的零拷贝实现？</h2><ul>
<li>Netty的接收和发送ByteBuffer采用DIRECT BUFFERS，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。堆内存多了一次内存拷贝，JVM会将堆内存Buffer拷贝一份到直接内存中，然后才写入Socket中。ByteBuffer由ChannelConfig分配，而ChannelConfig创建ByteBufAllocator默认使用Direct Buffer</li>
<li>CompositeByteBuf 类可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf, 避免了传统通过内存拷贝的方式将几个小Buffer合并成一个大的Buffer。addComponents方法将 header 与 body 合并为一个逻辑上的 ByteBuf, 这两个 ByteBuf 在CompositeByteBuf 内部都是单独存在的, CompositeByteBuf 只是逻辑上是一个整体</li>
<li>通过 FileRegion 包装的FileChannel.tranferTo方法 实现文件传输, 可以直接将文件缓冲区的数据发送到目标 Channel，避免了传统通过循环write方式导致的内存拷贝问题。</li>
<li>通过 wrap方法, 我们可以将 byte[] 数组、ByteBuf、ByteBuffer等包装成一个 Netty ByteBuf 对象, 进而避免了拷贝操作。</li>
<li>Selector BUG：若Selector的轮询结果为空，也没有wakeup或新消息处理，则发生空轮询，CPU使用率100%，</li>
<li>Netty的解决办法：对Selector的select操作周期进行统计，每完成一次空的select操作进行一次计数，若在某个周期内连续发生N次空轮询，则触发了epoll死循环bug。重建Selector，判断是否是其他线程发起的重建请求，若不是则将原SocketChannel从旧的Selector上去除注册，重新注册到新的Selector上，并将原来的Selector关闭。</li>
</ul>
<h2 id="默认情况-Netty-起多少线程？何时启动？"><a href="#默认情况-Netty-起多少线程？何时启动？" class="headerlink" title="默认情况 Netty 起多少线程？何时启动？"></a><strong>默认情况 Netty 起多少线程？何时启动？</strong></h2><p>Netty 默认是 CPU 处理器数的两倍，bind 完之后启动。</p>
<h2 id="Netty-支持哪些心跳类型设置？"><a href="#Netty-支持哪些心跳类型设置？" class="headerlink" title="Netty 支持哪些心跳类型设置？"></a>Netty 支持哪些心跳类型设置？</h2><p>readerIdleTime：为读超时时间（即测试端一定时间内未接受到被测试端消息）。</p>
<p>writerIdleTime：为写超时时间（即测试端一定时间内向被测试端发送消息）。</p>
<p>allIdleTime：所有类型的超时时间。</p>
<h2 id="TCP-粘包-拆包的原因及解决方法？"><a href="#TCP-粘包-拆包的原因及解决方法？" class="headerlink" title="TCP 粘包/拆包的原因及解决方法？"></a><strong>TCP 粘包/拆包的原因及解决方法？</strong></h2><ul>
<li>TCP是以流的方式来处理数据，一个完整的包可能会被TCP拆分成多个包进行发送，也可能把小的封装成一个大的数据包发送。</li>
<li>TCP粘包/分包的原因：<ul>
<li>应用程序写入的字节大小大于套接字发送缓冲区的大小，会发生拆包现象，而应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包现象；</li>
<li>进行MSS大小的TCP分段，当TCP报文长度-TCP头部长度&gt;MSS的时候将发生拆包</li>
<li>以太网帧的payload（净荷）大于MTU（1500字节）进行ip分片。</li>
</ul>
</li>
<li>解决方法<ul>
<li>消息定长：FixedLengthFrameDecoder类</li>
<li>包尾增加特殊字符分割：行分隔符类：LineBasedFrameDecoder或自定义分隔符类 ：DelimiterBasedFrameDecoder</li>
<li>将消息分为消息头和消息体：LengthFieldBasedFrameDecoder类。分为有头部的拆包与粘包、长度字段在前且有头部的拆包与粘包、多扩展头部的拆包与粘包。</li>
</ul>
</li>
</ul>
<h2 id="Netty-发送消息有几种方式？"><a href="#Netty-发送消息有几种方式？" class="headerlink" title="Netty 发送消息有几种方式？"></a>Netty 发送消息有几种方式？</h2><p>Netty 有两种发送消息的方式：</p>
<ul>
<li>直接写入 Channel 中，消息从 ChannelPipeline 当中尾部开始移动；</li>
<li>写入和 ChannelHandler 绑定的 ChannelHandlerContext 中，消息从 ChannelPipeline 中的下一个 ChannelHandler 中移动。</li>
</ul>
<h2 id="Netty-和-Tomcat-的区别"><a href="#Netty-和-Tomcat-的区别" class="headerlink" title="Netty 和 Tomcat 的区别"></a>Netty 和 Tomcat 的区别</h2><ul>
<li>作用不同：Tomcat 是 Servlet 容器，可以视为 Web 服务器，而 Netty 是异步事件驱动的网络应用程序框架和工具用于简化网络编程，例如TCP和UDP套接字服务器。</li>
<li>协议不同：Tomcat 是基于 http 协议的 Web 服务器，而 Netty 能通过编程自定义各种协议，因为 Netty 本身自己能编码/解码字节流，所有 Netty 可以实现，HTTP 服务器、FTP 服务器、UDP 服务器、RPC 服务器、WebSocket 服务器、Redis 的 Proxy 服务器、MySQL 的 Proxy 服务器等等。</li>
</ul>
<h2 id="Netty的线程模型？"><a href="#Netty的线程模型？" class="headerlink" title="Netty的线程模型？"></a><strong>Netty的线程模型？</strong></h2><p>Netty通过Reactor模型基于多路复用器接收并处理用户请求，内部实现了两个线程池，boss线程池和work线程池，其中boss线程池的线程负责处理请求的accept事件，当接收到accept事件的请求时，把对应的socket封装到一个NioSocketChannel中，并交给work线程池，其中work线程池负责请求的read和write事件，由对应的Handler处理。</p>
<h2 id="同步与异步、阻塞与非阻塞的区别？"><a href="#同步与异步、阻塞与非阻塞的区别？" class="headerlink" title="同步与异步、阻塞与非阻塞的区别？"></a>同步与异步、阻塞与非阻塞的区别？</h2><p>同步：发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。例如普通B/S模式（同步）：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事。</p>
<p>异步：当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p>
<p>阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回,它还会抢占cpu去执行其他逻辑，也会主动检测io是否准备好。</p>
<p>非阻塞：指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p>
<h2 id="select、poll、epoll之间的区别"><a href="#select、poll、epoll之间的区别" class="headerlink" title="select、poll、epoll之间的区别"></a>select、poll、epoll之间的区别</h2><p>(1)select==&gt;时间复杂度O(n)</p>
<p>它仅仅知道了，有I/O事件发生了，却并不知道是哪几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以<strong>select具有O(n)的无差别轮询复杂度</strong>，同时处理的流越多，无差别轮询时间就越长。</p>
<p>(2)poll==&gt;时间复杂度O(n)</p>
<p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态， <strong>但是它没有最大连接数的限制</strong>，原因是它是基于链表来存储的.</p>
<p>(3)epoll==&gt;时间复杂度O(1)</p>
<p><strong>epoll可以理解为event poll</strong>，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是<strong>事件驱动（每个事件关联上fd）</strong>的，此时我们对这些流的操作都是有意义的。<strong>（复杂度降低到了O(1)）</strong></p>
<p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。 </p>
<h2 id="netty执行流程"><a href="#netty执行流程" class="headerlink" title="netty执行流程"></a>netty执行流程</h2><ol>
<li>创建ServerBootStrap实例</li>
<li>设置并绑定Reactor线程池：EventLoopGroup，EventLoop就是处理所有注册到本线程的Selector上面的Channel</li>
<li>设置并绑定服务端的channel</li>
<li>创建处理网络事件的ChannelPipeline和handler，网络时间以流的形式在其中流转，handler完成多数的功能定制：比如编解码 SSl安全认证</li>
<li>绑定并启动监听端口</li>
<li>当轮训到准备就绪的channel后，由Reactor线程：NioEventLoop执行pipline中的方法，最终调度并执行channelHandler</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>netty</title>
    <url>/2020/12/10/netty/</url>
    <content><![CDATA[<h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p><strong>介绍</strong></p>
<p>BIO(同步阻塞IO模式):服务器实现模式为 一个连接对应一个线程，即客户端有连接请求时服务端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</p>
<p>适用于连接数目较少且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中</p>
<p><strong>工作流程</strong></p>
<ul>
<li>服务端启动一个ServerSocket</li>
<li>客户端启动socket对服务器进行通信，默认情况下服务器需要对每个客户 建立一个线程与之通讯</li>
<li>客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝</li>
<li>如果有响应，客户端线程会等待请求结束后，再继续执行</li>
</ul>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201211180810904.png" alt="，"></p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newCachedThreadPool();</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            pool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getId());</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = inputStream.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在linux中进行连接：<code>telnet 192.168.52.1 6666</code></p>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO(同步非阻塞IO模式):服务器实现模式为一个线程处理多个请求(连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接时如果有IO请求就进行处理</p>
<p>适用于连接数目较多且连接比较短的架构 </p>
<p>AIO适合连接数目多且连接比较长的架构</p>
<p>三大核心：selector-&gt;channel-&gt;buffer</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212231552096.png" alt="image-20201212231552096"></p>
<p>一个selector对应一个线程，buffer和channel之间是双向绑定的 客户端只能和buffer进行交互</p>
<h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>缓冲区本质是一个可以读写数据的内存块</p>
<p><strong>类型</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233528926.png" alt="image-20201212233528926"></p>
<p><strong>方法</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233156593.png" alt="image-20201212233156593"></p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntBuffer buffer = IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;buffer.capacity();i++)&#123;</span><br><span class="line">            buffer.put(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读写转换</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(buffer.mark());</span><br><span class="line">            System.out.println(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/woshijpf/articles/3723364.html">java.nio.Buffer flip()方法的用法详解</a></p>
<p><strong>ByteBuffer(二进制数据)</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201212233406121.png" alt="image-20201212233406121"></p>
<p>ByteBuffer支持类型化的put和int  put什么类型就应该get什么类型 不然会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数是bytes</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">20</span>);</span><br><span class="line">    byteBuffer.putInt(<span class="number">4</span>);</span><br><span class="line">    byteBuffer.putLong(<span class="number">5L</span>);</span><br><span class="line">    </span><br><span class="line">	byteBuffer.flip();</span><br><span class="line">    </span><br><span class="line">    byteBuffer.getInt();</span><br><span class="line">    byteBuffer.getLong();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将一个buffer转换成只读的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">    byteBuffer.putInt(<span class="number">4</span>);</span><br><span class="line">    byteBuffer.putLong(<span class="number">5L</span>);</span><br><span class="line"></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    ByteBuffer readOnlyBuffer =  byteBuffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(readOnlyBuffer.hasRemaining())&#123;</span><br><span class="line">        System.out.println(readOnlyBuffer.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MappedByteBuffer可以直接在堆外内存中修改文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\data\\test.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maps a region of this channel&#x27;s file directly into memory.</span></span><br><span class="line"><span class="comment">     * 参数1:文件以什么模式被映射到内存</span></span><br><span class="line"><span class="comment">     * 参数2:The position within the file at which the mapped region is to star</span></span><br><span class="line"><span class="comment">     * 参数3:The size of the region to be map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    mappedByteBuffer.put(<span class="number">0</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    mappedByteBuffer.put(<span class="number">2</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    randomAccessFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>buffer的分散和聚集：通过多个buffer完成读写操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGathering</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Scattering:将数据依次写入到buffer</span></span><br><span class="line">    <span class="comment">//Gathering:将数据依次从buffer中读取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line">        <span class="comment">//绑定端口到socket并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建buffer数据</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> byteWrite = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(byteRead &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> n = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead += n;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead=&quot;</span>+byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers).stream().map(buffer-&gt; <span class="string">&quot;position=&quot;</span>+buffer.position()+<span class="string">&quot;, limit&quot;</span>+buffer.limit()).forEach(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(byteWrite &lt; messageLength)&#123;</span><br><span class="line">                <span class="keyword">long</span> n = socketChannel.write(byteBuffers);</span><br><span class="line">                byteWrite += n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Arrays.asList(byteBuffers).forEach(buffer -&gt;buffer.clear());</span><br><span class="line">            System.out.println(<span class="string">&quot;byteWrite=&quot;</span>+byteWrite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>类似于流 但是可以同时进行读写 可以实现异步读写数据 可以从缓冲读数据 也可以写数据到缓冲</p>
<p>常见的channel有：FileChannel(用于文件读写),DatagramChannel(用于UDP的数据读写),ServerSocketChannel,SockerChannel(TCP数据读写)</p>
<p><strong>FileChannel类的常用方法</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201213001353087.png" alt="image-20201213001353087"></p>
<p>读文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">int</span> len = (<span class="keyword">int</span>) file.length();</span><br><span class="line">        ByteBuffer.allocate(len);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(len);</span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(byteBuffer.array(),<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(message.length());</span><br><span class="line">        byteBuffer.put(message.getBytes());</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel.write(byteBuffer);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读写文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用一个buffer完成文件读取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadAndBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//copy test.txt to test2.txt</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel readChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test2.txt&quot;</span>);</span><br><span class="line">        FileChannel writeChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">            len = readChannel.read(byteBuffer);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            writeChannel.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用transferFrom直接拷贝文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\data\\test.txt&quot;</span>);</span><br><span class="line">        FileChannel readChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\data\\test2.txt&quot;</span>);</span><br><span class="line">        FileChannel writeChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        writeChannel.transferFrom(readChannel,<span class="number">0</span>,readChannel.size());</span><br><span class="line"></span><br><span class="line">        readChannel.close();</span><br><span class="line">        writeChannel.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>selector执行select的方法时会获取到所有selectionkey，可以通过selectionkey知道当前的channel发生了什么事件 从而去操作相关的channel</p>
<p><strong>常用方法</strong></p>
<ul>
<li>open：得到一个选择器对象</li>
<li>select：监控所有注册的通道，当其中有io操作可以进行时，将对应的selectionKey加入到内部集合中并返回。该方法不带参数的时候  当没有事件时会阻塞 带参数的时候 可以设置超时时间，selectNow立即获取selectionkey不进行等待</li>
<li>selectedKeys：从内部集合中得到所有的selectionkey</li>
<li>wakeup：唤醒selector</li>
</ul>
<p><strong>Selector，SelectionKey，SocketChannel，ServerSocketChannel之间的关系</strong></p>
<ul>
<li>当客户端连接时，会通过ServerSocketChannel得到SocketChannel</li>
<li>selector通过select方法 返回有事件发生的通道个数</li>
<li>将SocketChannel通过register方法注册到Selector上，一个selector可以注册多个channel</li>
<li>注册后返回一个SelectionKey，会和Selector关联</li>
<li>进一步得到各个SelectionKey(有事件发生的)</li>
<li>再通过SelectionKey反向获取SocketChannel</li>
<li>通过得到的channel完成业务处理</li>
</ul>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20201228190103175.png" alt="image-20201228190103175"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">//绑定端口</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">6666</span>));</span><br><span class="line">		<span class="comment">//设置为非堵塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//把serverSocketChannel注册到selector</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(selector.select(<span class="number">1000</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;等待了1s,无连接&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                SelectionKey next = iterator.next();</span><br><span class="line">                <span class="comment">//如果有新的客户端连接</span></span><br><span class="line">                <span class="keyword">if</span>(next.isAcceptable())&#123;</span><br><span class="line">                    <span class="comment">//为该客户端生成一个SocketChannel</span></span><br><span class="line">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                    <span class="comment">//将socketChannel注册到selector关注事件为write 并关联一个buffer 这个buffer是位于selector和SocketChannel之间的</span></span><br><span class="line">                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(next.isReadable())&#123;</span><br><span class="line">                    SocketChannel socketChannel = (SocketChannel)next.channel();</span><br><span class="line">                    <span class="comment">//获取channel关联的buffer</span></span><br><span class="line">                    ByteBuffer byteBuffer = (ByteBuffer) next.attachment();</span><br><span class="line">                    socketChannel.read(byteBuffer);</span><br><span class="line">                    System.out.println(<span class="string">&quot;from客户端:&quot;</span>+<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//移除当前selectionKey 防止多线程重复操作</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="comment">//如果链接不成功</span></span><br><span class="line">        <span class="keyword">if</span>(!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">            <span class="keyword">while</span>(!socketChannel.finishConnect())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;因为连接需要时间 客户端不会阻塞 我可以做其他工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="comment">//根据字节数组大小生成buffer</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(s.getBytes());</span><br><span class="line"></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SelectionKey定义的四种事件：<a href="https://www.cnblogs.com/liuxiuhao/p/5785027.html">https://www.cnblogs.com/liuxiuhao/p/5785027.html</a></p>
<h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p><a href="https://blog.csdn.net/weixin_37782390/article/details/103833306">sendfile和mmap的区别以及什么是零拷贝</a></p>
<p>nio实现零拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroCopyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7001</span>);</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket socket = serverSocketChannel.socket();</span><br><span class="line">        socket.bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(-<span class="number">1</span> != readCount)&#123;</span><br><span class="line">                socketChannel.read(byteBuffer);</span><br><span class="line">                <span class="comment">//倒带:position = 0 清除mark</span></span><br><span class="line">                byteBuffer.rewind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZeroCopyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        String filename = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(filename).getChannel();</span><br><span class="line">        <span class="comment">//linux:一次transferTo方法就可以完成传输</span></span><br><span class="line">        <span class="comment">//windows: 一次transferTo只能传输8m</span></span><br><span class="line">        <span class="keyword">long</span> count = fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line">        fileChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><h2 id="传统阻塞IO服务模型"><a href="#传统阻塞IO服务模型" class="headerlink" title="传统阻塞IO服务模型"></a>传统阻塞IO服务模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141453740.png" alt="image-20210103141453740"></p>
<h2 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141349608.png" alt="image-20210103141349608"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141723787.png" alt="image-20210103141723787"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103141852408.png" alt="image-20210103141852408"></p>
<p>根据Reactor的数量和处理资源池线程的数量不同 实现可以分为三种</p>
<ul>
<li>单Reactor单线程</li>
<li>单Reactor多线程</li>
<li>主从Reactor多线程</li>
</ul>
<h3 id="单Reactor单线程模式"><a href="#单Reactor单线程模式" class="headerlink" title="单Reactor单线程模式"></a>单Reactor单线程模式</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103142745489.png" alt="image-20210103142745489"></p>
<p>前面的NIO群聊系统就是这种类型</p>
<p>优缺点分析</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103142901882.png" alt="image-20210103142901882"></p>
<h3 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103143433032.png" alt="image-20210103143433032"></p>
<p>优缺点</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103144843844.png" alt="image-20210103144843844"></p>
<h3 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103144856459.png" alt="image-20210103144856459"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210103145238171.png" alt="image-20210103145238171"></p>
<p>netty就是基于这种模型</p>
<h2 id="netty模型"><a href="#netty模型" class="headerlink" title="netty模型"></a>netty模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210105203951914.png" alt="image-20210105203951914"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210105205010494.png" alt="image-20210105205010494"></p>
<ul>
<li>该图中WorkerGroup中的NioEventGroup应为NioEventLoop</li>
<li>每个NioEventLoop都有一个selector 用于监听绑定在其上的多个socket网络通道（channel） 还包含一个taskQueue</li>
<li>每个NioChannel只会绑定再唯一的NioEventLoop上 每个NioChannel都绑定有一个自己的ChannelPipeline</li>
<li>NioEventLoop串行化执行 读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送</li>
</ul>
<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="入门实例"><a href="#入门实例" class="headerlink" title="入门实例"></a>入门实例</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个线程组</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup含有的子线程(NioEventLoop)的个数默认为cpu核心线程数 * 2</span></span><br><span class="line">        <span class="comment">//NioEventLoopGroup()传入参数可以指定子线程个数</span></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//创建服务端的启动服务并配置参数</span></span><br><span class="line">           ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">           bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                   .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                   .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)<span class="comment">//设置线程队列得到连接个数</span></span><br><span class="line">               		<span class="comment">//handler对应bossGroup，childHandler对应workerGroup</span></span><br><span class="line">               		<span class="comment">//handler()是发生在初始化的时候，childHandler()是发生在客户端连接之后。</span></span><br><span class="line">                   .handler(<span class="keyword">null</span>)</span><br><span class="line">                   .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;()&#123;<span class="comment">//创建一个通道测试对象</span></span><br><span class="line">                       <span class="comment">//给pipeline设置处理器</span></span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                           <span class="comment">//传入自定义的handler</span></span><br><span class="line">                           ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">           System.out.println(<span class="string">&quot;server is ready&quot;</span>);</span><br><span class="line">           <span class="comment">//启动服务器，绑定一个端口并同步 生成了一个ChannelFuture对象</span></span><br><span class="line">           ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">           <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">           channelFuture.channel().closeFuture().sync();</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           bossGroup.shutdownGracefully();</span><br><span class="line">           workerGroup.shutdownGracefully();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端发来的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx:上下文对象 含有管道pipeline，通道channel，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg:就是客户端发送的数据 默认是object类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ByteBuf比Nio中的ByteBuffer性能更高</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送的消息:&quot;</span>+byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址:&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取数据完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//把数据写到缓冲区并刷新(从缓冲区发送到管道)</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span>&#123;</span><br><span class="line">        <span class="comment">//关闭通道</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class)<span class="comment">//设置客户端通道的实现类</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;client is ready&quot;</span>);</span><br><span class="line">            <span class="comment">//启动客户端去连接服务端</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当通道就绪就会触发该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,server&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当通道有读取事件时会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息:&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址:&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="taskQueue"><a href="#taskQueue" class="headerlink" title="taskQueue"></a>taskQueue</h2><p>如果pipeline中的handler处理一个时间较长的任务时 可以把该任务交给该channel对应的NioEvenLoop的TaskQueue异步执行 防止阻塞</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210106144955073.png" alt="image-20210106144955073"></p>
<p>修改NettyServerHandler中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ByteBuf比Nio中的ByteBuffer性能更高</span></span><br><span class="line"><span class="comment">//        ByteBuf byteBuf = (ByteBuf)msg;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;客户端发送的消息:&quot;+byteBuf.toString(CharsetUtil.UTF_8));</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;客户端地址:&quot;+ctx.channel().remoteAddress());</span></span><br><span class="line">		<span class="comment">//模拟耗时任务</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取数据完毕</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//把数据写到缓冲区并刷新(从缓冲区发送到管道)</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,aaa&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>客户端先需要等待10s才能得到bbb 在得到aaa</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端不会阻塞 立马输出go on 客户端也立刻得到aaa</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,ccc&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在队列中再增加一个任务 ccc会间隔20s才被收到 taskQueue只有一个线程处理任务</p>
<h2 id="scheduledTaskQueue"><a href="#scheduledTaskQueue" class="headerlink" title="scheduledTaskQueue"></a>scheduledTaskQueue</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,bbb&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//延时执行</span></span><br><span class="line">    ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello,client,ccc&quot;</span>,CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    System.out.println(<span class="string">&quot;go on...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>scheduleTaskQueue和taskQueue是两个线程</p>
<h2 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107142433930.png" alt="image-20210107142433930"></p>
<p>工作原理</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107143303168.png" alt="image-20210107143303168"></p>
<p>在使用Netty进行编程时，拦截操作和转换出入站数据只需要您提供callback或利用future即可。这使得链式操作简单、高效,并有利于编写可重用的、通用的代码</p>
<p><strong>Future-Listener机制</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107143917889.png" alt="image-20210107143917889"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107144247867.png" alt="image-20210107144247867"></p>
<ul>
<li>绑定端口是异步操作 当绑定操作处理完 将会调用相应的监听器处理逻辑</li>
</ul>
<h2 id="http服务程序实例"><a href="#http服务程序实例" class="headerlink" title="http服务程序实例"></a>http服务程序实例</h2><p>要求：服务器回复消息给客户端 并对特定请求资源过滤</p>
<p>新写法：把ChannelInitializer提取出来作为一个单独的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建服务端的启动服务并配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">//使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> HttpServerInitializer());</span><br><span class="line">            <span class="comment">//启动服务器，绑定一个端口并同步 生成了一个ChannelFuture对象</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//加入一个netty 提供的 httpServerCodec（coder和encoder）</span></span><br><span class="line">        <span class="comment">//HttpServerCodec是netty提供的处理http的编解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>,<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//增加自定义的handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;handler&quot;</span>,<span class="keyword">new</span> HttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SimpleChannelInboundHandler是ChannelInboundHandlerAdapter的子类</span></span><br><span class="line"><span class="comment">//HttpObject:客户端和服务端相互通讯的数据被封装成 HttpObject</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//如果不是httpRequest请求</span></span><br><span class="line">        <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line">            System.out.println(msg.getClass());</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress());</span><br><span class="line">            <span class="comment">//回复信息给浏览器</span></span><br><span class="line">            ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello,i am server&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">            <span class="comment">//构造一个http的响应</span></span><br><span class="line">            DefaultFullHttpResponse httpResponse = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line">            httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());</span><br><span class="line">            <span class="comment">//返回response</span></span><br><span class="line">            ctx.writeAndFlush(httpResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务 在浏览器中访问localhost:8888 根据控制台打印的信息 可以判断出浏览器发出了两次请求</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107152203610.png" alt="image-20210107152203610"></p>
<p>过滤掉favicon.ico的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//如果是httpRequest请求</span></span><br><span class="line">    <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line">        System.out.println(msg.getClass());</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line">        HttpRequest httpRequest = (HttpRequest)msg;</span><br><span class="line">        <span class="comment">//获取uri</span></span><br><span class="line">        URI uri = <span class="keyword">new</span> URI(httpRequest.uri());</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath()))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回复信息给浏览器</span></span><br><span class="line">        ByteBuf content = Unpooled.copiedBuffer(<span class="string">&quot;hello,i am server&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">        <span class="comment">//构造一个http的响应</span></span><br><span class="line">        DefaultFullHttpResponse httpResponse = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class="line">        httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());</span><br><span class="line">        <span class="comment">//返回response</span></span><br><span class="line">        ctx.writeAndFlush(httpResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Netty核心模块"><a href="#Netty核心模块" class="headerlink" title="Netty核心模块"></a>Netty核心模块</h2><p>Bootstrap,ServerBootstrap</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154223866.png" alt="image-20210107154223866"></p>
<p>Future,ChannelFuture</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154759707.png" alt="image-20210107154759707"></p>
<p>Channel</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154914489.png" alt="image-20210107154914489"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107154925428.png" alt="image-20210107154925428"></p>
<p>Selector</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155214479.png" alt="image-20210107155214479"></p>
<p>ChannelHandler</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155510137.png" alt="image-20210107155510137"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155716574.png" alt="image-20210107155716574"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210107155955429.png" alt="image-20210107155955429"></p>
<p>ChannelPipeline</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109140931439.png" alt="image-20210109140931439"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141324593.png" alt="image-20210109141324593"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141802136.png" alt="image-20210109141802136"></p>
<p>ChannelHandlerContext</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109141930634.png" alt="image-20210109141930634"></p>
<p>ChannelOption</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109142440513.png" alt="image-20210109142440513"></p>
<p>EventLoop</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109142715578.png" alt="image-20210109142715578"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109143347566.png" alt="image-20210109143347566"></p>
<h2 id="Unpooled类"><a href="#Unpooled类" class="headerlink" title="Unpooled类"></a>Unpooled类</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210109143543585.png" alt="image-20210109143543585"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ByteBuf对象 该对象包含一个数组byte[10]</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            byteBuf.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不需要读写转换 因为ByteBuf中有两个指针readerIndex和writerIndex表示下一个要写入和要读的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; byteBuf.capacity();i++)&#123;</span><br><span class="line">            <span class="comment">//该方法不会引起readIndex的变化</span></span><br><span class="line">            System.out.println(byteBuf.getByte(i));</span><br><span class="line">            <span class="comment">//根据readIndex读取</span></span><br><span class="line">            System.out.println(byteBuf.readByte());</span><br><span class="line">            <span class="comment">//readIndex,writeIndex,capacity将byteBuf划分为三个区间</span></span><br><span class="line">            <span class="comment">//0-readIndex:已读区间</span></span><br><span class="line">            <span class="comment">//readIndex-writeIndex:可读区间</span></span><br><span class="line">            <span class="comment">//writeIndex-capacity:可写区间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="群聊系统"><a href="#群聊系统" class="headerlink" title="群聊系统"></a>群聊系统</h2><p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">//获取到pipeLine</span></span><br><span class="line">                            ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//加入解码器和编码器</span></span><br><span class="line">                            channelPipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            channelPipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            <span class="comment">//加入自己的业务处理handler</span></span><br><span class="line">                            channelPipeline.addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;netty服务器启动&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(port).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//管理所有的channel</span></span><br><span class="line">    <span class="comment">//GlobalEventExecutor.INSTANCE)是全局事件执行器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接建立后 该方法第一个被执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//将当前客户加入聊天的信息推送给其他在线的客户端</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//该方法会将channelGroup中所有channel遍历并发送消息</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;客户端&quot;</span> + channel.remoteAddress() + <span class="string">&quot;加入聊天&quot;</span>);</span><br><span class="line">        <span class="comment">//将当前Channel加入到channelGroup</span></span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示channel处于活跃状态 提示xx上线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;上线了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示channel处于非活跃状态 提示xx下线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;下线了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//断开连接:提示在线用户xx离开</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//当前ChannelGroup容量会-1</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;客户端&quot;</span>+channel.remoteAddress()+<span class="string">&quot;离开了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数据并转发给其他人</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">//根据不同情况 回送不同的消息</span></span><br><span class="line">        channelGroup.forEach(ch -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel != ch)&#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;客户&quot;</span>+channel.remoteAddress() + <span class="string">&quot;发送了消息&quot;</span>+msg);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;自己发送了消息&quot;</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//关闭通道</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NioEventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class).handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">                    channelPipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                    channelPipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                    channelPipeline.addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(channel.localAddress());</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNextLine())&#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                channel.writeAndFlush(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;localhost&quot;</span>,<span class="number">7000</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="心跳检测案例"><a href="#心跳检测案例" class="headerlink" title="心跳检测案例"></a>心跳检测案例</h2><p>有数据交互的时候用SimpleChannelInboundHanlder没有的时候用ChannelInboundHandlerAdapter </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))<span class="comment">//日志</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//IdleStateHandler是netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没读 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没写 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//readerIdleTime表示多长时间没读写 会发送一个心跳检测包检测是否连接</span></span><br><span class="line">                            <span class="comment">//当IdleStatement触发后 就会传递给管道的下一个handler 通过userEventTriggered处理</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> Handler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = <span class="keyword">null</span>;</span><br><span class="line">            channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</span><br><span class="line">            IdleStateEvent stateEvent = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (stateEvent.state())&#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;++超时时间++&quot;</span> + eventType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WebSocket长连接"><a href="#WebSocket长连接" class="headerlink" title="WebSocket长连接"></a>WebSocket长连接</h2><p>实例要求：</p>
<ul>
<li>http协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接</li>
<li>要求：实现基于webSocket的长连接的全双工的交互</li>
<li>改变http协议多次请求的约束，实现长连接后，服务器可以发送消息给浏览器</li>
<li>客户端浏览器和服务器会相互感知</li>
</ul>
<p>server</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))<span class="comment">//日志</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//因为基于http协议 所以要使用http的编码器和解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//http数据在传输过程中是分段的 HttpObjectAggregator可以将数据聚合起来</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                            <span class="comment">//浏览器请求时 ws://localhost:7000/hello 表示请求的url</span></span><br><span class="line">                            <span class="comment">//WebSocketServerProtocolHandler的核心功能是将http协议升级为ws协议 保持长连接</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> Handler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture channelFuture = <span class="keyword">null</span>;</span><br><span class="line">            channelFuture = serverBootstrap.bind(<span class="number">7000</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TextWebSocketFrame表示一个文本帧 数据是以帧的形式传播的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到的消息:&quot;</span>+msg.text());</span><br><span class="line">        <span class="comment">//回复消息给浏览器</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//服务器关闭会触发</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().id().asLongText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>client</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断当前浏览器是否支持WS</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">window</span>.WebSocket)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//与服务器地址必须对应</span></span></span><br><span class="line"><span class="javascript">            socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:7000/hello&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//相当于channelRead0 可以接收服务器会送的消息</span></span></span><br><span class="line"><span class="javascript">            socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value += event.data;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//连接开启</span></span></span><br><span class="line"><span class="javascript">            socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value = <span class="string">&quot;连接开启&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//连接关闭</span></span></span><br><span class="line"><span class="javascript">            socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;responseText&quot;</span>).value += <span class="string">&quot;连接关闭&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;当前浏览器不支持ws&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">message</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//先判断socket是否创建</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(!<span class="built_in">window</span>.socket)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">                if(socket.readyState == WebSocket.OPEN)&#123;</span><br><span class="line">                    socket.send(message)</span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;连接未开启&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;responseText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清空&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编码解码机制"><a href="#编码解码机制" class="headerlink" title="编码解码机制"></a>编码解码机制</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114171347281.png" alt="image-20210114171347281"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114171547184.png" alt="image-20210114171547184"></p>
<h2 id="ProToBuf"><a href="#ProToBuf" class="headerlink" title="ProToBuf"></a>ProToBuf</h2><p>protobuf是一种轻便高效的结构化数据存储方式，可以用于结构化数据串行化(序列化)，以message的方式管理数据，支持跨平台跨语言，高性能高可靠性</p>
<p>运行过程</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114201233174.png" alt="image-20210114201233174"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><p>编写proto文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//版本</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;StudentPojo&quot;</span>; <span class="comment">//生成的外部类名，同时也是文件名</span></span><br><span class="line"><span class="comment">//使用message管理对象 会在StudentPojo外部类中生成一个内部类 它是真正要发送的pojo对象</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//proto类型与java类型的对应请查看官方文档 1表示属性序号 不是值</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载protoc 把.proto文件放到protoc.exe同目录下 执行命令:protoc.exe –java_out=. Student.proto</p>
<p><strong>改写simple中的代码</strong></p>
<p>在client中加入encoder</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114230945733.png" alt="image-20210114230945733"></p>
<p>在clientHandler中创建对象并发送</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114231007239.png" alt="image-20210114231007239"></p>
<p>server中加入decoder</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114231222528.png" alt="image-20210114231222528"></p>
<p>serverHandler中进行接收</p>
<p>方式一</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210114232038708.png" alt="image-20210114232038708"></p>
<p>方式二</p>
<h3 id="传输多种类型"><a href="#传输多种类型" class="headerlink" title="传输多种类型"></a>传输多种类型</h3><p>编写一个含有多个类型的proto文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">//版本</span></span><br><span class="line"><span class="keyword">option</span> optimize_for = SPEED; <span class="comment">//加快解析</span></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;protobuf&quot;</span>; <span class="comment">//指定生成的包</span></span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;DataInfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个枚举类型</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">DataType</span></span>&#123;</span><br><span class="line">    StudentType = <span class="number">0</span>;</span><br><span class="line">    TeacherType = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义属性</span></span><br><span class="line">  DataType data_type = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//表示枚举类型只能出现其中一个</span></span><br><span class="line">  <span class="keyword">oneof</span> dataBody&#123;</span><br><span class="line">    Student student = <span class="number">2</span>;</span><br><span class="line">    Teacher teacher = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="comment">//proto类型与java类型的对应请查看官方文档 1表示属性序号 不是值</span></span><br><span class="line">  <span class="built_in">int32</span> id = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> age = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改ClientHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//随机发送数据</span></span><br><span class="line">    <span class="keyword">int</span> nextInt = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">    DataInfo.MyMessage myMessage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(nextInt == <span class="number">0</span>)&#123;</span><br><span class="line">        myMessage = DataInfo.MyMessage.newBuilder().setDataType(DataInfo.MyMessage.DataType.StudentType).setStudent(DataInfo.Student.newBuilder().setId(<span class="number">3</span>).setName(<span class="string">&quot;bob&quot;</span>).build()).build();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        myMessage = DataInfo.MyMessage.newBuilder().setDataType(DataInfo.MyMessage.DataType.TeacherType).setTeacher(DataInfo.Teacher.newBuilder().setAge(<span class="number">23</span>).setName(<span class="string">&quot;bob&quot;</span>).build()).build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.writeAndFlush(myMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 修改server</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ch</span><span class="selector-class">.pipeline</span>()<span class="selector-class">.addLast</span>(&quot;<span class="selector-tag">decoder</span>&quot;,<span class="selector-tag">new</span> <span class="selector-tag">ProtobufDecoder</span>(<span class="selector-tag">DataInfo</span><span class="selector-class">.MyMessage</span><span class="selector-class">.getDefaultInstance</span>()));</span><br></pre></td></tr></table></figure>

<p>修改serverHandler</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115142725948.png" alt="image-20210115142725948"></p>
<h2 id="入站与出栈机制"><a href="#入站与出栈机制" class="headerlink" title="入站与出栈机制"></a>入站与出栈机制</h2><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115143455187.png" alt="image-20210115143455187"></p>
<h2 id="Handler链调用机制"><a href="#Handler链调用机制" class="headerlink" title="Handler链调用机制"></a>Handler链调用机制</h2><p>package：netty.handler</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210115144700212.png" alt="image-20210115144700212"></p>
<p>使用自定义编解码器来说明handler调用机制 ，客户端和服务端分别可以发送和接收long类型的数据</p>
<p><strong>Server</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            bootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ServerInitializer());</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入站的handler进行解码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ByteToLongDecoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LongToByteEncoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从客户端&quot;</span> + channelHandlerContext.channel().remoteAddress() + <span class="string">&quot;读取到long &quot;</span> + aLong);</span><br><span class="line">        System.out.println(<span class="string">&quot;给客户端发送数据&quot;</span>);</span><br><span class="line">        channelHandlerContext.writeAndFlush(<span class="number">54545L</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteToLongDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该方法根据接受的数据 被多次调用 如果list内容不为空则将他传入给下一个handler处理 该handler的方法也会被调用多次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(byteBuf.readableBytes() &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">            list.add(byteBuf.readLong());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongToByteEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(aLong);</span><br><span class="line">        byteBuf.writeLong(aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>client</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//客户端需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup eventExecutors = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            <span class="comment">//设置相关参数</span></span><br><span class="line">            bootstrap.group(eventExecutors).channel(NioSocketChannel.class)<span class="comment">//设置客户端通道的实现类</span></span><br><span class="line">                    .handler(<span class="keyword">new</span> ClientInitializer());</span><br><span class="line">            System.out.println(<span class="string">&quot;client is ready&quot;</span>);</span><br><span class="line">            <span class="comment">//启动客户端去连接服务端</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>).sync();</span><br><span class="line">            <span class="comment">//对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventExecutors.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line">        <span class="comment">//加入一个出站的handler进行解码</span></span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> LongToByteEncoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ByteToLongDecoder());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息&quot;</span> + aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(<span class="number">1234546L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MessageToByteEncoder中有一个write方法该方法判断数据是否为Long类型如果不是不进行encoder直接发送</span></span><br><span class="line"><span class="comment">//        ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;sdfsafdsadfsdf&quot;, CharsetUtil.UTF_8));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他常用编解码器"><a href="#其他常用编解码器" class="headerlink" title="其他常用编解码器"></a>其他常用编解码器</h2><p><strong>ReplayingDecoder</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116135659701.png" alt="image-20210116135659701"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteToLongDecoder2</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//内部自动进行判断</span></span><br><span class="line">        list.add(byteBuf.readLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其他解码器</strong></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116140257726.png" alt="image-20210116140257726"></p>
<h2 id="TCP粘包和拆包"><a href="#TCP粘包和拆包" class="headerlink" title="TCP粘包和拆包"></a>TCP粘包和拆包</h2><p>package：netty.tcp</p>
<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h3><p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116141719207.png" alt="image-20210116141719207"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116141840005.png" alt="image-20210116141840005"></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a><strong>实例</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.readableBytes()];</span><br><span class="line">        byteBuf.readBytes(buffer);</span><br><span class="line">        String s = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端收到消息&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">120</span>;i++)&#123;</span><br><span class="line">            ByteBuf buffer = Unpooled.copiedBuffer(<span class="string">&quot;hello world&quot;</span> + i, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            ctx.writeAndFlush(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.readableBytes()];</span><br><span class="line">        byteBuf.readBytes(buffer);</span><br><span class="line">        String message = <span class="keyword">new</span> String(buffer, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到数据&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回送数据</span></span><br><span class="line">        ByteBuf buf = Unpooled.copiedBuffer(UUID.randomUUID().toString(),Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        channelHandlerContext.writeAndFlush(buf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义协议解决粘包拆包问题"><a href="#自定义协议解决粘包拆包问题" class="headerlink" title="自定义协议解决粘包拆包问题"></a>自定义协议解决粘包拆包问题</h3><p>package:netty.protocolTcp</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210116145332644.png" alt="image-20210116145332644"></p>
<h2 id="服务器启动源码分析"><a href="#服务器启动源码分析" class="headerlink" title="服务器启动源码分析"></a>服务器启动源码分析</h2><p><strong>EchoServer</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SSL = System.getProperty(<span class="string">&quot;ssl&quot;</span>) != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = Integer.parseInt(System.getProperty(<span class="string">&quot;port&quot;</span>, <span class="string">&quot;8007&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Configure SSL.</span></span><br><span class="line">        <span class="keyword">final</span> SslContext sslCtx;</span><br><span class="line">        <span class="keyword">if</span> (SSL) &#123;</span><br><span class="line">            SelfSignedCertificate ssc = <span class="keyword">new</span> SelfSignedCertificate();</span><br><span class="line">            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sslCtx = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bossGroup用于接收tcp请求,将请求交割workerGroup，workerGroup会获取真正的连接，然后和连接通信</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">final</span> EchoServerHandler serverHandler = <span class="keyword">new</span> EchoServerHandler();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline p = ch.pipeline();</span><br><span class="line">                            <span class="keyword">if</span> (sslCtx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                p.addLast(sslCtx.newHandler(ch.alloc()));</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//p.addLast(new LoggingHandler(LogLevel.INFO));</span></span><br><span class="line">                            p.addLast(serverHandler);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start the server.</span></span><br><span class="line">            ChannelFuture f = b.bind(PORT).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Wait until the server socket is closed.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Shut down all event loops to terminate all threads.</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EventLoopGroup</strong>是事件循环组 含有多个EventLoop 可以注册channel 默认线程数:核心线程数 * 2 </p>
<p>通过debug查看 断点：EventLoopGroup workerGroup = new NioEventLoopGroup()</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117125453180.png" alt="image-20210117125453180"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">NettyRuntime</span>.</span></span>available<span class="constructor">Processors()</span>获取核心线程数</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117130022398.png" alt="image-20210117130022398"></p>
<p>线程放在数组EventExcutor中：继续debug到方法MultithreadEventExecutorGroup中</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133132513.png" alt="image-20210117133132513"></p>
<p>参数说明：</p>
<ul>
<li>Executor：如果传入null则采用Netty默认的线程工厂和默认的执行器ThreadPerTaskExecutor</li>
<li>chooserFactory：单例new  EventExecutorChooserFactory ()</li>
<li>在创建执行器时传入的固定参数</li>
</ul>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117130829226.png" alt="image-20210117130829226"></p>
<p>为每个单例线程池添加一个关闭监听器</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133602412.png" alt="image-20210117133602412"></p>
<p>将所有单例线程池添加到HashSet中</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117133644923.png" alt="image-20210117133644923"></p>
<p>children的类型是EventExecutor他是NioEventLoop的父接口</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117131059365.png" alt="image-20210117131059365"></p>
<p><strong>ServerBootStrap</strong>是一个引导类 用于启动服务器和引导整个程序的初始化。和ServerChannel有关联</p>
<p>首先变量b调用了group方法把两个group放入自己的字段</p>
<p>然后添加了一个channel 参数为Class，引导类通过这个class对象用ChannelFactory反射创建Channel </p>
<p>debug到AbstartBootstrap中</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210117132618131.png" alt="image-20210117132618131"></p>
<p>option方法传入tcp参数 放在LinkedHashMap中</p>
<p>handler方法传入一个handler这个handler专属于ServerSocketChannel而不是SocketChannel</p>
<p>childHandler传入一个handler 这个handler在每个客户端连接时调用供SocketChannel使用</p>
<p><strong>bind</strong>:底层调用了dobind，dobind中有两个核心方法initAndRegister()和doBind0</p>
<p>在iniAndResigter中创建了NioServerSocketChannel，channelFactory.newChannel()做了以下操作</p>
<ul>
<li>(1)通过NIO的SelectorProvider的openServerSocketChannel方法得到JDK的通道。目的是让Netty包装JDK的 channel。<br>(2)创建了一个唯一的ChannelId，创建了一个NioMessageUnsecurity，用于操作消息，创建了DefaultChannelPipeline 管道，是个双向链表结构，用于过滤所有的进出的消息。<br>(3创建了一个NioServerSocketChannelConfig对象，用于对外展示一些配置.</li>
</ul>
<p>init()方法：</p>
<ul>
<li>设置了NioServerSocketChannel的TCP属性</li>
<li>对NioServerSocketChannel的ChannelPipeline添加ChannelInitialize处理器</li>
<li>pipeLine是一个双向链表 本身初始化了head和tail 调用addLast方法是将handler插入到tail的前面 tail永远在最后面做一些系统的固定工作</li>
</ul>
<p>pipeLine的addLast方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118123748135.png" alt="image-20210118123748135"></p>
<p>dobind0():bind会调用NioServerSocketChannel中的dobind方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118125013825.png" alt="image-20210118125013825"></p>
<p>执行完后 服务启动完成 进入NioEventLoop对事件实行循环监听</p>
<h2 id="服务器接收客户端请求源码分析"><a href="#服务器接收客户端请求源码分析" class="headerlink" title="服务器接收客户端请求源码分析"></a>服务器接收客户端请求源码分析</h2><p>NioEventLoop的processSelectedKey方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118130702064.png" alt="image-20210118130702064"></p>
<p>查看SelectionKey：当接受一个连接的时候readyOps是16</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118130739324.png" alt="image-20210118130739324"></p>
<p>在unsafe.read()处标断点 debug 启动 在浏览器访问localhost:8007</p>
<p>read方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118131430679.png" alt="image-20210118131430679"></p>
<p>doReadMessage方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118131506713.png" alt="image-20210118131506713"></p>
<p>pipeline.fireChannelRead方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118132243964.png" alt="image-20210118132243964"></p>
<p>channelRead方法</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118135049425.png" alt="image-20210118135049425"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118132559863.png" alt="image-20210118132559863"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140151220.png" alt="image-20210118140151220"></p>
<p>register底层调用</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140217227.png" alt="image-20210118140217227"></p>
<p>next返回一个Executor它是workGroup子线程中的一个</p>
<p>regiter把channel再次包装 </p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140308861.png" alt="image-20210118140308861"></p>
<p>最后调用的是AbstractChannel中的register</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210118140655725.png" alt="image-20210118140655725"></p>
<p>最后调用doBeginRead开始监听读</p>
<h2 id="pipeline源码分析"><a href="#pipeline源码分析" class="headerlink" title="pipeline源码分析"></a>pipeline源码分析</h2><p>每当ServerSocket创建一个连接的时候 都会创建一个socket 每个新建的socket都会被分配一个ChannelPipeline 每个ChannelPipeline都会包含多个Context context是对handler的封装</p>
<p>入站出站是根据context的状态进行判断 找到链中相应的handler</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122133352078.png" alt="image-20210122133352078"></p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122133737141.png" alt="image-20210122133737141"></p>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC—远程过程调用，是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程，当两个或多个应用程序都分布在不同的服务器上，它们之间的调用都像是本地方法调用一样(如图)</p>
<p><img src="/2020/12/10/netty/log\source_posts\netty\image-20210122140307335.png" alt="image-20210122140307335"></p>
<h2 id="基于Netty实现DubboRPC"><a href="#基于Netty实现DubboRPC" class="headerlink" title="基于Netty实现DubboRPC"></a>基于Netty实现DubboRPC</h2>]]></content>
  </entry>
</search>
